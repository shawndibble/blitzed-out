{"version":3,"file":"index.tsx-CpDqH95I.js","sources":["../../src/hooks/useFullscreenStatus.ts","../../src/hooks/usePrivateRoomBackground.ts","../../src/views/Cast/index.tsx"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\ninterface FullscreenStatusResult {\n  isFullscreen: boolean;\n  toggleFullscreen: () => void;\n}\n\nexport default function useFullscreenStatus(): FullscreenStatusResult {\n  const [isFullscreen, setIsFullscreen] = useState<boolean>(document.fullscreenElement != null);\n\n  useEffect(() => {\n    const handleChange = (): void => {\n      setIsFullscreen(document.fullscreenElement != null);\n    };\n\n    document.addEventListener('fullscreenchange', handleChange);\n\n    return () => {\n      document.removeEventListener('fullscreenchange', handleChange);\n    };\n  }, []);\n\n  // open fullscreen\n  const toggleFullscreen = useCallback((): void => {\n    if (document.fullscreenElement == null) {\n      document.documentElement.requestFullscreen().catch((err) => {\n        console.error('Error attempting to enable fullscreen:', err);\n      });\n    } else {\n      document.exitFullscreen().catch((err) => {\n        console.error('Error attempting to exit fullscreen:', err);\n      });\n    }\n  }, []);\n\n  return { isFullscreen, toggleFullscreen };\n}\n","import { Message, RoomMessage } from '@/types/Message';\n\nimport latestMessageByType from '@/helpers/messages';\nimport { processBackground } from '@/services/getBackgroundSource';\n\ntype ParsedRoom = {\n  roomBackground?: string;\n  roomBackgroundURL?: string;\n};\n\ninterface BackgroundResult {\n  isVideo: boolean;\n  url: string;\n}\n\nexport default function usePrivateRoomBackground(messages: Message[]): BackgroundResult {\n  const roomMessage = latestMessageByType(messages, 'room') as RoomMessage | undefined;\n  let isVideo = false;\n  let url = '';\n\n  if (roomMessage) {\n    let roomBackground: string | undefined;\n    let roomBackgroundURL: string | undefined;\n    try {\n      const parsed = JSON.parse(roomMessage.settings || '{}') as ParsedRoom;\n      roomBackground = parsed.roomBackground;\n      roomBackgroundURL = parsed.roomBackgroundURL;\n    } catch {\n      // ignore invalid JSON and fall back to empty defaults\n    }\n\n    // Prefer explicit roomBackground value. If custom, use URL; otherwise use the preset name.\n    let backgroundInput: string | null = null;\n    if (roomBackground === 'custom' && roomBackgroundURL) {\n      backgroundInput = roomBackgroundURL;\n    } else if (roomBackground && roomBackground !== 'useAppBackground') {\n      backgroundInput = roomBackground;\n    } else if (roomBackgroundURL) {\n      // Backward compatibility: fall back to URL if set\n      backgroundInput = roomBackgroundURL;\n    }\n\n    const backgroundSource = processBackground(backgroundInput);\n    isVideo = !!backgroundSource.isVideo;\n    if (backgroundSource.url) url = backgroundSource.url;\n  }\n\n  if (['color', 'gray'].some((color) => url.includes(color))) url = '';\n\n  return { isVideo, url };\n}\n","import './styles.css';\nimport '@/types/window';\n\nimport { Box, Button, Divider, Grid, Typography } from '@mui/material';\nimport { useEffect, useState } from 'react';\n\nimport { ActionCard } from '@/types/cast';\nimport { Message } from '@/types/Message';\nimport RoomBackground from '@/components/RoomBackground';\nimport ToastAlert from '@/components/ToastAlert';\nimport { Trans } from 'react-i18next';\nimport { getAuth } from 'firebase/auth';\nimport latestMessageByType from '@/helpers/messages';\nimport { loginAnonymously } from '@/services/firebase';\nimport { t } from 'i18next';\nimport useFullscreenStatus from '@/hooks/useFullscreenStatus';\nimport useMessages from '@/context/hooks/useMessages';\nimport { useParams } from 'react-router-dom';\nimport usePrivateRoomBackground from '@/hooks/usePrivateRoomBackground';\nimport useTurnIndicator from '@/hooks/useTurnIndicator';\n\nconst ACTION_TYPE = 'actions';\n\nconst actionCard = (lastAction: Message): ActionCard => {\n  const { text, displayName } = lastAction;\n  if (!displayName) return {};\n\n  const splitText = text?.split('\\n');\n  const [typeString, activityString] = splitText?.slice(1) || [];\n  const type = typeString?.split(':')[1]?.trim();\n  const activity = activityString?.split(':')[1]?.trim();\n\n  return { displayName, type, activity };\n};\n\nexport default function Cast() {\n  const { id: room } = useParams<{ id: string }>();\n  const [alertMessage, setAlertMessage] = useState<string>('');\n  const [openAlert, setOpenAlert] = useState<boolean>(false);\n  const [isCastReceiver, setIsCastReceiver] = useState<boolean>(false);\n  const [needsUserInteraction, setNeedsUserInteraction] = useState<boolean>(false);\n\n  // Get messages context - let it throw if context is not available, we'll catch it with error boundary\n  const { messages, isLoading } = useMessages();\n\n  const { isVideo, url } = usePrivateRoomBackground(messages);\n\n  const lastAction = latestMessageByType(messages, ACTION_TYPE);\n  const nextPlayer = useTurnIndicator(lastAction);\n  const { isFullscreen, toggleFullscreen } = useFullscreenStatus();\n\n  // Auto-login anonymously for cast functionality\n  useEffect(() => {\n    const auth = getAuth();\n\n    if (!auth.currentUser) {\n      loginAnonymously('Cast Viewer').catch((error) => {\n        console.error('Anonymous login failed:', error);\n      });\n    }\n  }, [room]);\n\n  // Enhanced autoplay for Cast page\n  useEffect(() => {\n    if (!isVideo || !url) return;\n\n    // Multiple attempts to ensure autoplay works\n    const attemptAutoplay = () => {\n      const videos = document.querySelectorAll('video');\n      const iframes = document.querySelectorAll('iframe');\n\n      // Force play all video elements\n      videos.forEach((video) => {\n        if (video.paused) {\n          video.muted = true; // Ensure muted for autoplay policy\n          video.play().catch((error) => {\n            console.log('Video autoplay attempt failed:', error);\n            setNeedsUserInteraction(true);\n          });\n        }\n      });\n\n      // For YouTube and other iframe embeds, ensure they're loaded with autoplay\n      iframes.forEach((iframe) => {\n        if (iframe.src) {\n          try {\n            const urlObj = new URL(iframe.src, window.location.origin);\n            const params = urlObj.searchParams;\n            let changed = false;\n            if (params.get('autoplay') !== '1') {\n              params.set('autoplay', '1');\n              changed = true;\n            }\n            if (params.get('mute') !== '1') {\n              params.set('mute', '1');\n              changed = true;\n            }\n            if (changed) {\n              urlObj.search = params.toString();\n              iframe.src = urlObj.toString();\n            }\n          } catch {\n            // If URL parsing fails, fallback to original logic\n            if (!iframe.src.includes('autoplay=1')) {\n              const separator = iframe.src.includes('?') ? '&' : '?';\n              iframe.src += `${separator}autoplay=1&mute=1`;\n            }\n          }\n        }\n      });\n    };\n\n    // Initial attempt\n    const timer1 = setTimeout(attemptAutoplay, 500);\n    // Retry attempt\n    const timer2 = setTimeout(attemptAutoplay, 2000);\n\n    return () => {\n      clearTimeout(timer1);\n      clearTimeout(timer2);\n    };\n  }, [isVideo, url, messages.length]);\n\n  useEffect(() => {\n    // Check if we're running in a Cast receiver environment\n    const isCastEnvironment = window.cast?.framework?.CastReceiverContext;\n    const userAgent = navigator.userAgent;\n    const isChromecast = userAgent.includes('CrKey') || userAgent.includes('TV');\n    const isInIframe = window.self !== window.top;\n\n    // More robust detection for cast environment\n    const isActuallyCasting =\n      isCastEnvironment ||\n      isChromecast ||\n      window.location.search.includes('chromecast') ||\n      window.location.search.includes('receiver');\n\n    if (isActuallyCasting) {\n      document.body.classList.add('cast-receiver-mode');\n      document.body.classList.remove('theme-light');\n      setIsCastReceiver(true);\n    }\n\n    // Add iframe detection for background positioning\n    if (isInIframe) {\n      document.body.classList.add('in-iframe');\n    }\n\n    return () => {\n      if (isActuallyCasting) {\n        document.body.classList.remove('cast-receiver-mode');\n      }\n      if (isInIframe) {\n        document.body.classList.remove('in-iframe');\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isLoading) return;\n\n    const latestMessage = messages[messages.length - 1];\n\n    if (latestMessage?.type === 'settings') {\n      setOpenAlert(true);\n      setAlertMessage(`${latestMessage.displayName} ${t('changedSettings')}`);\n    }\n  }, [messages, isLoading]);\n\n  // Handle user interaction to start playback\n  const handleUserInteraction = () => {\n    const videos = document.querySelectorAll('video');\n    videos.forEach((video) => {\n      if (video.paused) {\n        video.play().catch(console.error);\n      }\n    });\n    setNeedsUserInteraction(false);\n  };\n\n  if (!lastAction) {\n    return (\n      <Box\n        className=\"flex-column cast-main-container\"\n        style={{\n          backgroundImage: !isVideo && url ? `url(${url})` : 'none',\n        }}\n      >\n        {!!url && <RoomBackground url={url} isVideo={isVideo} />}\n\n        {/* User interaction overlay - only when needed and positioned to not block video controls */}\n        {needsUserInteraction && (\n          <Box onClick={handleUserInteraction} className=\"user-interaction-overlay\">\n            Click to enable autoplay\n          </Box>\n        )}\n        <Grid\n          container\n          spacing={0}\n          direction=\"column\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          className=\"cast-container cast-grid-container\"\n        >\n          <Grid container justifyContent=\"center\">\n            <div className=\"action-box-large responsive-cast-box\">\n              <Typography variant=\"h2\" className=\"cast-title\">\n                blitzedout.com/{room}\n              </Typography>\n              {isLoading ? (\n                <Typography variant=\"h4\" className=\"cast-loading-text\">\n                  Connecting to game...\n                </Typography>\n              ) : (\n                <Typography variant=\"h4\" className=\"cast-ready-text\">\n                  Ready for game to start\n                </Typography>\n              )}\n            </div>\n          </Grid>\n        </Grid>\n      </Box>\n    );\n  }\n\n  const { displayName, type, activity } = actionCard(lastAction);\n\n  return (\n    <Box\n      className=\"flex-column cast-main-container\"\n      onClick={needsUserInteraction ? handleUserInteraction : undefined}\n      style={{\n        backgroundImage: !isVideo && url ? `url(${url})` : 'none',\n        cursor: needsUserInteraction ? 'pointer' : 'default',\n      }}\n    >\n      {!!url && <RoomBackground url={url} isVideo={isVideo} />}\n      <Box display=\"flex\" justifyContent=\"space-between\" className=\"cast-header-bar\">\n        <Box flex=\"1\">\n          {!isCastReceiver && !isFullscreen && (\n            <Button variant=\"text\" onClick={toggleFullscreen} className=\"cast-fullscreen-button\">\n              {t('fullscreen')}\n            </Button>\n          )}\n        </Box>\n\n        <Box textAlign=\"center\" flex=\"1\" key={nextPlayer?.displayName}>\n          {!!nextPlayer?.displayName && (\n            <Typography variant=\"h4\" className=\"cast-next-player\">\n              <Trans i18nKey=\"nextPlayersTurn\" values={{ player: nextPlayer.displayName }} />\n            </Typography>\n          )}\n        </Box>\n\n        <Box flex=\"1\" textAlign=\"right\" className=\"text-stroke\">\n          {activity && (\n            <Typography variant=\"h4\" className=\"cast-room-url\">\n              blitzedout.com/{room}\n            </Typography>\n          )}\n        </Box>\n      </Box>\n\n      <Grid\n        container\n        spacing={0}\n        direction=\"column\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        className=\"cast-container cast-grid-container-adjusted\"\n        key={messages.length}\n      >\n        <Grid container justifyContent=\"center\">\n          {activity ? (\n            <Grid size={12} className=\"action-box-responsive responsive-cast-box\">\n              <Typography variant=\"h3\" className=\"cast-type-text\">\n                {`${type} ${t('for')} ${displayName}`}\n              </Typography>\n              <Box className=\"cast-divider\">\n                <Divider />\n              </Box>\n              <Typography variant=\"h1\" className=\"cast-activity-text\">\n                {activity}\n              </Typography>\n            </Grid>\n          ) : (\n            <div className=\"action-box-responsive responsive-cast-box\">\n              <Typography variant=\"h1\" className=\"cast-room-main\">\n                blitzedout.com/{room}\n              </Typography>\n            </div>\n          )}\n        </Grid>\n      </Grid>\n\n      <ToastAlert open={!!openAlert} close={() => setOpenAlert(false)} hideCloseButton>\n        <Typography variant=\"h5\" className=\"cast-alert-text\">\n          {alertMessage}\n        </Typography>\n      </ToastAlert>\n    </Box>\n  );\n}\n"],"names":["useFullscreenStatus","isFullscreen","setIsFullscreen","useState","useEffect","handleChange","toggleFullscreen","useCallback","err","usePrivateRoomBackground","messages","roomMessage","latestMessageByType","isVideo","url","roomBackground","roomBackgroundURL","parsed","e","backgroundInput","backgroundSource","processBackground","color","ACTION_TYPE","actionCard","lastAction","_a","_b","text","displayName","splitText","typeString","activityString","type","activity","Cast","room","useParams","alertMessage","setAlertMessage","openAlert","setOpenAlert","isCastReceiver","setIsCastReceiver","needsUserInteraction","setNeedsUserInteraction","isLoading","useMessages","nextPlayer","useTurnIndicator","getAuth","loginAnonymously","error","attemptAutoplay","videos","iframes","video","iframe","urlObj","params","changed","separator","timer1","timer2","isCastEnvironment","userAgent","isChromecast","isInIframe","isActuallyCasting","latestMessage","t","handleUserInteraction","jsxs","Box","jsx","RoomBackground","Grid","Typography","Button","Trans","Divider","ToastAlert"],"mappings":"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"}