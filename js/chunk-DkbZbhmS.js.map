{"version":3,"file":"chunk-DkbZbhmS.js","sources":["../../src/hooks/useHybridPlayerList.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport { useLocalPlayers } from './useLocalPlayers';\nimport usePlayerList from './usePlayerList';\n\ninterface BasePlayer {\n  displayName: string;\n  uid: string;\n  isSelf: boolean;\n  location: number;\n  isFinished: boolean;\n  status: 'active' | 'idle' | 'away';\n  lastActivity: Date;\n}\n\nexport interface LocalPlayerExtended extends BasePlayer {\n  isLocal: true;\n  localId: string;\n  role: string;\n  order: number;\n}\n\ninterface RemotePlayer extends BasePlayer {\n  isLocal: false;\n}\n\nexport type HybridPlayer = LocalPlayerExtended | RemotePlayer;\n\n/**\n * Hook that provides a combined list of local and remote players\n * Shows local players when in local multiplayer mode, otherwise shows remote players\n */\nexport default function useHybridPlayerList(): HybridPlayer[] {\n  const remotePlayerList = usePlayerList();\n  const { localPlayers, hasLocalPlayers, isLocalPlayerRoom } = useLocalPlayers();\n\n  const hybridPlayerList = useMemo(() => {\n    const players: HybridPlayer[] = [];\n\n    // Include remote players (will be excluded in local multiplayer mode)\n    const remotePlayersTyped: RemotePlayer[] = remotePlayerList.map((player) => ({\n      ...player,\n      isLocal: false as const,\n    }));\n    players.push(...remotePlayersTyped);\n\n    // Use local players when in local multiplayer mode (multiple players on single device)\n    if (hasLocalPlayers && isLocalPlayerRoom) {\n      const localPlayersTyped: LocalPlayerExtended[] = localPlayers\n        .map((localPlayer) => ({\n          displayName: localPlayer.name,\n          uid: `local-${localPlayer.id}`, // Unique identifier for local players\n          isSelf: localPlayer.isActive, // Local active player is considered \"self\"\n          location: localPlayer.location, // Each local player has their own board position\n          isFinished: localPlayer.isFinished, // Track completion status per player\n          status: 'active' as const, // Local players are always active when in session\n          lastActivity: new Date(), // Local players have current activity\n          isLocal: true as const,\n          localId: localPlayer.id,\n          role: localPlayer.role,\n          order: localPlayer.order,\n        }))\n        .sort((a, b) => a.order - b.order); // Sort by turn order\n\n      // In local multiplayer mode, show only local players in turn order\n      // Don't include remote players when in local multiplayer mode\n      return localPlayersTyped;\n    }\n\n    return players;\n  }, [remotePlayerList, localPlayers, hasLocalPlayers, isLocalPlayerRoom]);\n\n  return hybridPlayerList;\n}\n\n/**\n * Type guard to check if a player is a local player\n */\nexport function isLocalPlayer(player: HybridPlayer): player is LocalPlayerExtended {\n  return player.isLocal === true;\n}\n\n/**\n * Type guard to check if a player is a remote player\n */\nexport function isRemotePlayer(player: HybridPlayer): player is RemotePlayer {\n  return player.isLocal === false;\n}\n"],"names":["useHybridPlayerList","remotePlayerList","usePlayerList","localPlayers","hasLocalPlayers","isLocalPlayerRoom","useLocalPlayers","useMemo","players","remotePlayersTyped","player","__spreadProps","localPlayer","a","b","isLocalPlayer"],"mappings":"snCA+BA,SAAwBA,GAAsC,CAC5D,MAAMC,EAAmBC,EAAA,EACnB,CAAE,aAAAC,EAAc,gBAAAC,EAAiB,kBAAAC,CAAA,EAAsBC,EAAA,EAsC7D,OApCyBC,EAAAA,QAAQ,IAAM,CACrC,MAAMC,EAA0B,CAAA,EAG1BC,EAAqCR,EAAiB,IAAKS,GAAYC,OACxED,CAAA,EADwE,CAE3E,QAAS,EAAA,CACX,CAAE,EAIF,OAHAF,EAAQ,KAAK,GAAGC,CAAkB,EAG9BL,GAAmBC,EAC4BF,EAC9C,IAAKS,IAAiB,CACrB,YAAaA,EAAY,KACzB,IAAK,SAASA,EAAY,EAAE,GAC5B,OAAQA,EAAY,SACpB,SAAUA,EAAY,SACtB,WAAYA,EAAY,WACxB,OAAQ,SACR,iBAAkB,KAClB,QAAS,GACT,QAASA,EAAY,GACrB,KAAMA,EAAY,KAClB,MAAOA,EAAY,KAAA,EACnB,EACD,KAAK,CAACC,EAAGC,IAAMD,EAAE,MAAQC,EAAE,KAAK,EAO9BN,CACT,EAAG,CAACP,EAAkBE,EAAcC,EAAiBC,CAAiB,CAAC,CAGzE,CAKO,SAASU,EAAcL,EAAqD,CACjF,OAAOA,EAAO,UAAY,EAC5B"}