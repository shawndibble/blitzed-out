{"version":3,"mappings":";6oDAgBA,SAAwBA,GAAmBC,EAA8C,CACvF,OAAO,OAAO,QAAQA,CAAa,EAAE,QAAQ,CAAC,CAACC,EAAK,CAAE,MAAAC,EAAO,QAAAC,CAAA,CAAS,IAC/DA,EACe,OAAO,KAAKA,CAAO,EAAE,OAAQC,GAAUA,IAAUC,EAAmB,EACrE,IAAI,CAACC,EAAWC,KAAW,CAC5C,MAAOC,GAAcP,CAAG,EACxB,WAAYC,EACZ,MAAOD,EACP,UAAW,OAAOM,EAAQ,CAAC,EAC3B,oBAAqBD,EACrB,MAAO,GAAGJ,CAAK,MAAMI,CAAS,IAC9B,EATmB,EAUtB,CACH,CCdA,MAAMG,GAAwB,QAGxBC,GAAqB,EACrBC,GAAuB,EA2C7B,eAAsBC,GACpBC,EAAS,KACTC,EAGI,GACa,CACjB,GAAI,CAEF,IAAIC,EAEJ,GAAID,EAAQ,cAAgB,UAAYA,EAAQ,YAAa,CAE3D,MAAME,EAAQ,MAAMC,GAAqBH,EAAQ,YAAaD,CAAM,EACpEE,EAAeC,GAAS,CAACA,EAAM,UAAY,CAACA,CAAK,EAAI,EACvD,MAAWF,EAAQ,cAAgB,UAEjCC,EAAe,GAIfA,GADkB,MAAMG,GAAgB,CAAE,OAAAL,EAAQ,GACzB,OAAQG,GAAU,CAACA,EAAM,SAAS,EAI7D,MAAMG,EAAqB,MAAMD,GAAgB,CAAE,OAAAL,EAAQ,EACrDO,EAAoB,IAAI,IAC5BD,EAAmB,OAAQH,GAAUA,EAAM,SAAS,EAAE,IAAKA,GAAUA,EAAM,IAAI,GAK3EK,GADiB,MAAMC,GAAS,CAAE,SAAU,EAAG,GAChB,OAAQC,GAAS,CACpD,MAAMC,EAAgB,CAACD,EAAK,QAAUA,EAAK,SAAWV,EAGtD,OAAIC,EAAQ,cAAgB,UAAYA,EAAQ,YACvCU,GAAiBD,EAAK,QAAUT,EAAQ,YAI7CA,EAAQ,cAAgB,UAEnBU,GAAiBJ,EAAkB,IAAIG,EAAK,KAAK,EAInDC,CACT,CAAC,EAGKC,EAAoC,GAG1C,UAAWT,KAASD,EAAc,CAEhC,MAAMW,EAAkBV,EAAM,YAC3B,KAAK,CAACW,EAAGC,IAAMD,EAAE,MAAQC,EAAE,KAAK,EAChC,IAAKtB,GAAcA,EAAU,KAAK,EAG/BuB,EAAgBb,EAAM,YAAY,KAAMc,GAAMA,EAAE,QAAUnB,EAAoB,EAC9EoB,EAAiBL,EAAgB,OAAQxB,GAAUA,IAAU2B,GAAe,KAAK,EACjFG,EAAgBH,EAClB,CAACA,EAAc,MAAO,GAAGE,CAAc,EACvCL,EAEJD,EAAOT,EAAM,IAAI,EAAI,CACnB,MAAOA,EAAM,MACb,KAAMA,EAAM,MAAQ,MACpB,YAAagB,CAAA,CAEjB,CAGA,MAAMC,EAA8C,GAEpD,UAAWV,KAAQF,EACZY,EAAYV,EAAK,KAAK,IACzBU,EAAYV,EAAK,KAAK,EAAI,IAEvBU,EAAYV,EAAK,KAAK,EAAEA,EAAK,SAAS,IACzCU,EAAYV,EAAK,KAAK,EAAEA,EAAK,SAAS,EAAI,IAIxCA,EAAK,MAAQA,EAAK,KAAK,OAAS,EAClCU,EAAYV,EAAK,KAAK,EAAEA,EAAK,SAAS,EAAE,KAAK,CAC3C,OAAQA,EAAK,OACb,KAAMA,EAAK,KACZ,EAEDU,EAAYV,EAAK,KAAK,EAAEA,EAAK,SAAS,EAAE,KAAKA,EAAK,MAAM,EAK5D,MAAMW,EAA0C,GAChD,OAAO,KAAKT,CAAM,EACf,OACA,QAASxB,GAAQ,CAChBiC,EAAajC,CAAG,EAAIwB,EAAOxB,CAAG,CAChC,CAAC,EAGH,MAAMkC,EAAoD,GAC1D,cAAO,KAAKF,CAAW,EACpB,OACA,QAASG,GAAc,CACtBD,EAAkBC,CAAS,EAAI,GAE/B,OAAO,KAAKH,EAAYG,CAAS,CAAC,EAC/B,KAAK,CAACT,EAAGC,IAAM,OAAO,SAASD,EAAG,EAAE,EAAI,OAAO,SAASC,EAAG,EAAE,CAAC,EAC9D,QAAStB,GAAc,CACtB6B,EAAkBC,CAAS,EAAE,OAAO,SAAS9B,EAAW,EAAE,CAAC,EACzD2B,EAAYG,CAAS,EAAE,OAAO,SAAS9B,EAAW,EAAE,CAAC,CACzD,CAAC,CACL,CAAC,EAUI,KAAK,UARwB,CAClC,QAASG,GACT,OAAAI,EACA,OAAQqB,EACR,YAAaC,CAAA,EAMb,CAACE,EAAMC,KAED,MAAM,QAAQA,CAAK,GAAKA,EAAM,OAAS,GAAK,OAAOA,EAAM,CAAC,GAAM,SAC3DA,GAIX5B,EAAA,CAEJ,OAAS6B,EAAO,CACd,cAAQ,MAAM,8BAA+BA,CAAK,EAC5C,IAAI,MAAM,kBAAkBA,CAAK,EAAE,CAC3C,CACF,CAUA,eAAsBC,GACpBC,EACA3B,EAGI,GACmB,CACvB,MAAM4B,EAAuB,CAC3B,QAAS,GACT,eAAgB,EAChB,cAAe,EACf,OAAQ,GACR,SAAU,EAAC,EAGb,GAAI,CAEF,IAAIC,EACJ,GAAI,CACFA,EAAa,KAAK,MAAMF,CAAgB,CAC1C,OAASF,EAAO,CACd,OAAAG,EAAO,OAAO,KAAK,qBAAqB,EACxC,QAAQ,KAAK,oCAAqCH,CAAK,EAChDG,CACT,CAGA,GAAI,CAACC,EAAW,SAAW,CAACA,EAAW,QAAU,CAACA,EAAW,YAC3D,OAAAD,EAAO,OAAO,KAAK,iEAAiE,EAC7EA,EAILC,EAAW,UAAYlC,IACzBiC,EAAO,SAAS,KACd,qCAAqCjC,EAAqB,SAASkC,EAAW,OAAO,IAIzF,MAAMC,EAAe9B,EAAQ,QAAU6B,EAAW,QAAU,KACtDE,EAAgB/B,EAAQ,eAAiB,OAG/C,SAAW,CAACsB,EAAWU,CAAS,IAAK,OAAO,QAAQH,EAAW,MAAM,EACnE,GAAI,CAEF,MAAMI,EAAgB,MAAM9B,GAAqBmB,EAAWQ,CAAY,EACxE,IAAII,EAAiBZ,EAErB,GAAIW,EACF,OAAQF,EAAA,CACN,IAAK,OACHH,EAAO,SAAS,KAAK,2BAA2BN,CAAS,EAAE,EAC3D,SACF,IAAK,YAEHM,EAAO,SAAS,KAAK,+BAA+BN,CAAS,EAAE,EAC/D,MACF,IAAK,SAAU,CAEb,IAAIa,EAAU,EAEd,IADAD,EAAiB,GAAGZ,CAAS,YACtB,MAAMnB,GAAqB+B,EAAgBJ,CAAY,GAC5DI,EAAiB,GAAGZ,CAAS,aAAaa,CAAO,GACjDA,IAEFP,EAAO,SAAS,KAAK,sBAAsBN,CAAS,OAAOY,CAAc,EAAE,EAC3E,KACF,EAKJ,MAAME,EAAsCJ,EAAU,YAAY,IAAI,CAAC5C,EAAOK,KAAW,CACvF,GAAI,aAAaA,CAAK,GACtB,MAAAL,EACA,MAAOK,EACP,UAAWA,IAAUI,EAAA,EACrB,EAGIwC,EAAc,CAClB,KAAMH,EACN,MAAOF,EAAU,MACjB,YAAAI,EACA,KAAMJ,EAAU,KAChB,OAAQF,EACR,UAAW,IAIPQ,EAAa,MAAMC,GAAoBF,CAAW,EACxD,GAAI,CAACC,EAAW,QAAS,CACvBV,EAAO,OAAO,KAAK,iBAAiBM,CAAc,KAAKI,EAAW,OAAO,KAAK,IAAI,CAAC,EAAE,EACrF,QACF,CAGIL,GAAiBF,IAAkB,YACrC,MAAMS,GAAkBP,EAAc,GAAII,CAAW,EAErD,MAAMI,GAAeJ,CAAW,EAGlCT,EAAO,gBACT,OAASH,EAAO,CACdG,EAAO,OAAO,KAAK,yBAAyBN,CAAS,KAAKG,CAAK,EAAE,CACnE,CAIF,SAAW,CAACH,EAAWoB,CAAS,IAAK,OAAO,QAAQb,EAAW,WAAW,EACxE,GAAI,CAEF,MAAM3B,EAAQ,MAAMC,GAAqBmB,EAAWQ,CAAY,EAChE,GAAI,CAAC5B,EAAO,CACV0B,EAAO,SAAS,KAAK,SAASN,CAAS,6CAA6C,EACpF,QACF,CAGA,SAAW,CAACqB,EAActD,CAAO,IAAK,OAAO,QAAQqD,CAAS,EAAG,CAC/D,MAAMlD,EAAY,OAAO,SAASmD,EAAc,EAAE,EAIlD,GAAI,CADmBzC,EAAM,YAAY,KAAMc,GAAMA,EAAE,QAAUxB,CAAS,EACrD,CACnBoC,EAAO,SAAS,KACd,aAAapC,CAAS,wBAAwB8B,CAAS,oBAEzD,QACF,CAEA,UAAWsB,KAAYvD,EACrB,GAAI,CAEF,IAAIwD,EACAC,EAAiB,GAErB,GAAI,OAAOF,GAAa,SACtBC,EAASD,UACAA,GAAY,OAAOA,GAAa,UAAY,WAAYA,EACjEC,EAASD,EAAS,OAClBE,EAAOF,EAAS,MAAQ,OACnB,CACLhB,EAAO,SAAS,KAAK,qCAAqCN,CAAS,YAAY,EAC/E,QACF,CAYA,IATsB,MAAMd,GAAA,GACO,KAChCuC,GACCA,EAAS,QAAUzB,GACnByB,EAAS,YAAcvD,GACvBuD,EAAS,SAAWF,IACnB,CAACE,EAAS,QAAUA,EAAS,SAAWjB,EAAA,GAGzBC,IAAkB,OAAQ,CAC5CH,EAAO,SAAS,KAAK,0BAA0BiB,EAAO,UAAU,EAAG,EAAE,CAAC,KAAK,EAC3E,QACF,CAGA,MAAMG,GAAc,CAClB,MAAO1B,EACP,UAAA9B,EACA,OAAAqD,EACA,KAAAC,EACA,SAAU,EACV,OAAQhB,CAAA,CACT,EAEDF,EAAO,eACT,OAASH,EAAO,CACdG,EAAO,OAAO,KACZ,yBAAyB,OAAOgB,GAAa,SAAWA,EAAS,UAAU,EAAG,EAAE,EAAI,QAAQ,SAASnB,CAAK,GAE9G,CAEJ,CACF,OAASA,EAAO,CACdG,EAAO,OAAO,KAAK,mCAAmCN,CAAS,KAAKG,CAAK,EAAE,CAC7E,CAGF,OAAAG,EAAO,QAAUA,EAAO,OAAO,SAAW,EACnCA,CACT,OAASH,EAAO,CACd,OAAAG,EAAO,OAAO,KAAK,kBAAkBH,CAAK,EAAE,EACrCG,CACT,CACF,CAKA,eAAsBqB,GACpBC,EACAC,EACAC,EAAU,KACVC,EAAY,SACW,CACvB,MAAMzB,EAAuB,CAC3B,QAAS,GACT,eAAgB,EAChB,cAAe,EACf,OAAQ,GACR,SAAU,EAAC,EAGb,GAAI,CAEF,KAAM,CAAE,QAAS0B,GAA2B,MAAAC,GAAA,wBAAAD,CAAA,OAAM,QAAO,yCAA0B,iBAAAA,CAAA,+EAE7EE,EAAgB,MAAMhD,GAAA,EACtB,CAAE,iBAAAiD,EAAkB,kBAAAC,CAAA,EAAsBJ,EAC9CJ,EACAM,EACAL,CAAA,EAIF,UAAW1C,KAAQgD,EACjB,GAAI,CACF,MAAMT,GAAcvC,CAAI,EACxBmB,EAAO,eACT,OAASH,EAAO,CACdG,EAAO,OAAO,KAAK,yBAAyBH,CAAK,EAAE,CACrD,CAIF,UAAWhB,KAAQiD,EACjB,GAAI,CACEjD,EAAK,IACP,MAAMkD,GAAiBlD,EAAK,GAAIA,CAAI,CAExC,OAASgB,EAAO,CACdG,EAAO,OAAO,KAAK,wBAAwBH,CAAK,EAAE,CACpD,CAGF,OAAAG,EAAO,QAAUA,EAAO,OAAO,SAAW,EAC1CA,EAAO,SAAS,KACd,mGAGKA,CACT,OAASH,EAAO,CACd,OAAAG,EAAO,OAAO,KAAK,yBAAyBH,CAAK,EAAE,EAC5CG,CACT,CACF,CAKA,eAAsBgC,GAAgBtC,EAAmBvB,EAAS,KAAuB,CACvF,OAAOD,GAAgBC,EAAQ,CAC7B,YAAauB,EACb,YAAa,SACd,CACH,CAKA,eAAsBuC,GACpBlC,EACAwB,EACAnD,EAII,GACmB,CACvB,MAAM8D,EAAcnC,EAAiB,OAGrC,GAAI,CACF,MAAMoC,EAAa,KAAK,MAAMD,CAAW,EAGzC,GAAIC,EAAW,SAAWA,EAAW,OACnC,OAAOrC,GAAgBoC,EAAa9D,CAAO,EAI7C,GAAI+D,EAAW,SAAWA,EAAW,eAAiB,OACpD,MAAO,CACL,QAAS,GACT,eAAgB,EAChB,cAAe,EACf,OAAQ,CAAC,wEAAwE,EACjF,SAAU,EAAC,CAGjB,MAAQ,CAER,CAGA,OAAOd,GACLa,EACAX,EACAnD,EAAQ,QAAU,KAClBA,EAAQ,UAAY,SAExB,CAgDA,eAAsBgE,GACpBjE,EAAS,KACsD,CAC/D,GAAI,CAGF,MAAMkE,GADe,MAAM7D,GAAgB,CAAE,OAAAL,EAAQ,GACf,OAAQG,GAAU,CAACA,EAAM,SAAS,EAGlEgE,EAAiB,MAAM1D,GAAS,CAAE,SAAU,EAAG,EAErD,OAAOyD,EAAiB,IAAK/D,GAAU,CACrC,MAAMiE,EAAaD,EAAe,OAC/BzD,GAASA,EAAK,QAAUP,EAAM,OAAS,CAACO,EAAK,QAAUA,EAAK,SAAWV,EAAA,EAG1E,MAAO,CACL,KAAMG,EAAM,KACZ,MAAOA,EAAM,MACb,UAAWiE,EAAW,OAE1B,CAAC,CACH,OAAS1C,EAAO,CACd,eAAQ,MAAM,6CAA8CA,CAAK,EAC1D,EACT,CACF,CCzjBA,SAAwB2C,GAAa,CACnC,SAAAC,EACA,aAAAC,EACA,YAAAnD,EACA,aAAAgC,EACA,iBAAAoB,EACA,WAAYC,CACd,EAAsB,CACpB,MAAMC,EAAWC,SAA+B,IAAI,EAC9C,CAAE,GAAMC,GAAA,EACR,CAAE,SAAAC,CAAA,EAAaC,GAAA,EACf,CAACC,EAAYC,CAAa,EAAIC,WAAiB,EAAE,EAEjD,CAACC,EAAcC,CAAe,EAAIF,WAA8B,IAAI,EACpE,CAACG,EAAcC,CAAe,EAAIJ,WAA6B,OAAO,EACtE,CAACK,EAAaC,CAAc,EAAIN,WAAuC,KAAK,EAC5E,CAACO,EAAaC,CAAc,EAAIR,WAAiB,EAAE,EACnD,CAACS,EAAiBC,CAAkB,EAAIV,WAE5C,EAAE,EACE,CAACjD,EAAe4D,CAAgB,EAAIX,WAA0C,MAAM,EAEpFY,EAAaC,cAAY,SAAY,CACzC,GAAI,CACF,GAAIV,IAAiB,QAAS,CAC5B,IAAIW,EAEJ,OAAQT,EAAA,CACN,IAAK,SACH,GAAI,CAACE,EAAa,CAChBhB,EAAiB,CACf,QAAS,EAAE,4BAA4B,EACvC,KAAM,QACP,EACD,MACF,CACAuB,EAAe,MAAMlC,GAAgB2B,EAAaX,EAAS,QAAU,IAAI,EACzE,MACF,IAAK,UACHkB,EAAe,MAAMhG,GAAgB8E,EAAS,QAAU,KAAM,CAC5D,YAAa,UACd,EACD,MACF,QACEkB,EAAe,MAAMhG,GAAgB8E,EAAS,QAAU,KAAM,CAAE,YAAa,MAAO,EACpF,MAGJG,EAAce,CAAY,CAC5B,KAAO,CAIL,MAAMC,EAFkB5E,EAAY,OAAQV,GAASA,EAAK,QAAQ,EAE7B,IACnC,CAAC,CAAE,MAAAP,EAAO,UAAAV,EAAW,OAAAqD,EAAQ,KAAAC,EAAM,SAAAkD,EAAW,YAAe,CAO3D,MAAMC,EALiBhH,GACrBkE,EAAa6C,CAAqC,GAAK,EAAC,EAI1B,KAC7B1G,GAAUA,GAAO,YAAc,OAAOE,CAAS,GAAKF,GAAO,QAAUY,CAAA,EAGxE,IAAIgG,EAAa,GACjB,OAAAA,GAAc,IAAID,GAAU,OAAS/F,CAAK,MAAM+F,GAAU,qBAAuBzG,CAAS;AAAA,EAC1F0G,GAAcrD,EACdqD,GAAcpD,GAAM,OAAS;AAAA,QAAaA,GAAM,KAAK,IAAI,EAAI,GAC7DoD,GAAc;AAAA,YAAeF,CAAQ,GAE9BE,CACT,GAGFnB,EAAcgB,EAAa,KAAK;AAAA;AAAA,CAAS,CAAC,CAC5C,CACF,OAAStE,EAAO,CACd,QAAQ,MAAM,wBAAyBA,CAAK,EAC5C8C,EAAiB,CACf,QAAS,EAAE,sBAAuB,CAAE,MAAA9C,EAAc,EAClD,KAAM,QACP,CACH,CACF,EAAG,CACDN,EACAgC,EACA4B,EACAI,EACAE,EACAE,EACAX,EAAS,OACTL,EACA,EACD,EAED,eAAe4B,EAAYC,EAAkD,CAC3E,GAAI,CAACA,EAAQ,QAAS,OAGtB,MAAMC,EADOD,EAAQ,QACQ,WAAW,MAExC,GAAI,CAACC,EAAgB,OACnB,OAAO9B,EAAiB,CACtB,KAAM,QACN,QAAS,EAAE,mBAAmB,EAC/B,EAGH,GAAI,CACFA,EAAiB,CAAE,KAAM,OAAQ,QAAS,EAAE,0BAA0B,EAAG,EAGzE,MAAM3C,EAAS,MAAMiC,GAAewC,EAAiBlD,EAAc,CACjE,OAAQyB,EAAS,QAAU,KAC3B,cAAA7C,CAAA,CACD,EAID,GAFAmD,EAAgBtD,CAAM,EAElBA,EAAO,QAAS,CAEdA,EAAO,cAAgB,IACK,MAAA2B,GAAA,IAAM,OAAO,qBAAsB,6CAAE,KAAM+C,GACvEA,EAAO,SAAS,CAAE,SAAU,EAAG,IAIX,MAAM,CAAC1E,EAAO,aAAa,EAAE,QAAQ,MAAO2E,GAAW,CAC3EC,GAAmB,GAAGD,EAAO,KAAK,MAAMA,EAAO,SAAS,GAAIA,EAAO,MAAM,CAC3E,CAAC,EAGH,IAAIE,EAAkB,EAAE,8BAA8B,EAClD7E,EAAO,eAAiB,IAC1B6E,GAAW,IAAI,EAAE,gCAAiC,CAAE,MAAO7E,EAAO,eAAgB,CAAC,IAEjFA,EAAO,cAAgB,IACzB6E,GAAW,IAAI,EAAE,+BAAgC,CAAE,MAAO7E,EAAO,cAAe,CAAC,IAGnF2C,EAAiB,CACf,KAAM,UACN,QAAAkC,CAAA,CACD,EAGD,MAAMb,EAAA,CACR,MACErB,EAAiB,CACf,KAAM,QACN,QAAS,EAAE,sBAAuB,CAAE,OAAQ3C,EAAO,OAAO,KAAK,IAAI,EAAG,EACvE,CAEL,OAASH,EAAY,CACnB,QAAQ,MAAM,gBAAiBA,CAAK,EACpC8C,EAAiB,CACf,KAAM,QACN,QAAS,EAAE,sBAAuB,CAAE,OAAQ9C,EAAM,SAAWA,EAAO,EACrE,EACDyD,EAAgB,IAAI,CACtB,CACF,CAGA,MAAMwB,EAAsBb,cAAY,SAAY,CAClD,GAAI,CACF,MAAMlF,EAAS,MAAMqD,GAA4BY,EAAS,QAAU,IAAI,EACxEc,EAAmB/E,CAAM,CAC3B,OAASc,EAAO,CACd,QAAQ,MAAM,kCAAmCA,CAAK,CACxD,CACF,EAAG,CAACmD,EAAS,MAAM,CAAC,EAEpB+B,mBAAU,IAAM,CACVtC,IAAa,aACfqC,EAAA,EACAd,EAAA,EAEJ,EAAG,CAACvB,EAAUlD,EAAayE,EAAYc,CAAmB,CAAC,EAGzDE,OAACC,GAAA,CACC,SAAUxC,IAAa,WACvB,SAAUC,EAAa,UAAU,EACjC,UAAU,kBAEV,UAAAwC,MAACC,GAAA,CAAiB,gBAAc,mBAAmB,GAAG,kBACpD,SAAAD,MAACE,EAAA,CAAW,UAAU,kBACpB,SAAAF,MAACG,EAAA,CAAM,QAAQ,eAAe,EAChC,EACF,SACCC,GAAA,CACC,UAAAJ,MAACE,EAAA,CAAW,QAAQ,QAAQ,GAAI,CAAE,GAAI,GACpC,SAAAF,MAACG,EAAA,CAAM,QAAQ,sBAAsB,EACvC,EAGAL,OAACO,EAAA,CACC,GAAI,CACF,QAAS,OACT,SAAU,OACV,IAAK,EACL,GAAI,EACJ,yBAA0B,CACxB,SAAU,IACV,KAAM,WACR,EAIF,UAAAP,OAACQ,EAAA,CAAY,KAAK,QAChB,UAAAN,MAACO,EAAA,CAAY,WAAE,qBAAqB,EAAE,EACtCT,OAACU,EAAA,CACC,MAAOnC,EACP,SAAWoC,GAAMnC,EAAgBmC,EAAE,OAAO,KAA2B,EACrE,MAAO,EAAE,qBAAqB,EAE9B,UAAAT,MAACU,EAAA,CAAS,MAAM,QAAS,WAAE,oBAAoB,EAAE,QAChDA,EAAA,CAAS,MAAM,SAAU,WAAE,qBAAqB,EAAE,IACrD,EACF,EAGCrC,IAAiB,SAChByB,OAACQ,EAAA,CAAY,KAAK,QAChB,UAAAN,MAACO,EAAA,CAAY,WAAE,oBAAoB,EAAE,EACrCT,OAACU,EAAA,CACC,MAAOjC,EACP,SAAWkC,GAAM,CACfjC,EAAeiC,EAAE,OAAO,KAAqC,EAE7D/B,EAAe,EAAE,CACnB,EACA,MAAO,EAAE,oBAAoB,EAE7B,UAAAsB,MAACU,EAAA,CAAS,MAAM,MAAO,WAAE,iBAAiB,EAAE,QAC3CA,EAAA,CAAS,MAAM,UAAW,WAAE,qBAAqB,EAAE,QACnDA,EAAA,CAAS,MAAM,SAAU,WAAE,oBAAoB,EAAE,IACpD,EACF,EAIFZ,OAACQ,EAAA,CAAY,KAAK,QAChB,UAAAN,MAACO,EAAA,CAAY,WAAE,uBAAuB,EAAE,EACxCT,OAACU,EAAA,CACC,MAAOvF,EACP,SAAWwF,GAAM5B,EAAiB4B,EAAE,OAAO,KAAwC,EACnF,MAAO,EAAE,uBAAuB,EAEhC,UAAAT,MAACU,EAAA,CAAS,MAAM,OAAQ,WAAE,qBAAqB,EAAE,QAChDA,EAAA,CAAS,MAAM,YAAa,WAAE,0BAA0B,EAAE,QAC1DA,EAAA,CAAS,MAAM,SAAU,WAAE,uBAAuB,EAAE,IACvD,EACF,KAIDrC,IAAiB,SAAWE,IAAgB,UAC3CyB,MAACK,GAAI,GAAI,CAAE,GAAI,GACb,SAAAP,OAACQ,EAAA,CAAY,KAAK,QAAQ,UAAS,GACjC,UAAAN,MAACO,EAAA,CAAY,WAAE,oBAAoB,EAAE,EACrCP,MAACQ,EAAA,CACC,MAAO/B,EACP,SAAWgC,GAAM/B,EAAe+B,EAAE,OAAO,KAAK,EAC9C,MAAO,EAAE,oBAAoB,EAE5B,SAAA9B,EAAgB,IAAKvF,UACnBsH,EAAA,CAA0B,MAAOtH,EAAM,KACrC,UAAAA,EAAM,MAAM,KAAGA,EAAM,UAAU,YADnBA,EAAM,IAErB,CACD,GACH,EACF,EACF,SAGDiH,EAAA,CAAI,UAAU,OAAO,OAAO,OAAO,IAAK1C,EACvC,UAAAqC,MAACW,GAAA,CACC,GAAG,aACH,KAAK,aACL,UAAS,GACT,SAAQ,GACR,UAAS,GACT,KAAM,EACN,GAAI,CAAE,GAAI,GACV,MAAO3C,EACP,SAAW4C,GAAU3C,EAAc2C,EAAM,OAAO,KAAK,EACrD,YAEM,EADJvC,IAAiB,QACX,0BACA,0BADyB,EAGjC,WAAY,CACV,aAAc2B,MAACa,GAAA,CAAgB,KAAM7C,CAAA,CAAY,EACjD,GAAI,CAAE,WAAY,aAAa,CACjC,GAIDG,GACC2B,OAACgB,GAAA,CACC,SAAU3C,EAAa,QAAU,UAAY,QAC7C,GAAI,CAAE,GAAI,GACV,QAAS,IAAMC,EAAgB,IAAI,EAEnC,UAAA4B,MAACE,EAAA,CAAW,QAAQ,QAClB,SAAAF,MAAC,UACC,eAACG,EAAA,CAAM,QAAQ,sBAAsB,EACvC,EACF,EACChC,EAAa,eAAiB,GAC7B2B,OAACI,EAAA,CAAW,QAAQ,QAAQ,cACxB,IACFF,MAACG,EAAA,CACC,QAAQ,+BACR,OAAQ,CAAE,MAAOhC,EAAa,eAAe,EAC/C,EACF,EAEDA,EAAa,cAAgB,GAC5B2B,OAACI,EAAA,CAAW,QAAQ,QAAQ,cACxB,IACFF,MAACG,EAAA,CACC,QAAQ,8BACR,OAAQ,CAAE,MAAOhC,EAAa,cAAc,EAC9C,EACF,EAEDA,EAAa,SAAS,OAAS,GAC9B2B,OAACO,GAAI,GAAI,CAAE,GAAI,GACb,UAAAL,MAACE,EAAA,CAAW,QAAQ,QAAQ,MAAM,eAChC,SAAAF,MAAC,UACC,SAAAA,MAACG,EAAA,CAAM,QAAQ,yBAAyB,EAC1C,EACF,EACChC,EAAa,SAAS,IAAI,CAAC4C,EAASpI,IACnCmH,OAACI,EAAA,CAAuB,QAAQ,QAAQ,MAAM,eAAe,eACxDa,CAAA,GADYpI,CAEjB,CACD,GACH,EAEDwF,EAAa,OAAO,OAAS,GAC5B2B,OAACO,GAAI,GAAI,CAAE,GAAI,GACb,UAAAL,MAACE,EAAA,CAAW,QAAQ,QAAQ,MAAM,aAChC,SAAAF,MAAC,UACC,SAAAA,MAACG,EAAA,CAAM,QAAQ,uBAAuB,EACxC,EACF,EACChC,EAAa,OAAO,IAAI,CAACxD,EAAOhC,IAC/BmH,OAACI,EAAA,CAAuB,QAAQ,QAAQ,MAAM,aAAa,eACtDvF,CAAA,GADYhC,CAEjB,CACD,GACH,WAKLqI,EAAA,CAAO,UAAS,GAAC,QAAQ,YAAY,KAAK,SAAS,QAAS,IAAM3B,EAAY1B,CAAQ,EACrF,eAACwC,EAAA,CAAM,QAAQ,SAAS,EAC1B,GACF,EAGC9B,IAAiB,SAChByB,OAACC,GAAA,CAAU,GAAI,CAAE,GAAI,GAAK,UAAU,kBAClC,UAAAC,MAACC,GAAA,CACC,SAAAD,MAACE,EAAA,CAAW,QAAQ,YAAY,UAAU,kBACxC,SAAAF,MAACG,EAAA,CAAM,QAAQ,oBAAoB,EACrC,EACF,SACCC,GAAA,CACC,UAAAJ,MAACE,EAAA,CAAW,QAAQ,QAAQ,GAAI,CAAE,GAAI,GACpC,SAAAF,MAACG,EAAA,CAAM,QAAQ,0BAA0B,EAC3C,EAEAH,MAACE,EAAA,CAAW,QAAQ,QAAQ,GAAI,CAAE,GAAI,EAAG,WAAY,QACnD,SAAAF,MAACG,EAAA,CAAM,QAAQ,0BAA0B,EAC3C,EACAH,MAACE,EAAA,CAAW,QAAQ,QAAQ,UAAU,MAAM,GAAI,CAAE,GAAI,EAAG,GAAI,GAC3D,SAAAF,MAACG,EAAA,CACC,QAAQ,iCACR,WAAY,CACV,cAAU,WAAO,EACjB,cAAU,WAAO,EACjB,SAAK,OAAG,EACV,GAEJ,EAEAH,MAACE,EAAA,CAAW,QAAQ,QAAQ,GAAI,CAAE,GAAI,EAAG,WAAY,QACnD,SAAAF,MAACG,EAAA,CAAM,QAAQ,4BAA4B,EAC7C,EACAH,MAACE,EAAA,CAAW,QAAQ,QAAQ,UAAU,MAAM,GAAI,CAAE,GAAI,EAAG,GAAI,GAC3D,SAAAF,MAACG,EAAA,CACC,QAAQ,mCACR,WAAY,CACV,SAAK,OAAG,EACV,GAEJ,EAEAH,MAACE,EAAA,CAAW,QAAQ,QAAQ,GAAI,CAAE,GAAI,EAAG,WAAY,QACnD,SAAAF,MAACG,EAAA,CAAM,QAAQ,gCAAgC,EACjD,EACAH,MAACE,EAAA,CAAW,QAAQ,QAAQ,UAAU,MAAM,GAAI,CAAE,GAAI,GACpD,SAAAF,MAACG,EAAA,CACC,QAAQ,uCACR,WAAY,CACV,SAAK,OAAG,EACR,YAAQ,SAAK,EACb,YAAQ,SAAK,EACf,EACF,CACF,GACF,GACF,GAEJ,IAGN,CCtbA,SAAwBc,GAAoB,CAC1C,MAAAvG,EACA,SAAAwG,EACA,OAAAjI,EACA,SAAAiG,EACA,eAAAiC,EAAiB,GACjB,SAAAC,EAAW,GACX,eAAAC,EAAiB,CACnB,EAA6B,CAC3B,KAAM,CAAE,GAAMxD,GAAA,EACR,CAAChE,EAAQyH,CAAS,EAAIpD,WAA4B,EAAE,EACpD,CAACqD,EAASC,CAAU,EAAItD,WAAS,EAAI,EA6B3C,OA1BA2B,YAAU,IAAM,EACK,SAAY,CAC7B2B,EAAW,EAAI,EACf,GAAI,CAIF,MAAM7C,EAAkB,MAAM8C,GAAsBxI,EAAQiG,CAAQ,EAG9DwC,EAAiBP,EACnBxC,EACAA,EAAgB,OAAQvF,GAAU,CAACA,EAAM,SAAS,EAEtDkI,EAAUI,CAAc,CAC1B,OAAS/G,EAAO,CACd,QAAQ,MAAM,+BAAgCA,CAAK,EACnD2G,EAAU,EAAE,CACd,SACEE,EAAW,EAAK,CAClB,CACF,GAEA,CACF,EAAG,CAACvI,EAAQiG,EAAUiC,EAAgBE,CAAc,CAAC,EAEjDE,EAEAzB,OAACQ,EAAA,CAAY,UAAS,GAAC,SAAQ,GAC7B,UAAAN,MAACO,EAAA,CAAY,WAAE,4BAA4B,EAAE,QAC5CC,EAAA,CAAO,MAAM,GACZ,SAAAR,MAACU,EAAA,CAAS,MAAM,GACd,SAAAZ,OAACO,EAAA,CAAI,GAAI,CAAE,QAAS,OAAQ,WAAY,SAAU,IAAK,GACrD,UAAAL,MAAC2B,GAAA,CAAiB,KAAM,GAAI,EAC5B3B,MAAC,QAAM,WAAE,4BAA4B,EAAE,GACzC,EACF,EACF,GACF,QAKDK,EAAA,CACC,SAAAP,OAACQ,EAAA,CAAY,UAAS,GAAC,SAAAc,EACrB,UAAApB,MAACO,EAAA,CAAW,GAAG,cAAe,WAAE,OAAO,EAAE,EACzCP,MAACQ,EAAA,CACC,QAAQ,cACR,MAAA9F,EACA,SAAW+F,GAAMS,EAAST,EAAE,OAAO,KAAK,EACxC,MAAO,EAAE,OAAO,EAEf,WAAO,SAAW,QAChBC,EAAA,CAAS,MAAM,GAAG,SAAQ,GACzB,SAAAV,MAACE,EAAA,CAAW,MAAM,iBACf,WAAE,iCAAkC,CAAE,OAAAjH,EAAQ,SAAAiG,EAAU,EAC3D,EACF,EAEArF,EAAO,IAAKT,GACV4G,MAACU,EAAA,CAAwB,MAAOtH,EAAM,KACpC,gBAACiH,EAAA,CAAI,GAAI,CAAE,QAAS,OAAQ,WAAY,SAAU,IAAK,GACrD,UAAAL,MAAC,QAAM,WAAM,MAAM,EAClB5G,EAAM,WAAa4G,MAAC4B,GAAA,CAAK,MAAO,EAAE,SAAS,EAAG,KAAK,QAAQ,QAAQ,WAAW,GACjF,GAJaxI,EAAM,EAKrB,CACD,GAEL,EACF,EACF,CAEJ,CCvFA,SAAwByI,GAAkB,CACxC,UAAArH,EACA,MAAAE,EACA,SAAAwG,EACA,OAAAjI,EACA,SAAAiG,EACA,SAAAkC,EAAW,EACb,EAA2B,CACzB,KAAM,CAAE,EAAAU,CAAA,EAAMjE,GAAA,EACR,CAACvC,EAAayG,CAAc,EAAI7D,WAAiC,EAAE,EACnE,CAACqD,EAASC,CAAU,EAAItD,WAAS,EAAK,EAG5C2B,YAAU,IAAM,EACU,SAAY,CAClC,GAAI,CAACrF,EAAW,CACduH,EAAe,EAAE,EACjB,MACF,CAEAP,EAAW,EAAI,EACf,GAAI,CACF,MAAMQ,EAAmB,MAAMC,GAAoBzH,EAAWvB,EAAQiG,CAAQ,EAC9E6C,EAAeC,CAAgB,CACjC,OAASrH,EAAO,CACd,QAAQ,MAAM,mCAAoCA,CAAK,EACvDoH,EAAe,EAAE,CACnB,SACEP,EAAW,EAAK,CAClB,CACF,GAEA,CACF,EAAG,CAAChH,EAAWvB,EAAQiG,CAAQ,CAAC,EAGhC,MAAMgD,EAAoBC,UAAQ,IACzB7G,EAAY,KAAK,CAACvB,EAAGC,IAAMD,EAAE,MAAQC,EAAE,KAAK,EAClD,CAACsB,CAAW,CAAC,EAYhB,OATAuE,YAAU,IAAM,CACd,GAAIvE,EAAY,OAAS,GAAKZ,GAAS,CAACY,EAAY,KAAMpB,GAAMA,EAAE,QAAUQ,CAAK,EAAG,CAClF,MAAM0H,EAAiBF,EAAkB,CAAC,EACtCE,GACFlB,EAASkB,EAAe,KAAK,CAEjC,CACF,EAAG,CAAC9G,EAAaZ,EAAOwG,EAAUgB,CAAiB,CAAC,EAE/C1H,EAaD+G,EAEAzB,OAACQ,EAAA,CAAY,UAAS,GAAC,SAAQ,GAC7B,UAAAN,MAACO,EAAA,CAAY,SAAAuB,EAAE,iCAAiC,EAAE,QACjDtB,EAAA,CAAO,MAAM,GACZ,SAAAR,MAACU,EAAA,CAAS,MAAM,GACd,SAAAZ,OAACO,EAAA,CAAI,GAAI,CAAE,QAAS,OAAQ,WAAY,SAAU,IAAK,GACrD,UAAAL,MAAC2B,GAAA,CAAiB,KAAM,GAAI,EAC5B3B,MAAC,QAAM,SAAA8B,EAAE,iCAAiC,EAAE,GAC9C,EACF,EACF,GACF,EAIAxG,EAAY,SAAW,EAEvBwE,OAACQ,EAAA,CAAY,UAAS,GAAC,SAAQ,GAC7B,UAAAN,MAACO,EAAA,CAAY,SAAAuB,EAAE,WAAW,EAAE,EAC5B9B,MAACQ,GAAO,MAAM,GACZ,eAACE,EAAA,CAAS,MAAM,GAAG,SAAQ,GACzB,eAACR,EAAA,CAAW,MAAM,iBACf,SAAA4B,EAAE,sCAAuC,CAAE,UAAAtH,CAAA,CAAW,EACzD,EACF,EACF,GACF,QAKD6F,EAAA,CACC,SAAAP,OAACQ,EAAA,CAAY,UAAS,GAAC,SAAAc,EACrB,UAAApB,MAACO,EAAA,CAAY,SAAAuB,EAAE,WAAW,EAAE,EAC5B9B,MAACQ,EAAA,CACC,MAAO9F,GAAS,GAChB,SAAW+F,GAAMS,EAAS,OAAOT,EAAE,OAAO,KAAK,CAAC,EAChD,MAAOqB,EAAE,WAAW,EAEnB,SAAAI,EAAkB,IAAKxJ,GACtBsH,MAACU,EAAA,CAA4B,MAAOhI,EAAU,MAC3C,SAAAA,EAAU,OADEA,EAAU,EAEzB,CACD,GACH,EACF,EACF,EA1DEoH,OAACQ,EAAA,CAAY,UAAS,GAAC,SAAQ,GAC7B,UAAAN,MAACO,EAAA,CAAY,SAAAuB,EAAE,WAAW,EAAE,QAC3BtB,EAAA,CAAO,MAAM,GACZ,SAAAR,MAACU,EAAA,CAAS,MAAM,GAAG,SAAQ,GACzB,SAAAV,MAACE,GAAW,MAAM,iBAAkB,WAAE,+BAA+B,EAAE,EACzE,EACF,GACF,CAqDN,CCzBO,MAAMmC,GAAmD,CAC9D,CACE,KAAM,cACN,YAAa,CACX,CAAE,MAAO,wBAAyB,MAAO,EAAG,UAAW,IACvD,CAAE,MAAO,yBAA0B,MAAO,EAAG,UAAW,IACxD,CAAE,MAAO,0BAA2B,MAAO,EAAG,UAAW,IACzD,CAAE,MAAO,0BAA2B,MAAO,EAAG,UAAW,GAAK,CAChE,EAEF,CACE,KAAM,eACN,YAAa,CACX,CAAE,MAAO,2BAA4B,MAAO,EAAG,UAAW,IAC1D,CAAE,MAAO,+BAAgC,MAAO,EAAG,UAAW,IAC9D,CAAE,MAAO,2BAA4B,MAAO,EAAG,UAAW,GAAK,CACjE,EAEF,CACE,KAAM,iBACN,YAAa,CACX,CAAE,MAAO,4BAA6B,MAAO,EAAG,UAAW,IAC3D,CAAE,MAAO,wBAAyB,MAAO,EAAG,UAAW,IACvD,CAAE,MAAO,yBAA0B,MAAO,EAAG,UAAW,IACxD,CAAE,MAAO,0BAA2B,MAAO,EAAG,UAAW,IACzD,CAAE,MAAO,8BAA+B,MAAO,EAAG,UAAW,GAAK,CACpE,CAEJ,EClFMC,GAA6BhH,GAAwC,CACzE,MAAMiH,EAAwBF,GAA4B,UACvDG,GAAaA,EAAS,YAAY,SAAWlH,EAAY,QAE5D,OAAOiH,GAAyB,EAAIA,EAAwB,CAC9D,EAEA,SAAwBE,GAAkB,CACxC,KAAAC,EACA,QAAAC,EACA,eAAAC,EACA,eAAAC,EACA,aAAAC,EACA,OAAA7J,EACA,SAAAiG,CACF,EAA2B,CACzB,KAAM,CAAE,GAAMrB,GAAA,EACR,CAACkF,EAAaC,CAAc,EAAI9E,WAAS,CAAC,EAC1C,CAAC+E,EAAgBC,CAAiB,EAAIhF,WAA4B,EAAE,EACpE,CAACiF,EAAeC,CAAgB,EAAIlF,WAAS,EAAI,EACjD,CAACmF,EAAYC,CAAa,EAAIpF,WAAiC,EAAE,EACjEqF,EAAsBC,GAAA,EAGtB,CAAClL,EAAOmL,CAAQ,EAAIvF,WAAS,EAAE,EAC/B,CAACwF,EAAMC,CAAO,EAAIzF,WAAiB,EAAE,EACrC,CAAC0F,EAAuBC,CAAwB,EAAI3F,WAAS,CAAC,EAC9D,CAACpE,EAAiBgK,CAAkB,EAAI5F,WAAmB,CAC/D,EAAE,0BAA0B,EAC5B,EAAE,8BAA8B,EAChC,EAAE,0BAA0B,EAC7B,EACK,CAAC6F,EAAqBC,CAAsB,EAAI9F,WAAiC,IAAI,EAGrF,CAAC+F,EAAcC,CAAe,EAAIhG,WAAS,EAAK,EAChD,CAAC1C,EAAY2I,CAAa,EAAIjG,WAA2B,CAAE,QAAS,GAAM,OAAQ,GAAI,EACtF,CAACkG,EAAkBC,CAAmB,EAAInG,WAAS,EAAK,EACxD,CAACoG,EAAoBC,CAAqB,EAAIrG,WAI1C,IAAI,EAIRsG,EAAwBzF,cAAY,SAAY,CACpD,GAAI,CAEF,MAAM5F,GADS,MAAMsI,GAAsBxI,EAAQiG,CAAQ,GAC/B,OAAQ9F,GAAU,CAACA,EAAM,SAAS,EAC9D8J,EAAkB/J,CAAY,EAG9B,MAAMsL,EAAiC,GACvC,MAAM,QAAQ,IACZtL,EAAa,IAAI,MAAOC,GAAU,CAChCqL,EAAOrL,EAAM,EAAE,EAAI,MAAMsL,GAAkBtL,EAAM,KAAMH,EAAQiG,CAAQ,CACzE,CAAC,GAEHoE,EAAcmB,CAAM,CACtB,OAAS9J,EAAO,CACd,QAAQ,MAAM,0BAA2BA,CAAK,CAChD,CACF,EAAG,CAAC1B,EAAQiG,CAAQ,CAAC,EAGrBW,YAAU,IAAM,EACK,SAAY,CAC7B,GAAK6C,EAEL,CAAAU,EAAiB,EAAI,EACrB,GAAI,CACF,MAAMoB,EAAA,CACR,OAAS7J,EAAO,CACd,QAAQ,MAAM,wBAAyBA,CAAK,CAC9C,SACEyI,EAAiB,EAAK,CACxB,EACF,GAEA,CACF,EAAG,CAACV,EAAMzJ,EAAQiG,EAAUsF,CAAqB,CAAC,EAGlD,MAAMG,EAAqBC,GACPA,EACf,cACA,QAAQ,eAAgB,EAAE,EAC1B,QAAQ,OAAQ,GAAG,EACnB,UAAU,EAAG,EAAE,GACE,SAASC,GAAO,CAAC,EAAE,aAAa,GAItDhF,YAAU,IAAM,CACViD,GACFkB,EAAuBlB,CAAY,EACnCW,EAASX,EAAa,KAAK,EAC3Ba,EAAQb,EAAa,MAAQ,EAAE,EAC/BgB,EAAmBhB,EAAa,YAAY,IAAK5I,GAAMA,EAAE,KAAK,CAAC,EAE/D2J,EAAyBvB,GAA0BQ,EAAa,WAAW,CAAC,GACnEiB,GAETN,EAASM,EAAoB,KAAK,EAClCJ,EAAQI,EAAoB,MAAQ,EAAE,EACtCD,EAAmBC,EAAoB,YAAY,IAAK7J,GAAMA,EAAE,KAAK,CAAC,EAEtE2J,EAAyBvB,GAA0ByB,EAAoB,WAAW,CAAC,IAGnFC,EAAuB,IAAI,EAC3BP,EAAS,EAAE,EACXE,EAAQ,EAAE,EACVE,EAAyB,CAAC,EAC1BC,EAAmB,CACjB,EAAE,0BAA0B,EAC5B,EAAE,8BAA8B,EAChC,EAAE,0BAA0B,EAC7B,GAEHK,EAAc,CAAE,QAAS,GAAM,OAAQ,GAAI,CAC7C,EAAG,CAACrB,EAAciB,EAAqBrB,EAAM,CAAC,CAAC,EAG/C,MAAMoC,EAAwBC,GAA0B,CACtD,MAAMvC,EAAWH,GAA4B0C,CAAa,EAC1DlB,EAAyBkB,CAAa,EACtCjB,EAAmBtB,EAAS,YAAY,IAAKtI,GAAM,EAAEA,EAAE,KAAK,CAAC,CAAC,CAChE,EAGM8K,GAAuB,CAACrM,EAAeL,IAAkB,CAC7D,MAAM2M,EAAY,CAAC,GAAGnL,CAAe,EACrCmL,EAAUtM,CAAK,EAAIL,EACnBwL,EAAmBmB,CAAS,CAC9B,EAGMC,EAAe,IAAM,CACrBpL,EAAgB,QAAUyJ,EAAoB,uBAIlDO,EAAmB,CACjB,GAAGhK,EACH,EAAE,0BAA2B,CAAE,MAAOA,EAAgB,OAAS,EAAG,EACnE,CACH,EAGMqL,GAAmBxM,GAAkB,CACzC,GAAImB,EAAgB,QAAUyJ,EAAoB,sBAChD,OAEF,MAAM0B,EAAYnL,EAAgB,OAAO,CAACsL,EAAGlL,IAAMA,IAAMvB,CAAK,EAC9DmL,EAAmBmB,CAAS,CAC9B,EAGApF,YAAU,IAAM,EACO,SAAY,CAC/B,GAAI,CAACvH,EAAM,QAAU,CAACoL,GAAQ5J,EAAgB,SAAW,EAAG,CAC1DqK,EAAc,CAAE,QAAS,GAAM,OAAQ,GAAI,EAC3C,MACF,CAGA,MAAMkB,EAAmB,GAYzB,GAVI3B,GAAQ,CAACH,EAAoB,kBAAkB,SAASG,CAAiB,GAC3E2B,EAAO,KACL,EAAE,sBAAuB,CAAE,MAAO9B,EAAoB,kBAAkB,KAAK,IAAI,EAAG,GAIpFjL,EAAM,QAAU,CAACoL,GACnB2B,EAAO,KAAK,EAAE,mBAAmB,CAAC,EAGhCA,EAAO,OAAS,EAAG,CACrBlB,EAAc,CAAE,QAAS,GAAO,OAAAkB,CAAA,CAAQ,EACxC,MACF,CAGA,MAAM/J,EAAsCxB,EAAgB,IAAI,CAACwL,GAAW3M,MAAW,CACrF,GAAIkM,GAAA,EACJ,MAAOS,GACP,MAAO3M,GAAQ,EACf,UAAW,IACX,EAEIuC,EAA6B,CACjC,KAAM6I,EAAsBA,EAAoB,KAAOY,EAAkBrM,CAAK,EAC9E,MAAOA,EAAM,OACb,YAAAgD,EACA,KAAOoI,GAAsB,OAC7B,OAAAzK,EACA,SAAAiG,EACA,UAAW,IAGPpE,GAAS,MAAMW,GAAoBP,EAAW6I,GAAqB,EAAE,EAC3EI,EAAcrJ,EAAM,CACtB,GAEA,CACF,EAAG,CACDxC,EACAoL,EACA5J,EACAb,EACAiG,EACA6E,EACA,EACAR,EAAoB,kBACrB,EAGD,MAAMgC,EAAmBnM,GAA2B,CAClD4K,EAAuB5K,CAAK,EAC5BqK,EAASrK,EAAM,KAAK,EACpB0K,EAAmB1K,EAAM,YAAY,IAAKc,GAAMA,EAAE,KAAK,CAAC,EACxD8I,EAAe,CAAC,CAClB,EAGMwC,GAAoB,MAAOC,GAAoB,CACnD,MAAMrM,EAAQ6J,EAAe,KAAMyC,GAAMA,EAAE,KAAOD,CAAO,EACzD,GAAI,CAACrM,EAAO,OAEZ,MAAMuM,EAAYtC,EAAWoC,CAAO,GAAK,EACzClB,EAAsB,CAAE,GAAIkB,EAAS,KAAMrM,EAAM,MAAO,UAAAuM,EAAW,EACnEtB,EAAoB,EAAI,CAC1B,EAEMuB,GAAgB,SAAY,CAChC,GAAI,CAACtB,EAAoB,OAEzB,KAAM,CAAE,GAAAuB,EAAI,UAAAF,CAAA,EAAcrB,EACpBlL,EAAQ6J,EAAe,KAAMyC,GAAMA,EAAE,KAAOG,CAAE,EACpD,GAAKzM,EAEL,GAAI,CAEEuM,EAAY,GACd,MAAMG,GAAyB1M,EAAM,KAAMH,EAAQiG,CAAQ,EAI7D,MAAM6G,GAAkBF,CAAE,EAG1B,MAAMrB,EAAA,EAGN3B,IAAiB,IAAI,CACvB,OAASlI,EAAO,CACd,QAAQ,MAAM,wBAAyBA,CAAK,CAC9C,SACE0J,EAAoB,EAAK,EACzBE,EAAsB,IAAI,CAC5B,CACF,EAGMyB,GAAe,SAAY,CAC/B,GAAI,GAACxK,EAAW,SAAWyI,GAI3B,CAAAC,EAAgB,EAAI,EAEpB,GAAI,CAEF,MAAM5I,EAAsCxB,EAAgB,IAAI,CAACwL,EAAW3M,KAAW,CACrF,GAAIkM,GAAA,EACJ,MAAOS,EACP,MAAO3M,EAAQ,EACf,UAAW,IACX,EAEIuC,EAA6B,CACjC,KAAM6I,EAAsBA,EAAoB,KAAOY,EAAkBrM,CAAK,EAC9E,MAAOA,EAAM,OACb,YAAAgD,EACA,KAAOoI,GAAsB,OAC7B,OAAAzK,EACA,SAAAiG,EACA,UAAW,IAGb,GAAI6E,EAEF,MAAMrI,GAAkBqI,EAAoB,GAAI7I,CAAS,EACzD2H,IAAiBkB,CAAmB,MAC/B,CAEL,MAAM0B,EAAU,MAAM9J,GAAeT,CAAS,EAC1CuK,GACF7C,IAAiB,CACf,GAAG1H,EACH,GAAIuK,EACJ,cAAe,KACf,cAAe,KACf,UAAW,GACX,OAAAxM,EACA,SAAAiG,CAAA,CACD,CAEL,CAEA+G,GAAA,EACAtD,EAAA,CACF,OAAShI,EAAO,CACd,QAAQ,MAAM,6BAA8BA,CAAK,EACjDwJ,EAAc,CACZ,QAAS,GACT,OAAQ,CAAC,EAAE,oBAAqB,CAAE,MAAAxJ,CAAA,CAAO,CAAC,EAC3C,CACH,SACEuJ,EAAgB,EAAK,CACvB,EACF,EAGM+B,GAAoB,IAAM,CAC9BjC,EAAuB,IAAI,EAC3BP,EAAS,EAAE,EACXE,EAAQ,EAAE,EACVE,EAAyB,CAAC,EAC1BC,EAAmB,CACjB,EAAE,0BAA0B,EAC5B,EAAE,8BAA8B,EAChC,EAAE,0BAA0B,EAC7B,EACDK,EAAc,CAAE,QAAS,GAAM,OAAQ,GAAI,CAC7C,EAEA,OACErE,OAAAoG,WAAA,CACE,UAAApG,OAACqG,GAAA,CACC,KAAAzD,EACA,QAAAC,EACA,SAAS,KACT,UAAS,GACT,WAAY,CAAE,GAAI,CAAE,UAAW,QAAQ,EAEvC,UAAA7C,OAACsG,GAAA,CACE,YAAE,iCAAiC,EACpCpG,MAACE,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,GAAI,CAAE,GAAI,GAC1D,WAAE,yCAAyC,EAC9C,EAGAJ,OAACuG,GAAA,CACC,MAAOtD,EACP,SAAU,CAACqC,EAAGkB,IAAa,CACzBtD,EAAesD,CAAQ,EACnBA,IAAa,GAAK,CAACvC,GAErBkC,GAAA,CAEJ,EACA,GAAI,CAAE,GAAI,EAAG,aAAc,EAAG,YAAa,WAE3C,UAAAjG,MAACuG,GAAA,CAAI,MAAO,EAAE,6BAA6B,EAAG,EAC9CvG,MAACuG,GAAA,CACC,MACwB,EAAtBxC,EAAwB,yBAA8B,wBAAN,CAA8B,EAElF,GACF,EACF,EAEAjE,OAAC0G,GAAA,CAAc,SAAQ,GAEpB,UAAAzD,IAAgB,GACf/C,MAACK,EAAA,CACE,SAAA8C,EACCnD,MAACE,GAAY,WAAE,mBAAmB,EAAE,EAClC+C,EAAe,SAAW,QAC3B/C,EAAA,CAAW,MAAM,iBAAiB,GAAI,CAAE,UAAW,SAAU,GAAI,GAC/D,WAAE,kCAAkC,EACvC,EAEAF,MAACyG,GAAA,CACE,SAAAxD,EAAe,IAAI,CAAC7J,EAAOT,IAC1BmH,OAAC4G,GAAM,SAAN,CACC,UAAA5G,OAAC6G,GAAA,CACC,UAAA3G,MAAC4G,GAAA,CACC,QAASxN,EAAM,MACf,iBACGiH,EAAA,CAAI,UAAU,OAAO,GAAI,CAAE,QAAS,SACnC,UAAAP,OAACI,EAAA,CACC,QAAQ,QACR,MAAM,iBACN,UAAU,OACV,GAAI,CAAE,QAAS,SAEd,YAAE,oCAAqC,CACtC,MAAO9G,EAAM,YAAY,OAC1B,EAAE,KACAA,EAAM,YAAY,IAAKc,GAAMA,EAAE,KAAK,EAAE,KAAK,IAAI,KAEpD8F,MAACE,EAAA,CACC,QAAQ,QACR,MAAM,iBACN,UAAU,OACV,GAAI,CAAE,QAAS,QAAS,GAAI,IAE3B,WAAE,gCAAiC,CAClC,MAAOmD,EAAWjK,EAAM,EAAE,GAAK,EAChC,GACH,EACF,WAGHyN,GAAA,CACC,UAAA7G,MAAC8G,GAAA,CACC,KAAK,MACL,aAAW,OACX,QAAS,IAAMvB,EAAgBnM,CAAK,EACpC,GAAI,CAAE,GAAI,GAEV,eAAC2N,GAAA,EAAS,IAEZ/G,MAAC8G,GAAA,CACC,KAAK,MACL,aAAW,SACX,QAAS,IAAMtB,GAAkBpM,EAAM,EAAE,EACzC,MAAM,QAEN,eAAC4N,GAAA,EAAW,GACd,EACF,GACF,EACCrO,EAAQsK,EAAe,OAAS,SAAMgE,GAAA,EAAQ,IAjD5B7N,EAAM,EAkD3B,CACD,EACH,EAEJ,EAID2J,IAAgB,GACfjD,OAACO,EAAA,CAAI,GAAI,CAAE,QAAS,OAAQ,cAAe,SAAU,IAAK,GAEvD,WAAC7E,EAAW,SACXwE,MAACc,GAAA,CAAM,SAAS,QACb,SAAAtF,EAAW,OAAO,IAAI,CAACb,EAAOhC,IAC7BqH,MAAC,OAAiB,SAAArF,CAAA,EAARhC,CAAc,CACzB,EACH,EAIFmH,OAACO,EAAA,CACC,GAAI,CACF,EAAG,EACH,QAAS,mBACT,aAAc,EACd,OAAQ,YACR,YAAa,WAGf,UAAAL,MAACE,EAAA,CAAW,QAAQ,KAAK,GAAI,CAAE,GAAI,GAChC,WAAE,+BAA+B,EACpC,EAEAF,MAACW,GAAA,CACC,MAAO,EAAE,yBAAyB,EAClC,MAAOrI,EACP,SAAWmI,GAAMgD,EAAShD,EAAE,OAAO,KAAK,EACxC,YAAY,wBACZ,WAAY,EAAE,8BAA+B,CAC3C,UAAW8C,EAAoB,uBAChC,EACD,UAAS,GACT,SAAQ,GACR,MAAOjL,EAAM,OAAO,OAAS,GAAK,CAAC4O,GAAmB5O,CAAK,EAAE,QAC7D,GAAI,CAAE,GAAI,EAAE,GAGdwH,OAACa,GAAA,CACC,OAAM,GACN,MAAO,EAAE,wBAAwB,EACjC,MAAO+C,EACP,SAAWjD,GAAMkD,EAAQlD,EAAE,OAAO,KAAK,EACvC,WAAY,EAAE,4BAA4B,EAC1C,UAAS,GACT,SAAQ,GACR,MAAOnI,EAAM,OAAO,OAAS,GAAK,CAACoL,EACnC,GAAI,CAAE,GAAI,GAEV,UAAA1D,MAACU,EAAA,CAAS,MAAM,GACd,SAAAV,MAAC,MAAI,WAAE,uBAAuB,EAAE,EAClC,QACCU,EAAA,CAAS,MAAM,OAAQ,WAAE,iBAAiB,EAAE,QAC5CA,EAAA,CAAS,MAAM,WAAY,WAAE,qBAAqB,EAAE,QACpDA,EAAA,CAAS,MAAM,MAAO,WAAE,gBAAgB,EAAE,QAC1CA,EAAA,CAAS,MAAM,cAAe,WAAE,wBAAwB,EAAE,KAG7DZ,OAACO,EAAA,CAAI,GAAI,CAAE,QAAS,OAAQ,cAAe,SAAU,IAAK,IACxD,UAAAP,OAACI,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAChC,UAAAF,MAAC,UAAQ,WAAE,qBAAqB,EAAE,EAAS,IAAE/G,EAAO,KAAG,IACvD+G,MAAC,UAAQ,WAAE,uBAAuB,EAAE,EAAS,IAAEd,CAAA,EACjD,EACC6E,EACCjE,OAACI,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAChC,UAAAF,MAAC,UAAQ,WAAE,yBAAyB,EAAE,EAAS,IAAE+D,EAAoB,KAAM,IAAI,YAEjF,EAEAjE,OAACI,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAChC,UAAAF,MAAC,UAAQ,WAAE,yBAAyB,EAAE,EAAU,IAC/C1H,EAAQqM,EAAkBrM,CAAK,EAAI,EAAE,4BAA4B,GACpE,GAEJ,KAIFwH,OAACO,EAAA,CACC,GAAI,CACF,QAAS,OACT,WAAY,SACZ,IAAK,EACL,EAAG,EACH,QAAS,eACT,aAAc,GAGhB,UAAAL,MAACE,EAAA,CAAW,QAAQ,QAAQ,GAAI,CAAE,WAAY,SAAU,SAAU,QAC/D,WAAE,yBAAyB,EAC9B,EACAF,MAACW,GAAA,CACC,OAAM,GACN,MAAOiD,EACP,SAAWnD,GAAMqE,EAAqB,OAAOrE,EAAE,OAAO,KAAK,CAAC,EAC5D,KAAK,QACL,GAAI,CAAE,SAAU,KAChB,MAAO,EAAE,6BAA6B,EAErC,SAAA4B,GAA4B,IAAI,CAACG,EAAU7J,IAC1CqH,MAACU,EAAA,CAAqB,MAAO/H,EAC1B,SAAA6J,EAAS,OAAS,cACf,EAAE,eAAe,EACjBA,EAAS,OAAS,eAChB,EAAE,gBAAgB,EAClBA,EAAS,OAAS,iBAChB,EAAE,kBAAkB,EACpBA,EAAS,MAPJ7J,CAQf,CACD,IAEHqH,MAACE,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,GAAI,CAAE,SAAU,WAChE,WAAE,wCAAwC,EAC7C,YAIDG,EAAA,CACC,UAAAP,OAACI,GAAW,QAAQ,KAAK,GAAI,CAAE,GAAI,GAChC,YAAE,8BAA8B,EAAE,KAAGpG,EAAgB,OAAO,IAC5DyJ,EAAoB,sBAAsB,KAC7C,EAEAvD,MAACE,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,GAAI,CAAE,GAAI,GAC1D,WAAE,4CAA4C,EACjD,EAEAJ,OAACO,EAAA,CAAI,GAAI,CAAE,QAAS,OAAQ,cAAe,SAAU,IAAK,KACvD,UAAAvG,EAAgB,IAAI,CAACwL,EAAW3M,WAC9B0H,EAAA,CAAgB,GAAI,CAAE,QAAS,OAAQ,WAAY,SAAU,IAAK,GACjE,UAAAL,MAACE,EAAA,CACC,QAAQ,QACR,GAAI,CAAE,SAAU,OAAQ,WAAY,OAAQ,MAAO,gBAElD,SAAAvH,EAAQ,IAEXqH,MAACW,GAAA,CACC,MAAO,EAAE,+BAAgC,CAAE,MAAOhI,EAAQ,EAAG,EAC7D,MAAO2M,EACP,SAAW7E,GAAMuE,GAAqBrM,EAAO8H,EAAE,OAAO,KAAK,EAC3D,KAAK,QACL,GAAI,CAAE,KAAM,GACZ,WAAY,CAAE,UAAW8C,EAAoB,2BAA2B,GAE1EvD,MAAC8G,GAAA,CACC,QAAS,IAAM3B,GAAgBxM,CAAK,EACpC,SACEmB,EAAgB,QAAUyJ,EAAoB,sBAEhD,MAAM,QACN,KAAK,QAEL,eAACyD,GAAA,EAAW,GACd,GAxBQrO,CAyBV,CACD,EAEDqH,MAACgB,EAAA,CACC,gBAAYmG,GAAA,EAAQ,EACpB,QAASjC,EACT,SAAUpL,EAAgB,QAAUyJ,EAAoB,sBACxD,QAAQ,WACR,KAAK,QACL,GAAI,CAAE,UAAW,aAAc,GAAI,GAElC,WAAE,gCAAgC,GACrC,EACF,GACF,GACF,GAEJ,SAEC6D,GAAA,CACC,UAAApH,MAACgB,GAAO,QAAS2B,EAAS,SAAUsB,EACjC,WAAE,QAAQ,EACb,EACAjE,MAACgB,EAAA,CACC,QAASgF,GACT,QAAQ,YACR,SAAU,CAACxK,EAAW,SAAWyI,EAEhC,SACG,EADHA,EACK,sBACFF,EACI,2BACA,0BAHmB,CAGO,EACpC,EACF,KAIFjE,OAACqG,IAAO,KAAM/B,EAAkB,QAAS,IAAMC,EAAoB,EAAK,EACtE,UAAArE,MAACoG,GAAA,CAAa,WAAE,4BAA4B,EAAE,EAC9CpG,MAACwG,IACC,SAAAxG,MAACE,EAAA,CACG,aAAoB,WAAa,GAAK,EACpC,EAAE,oCAAqC,CACrC,KAAMoE,GAAoB,KAC1B,MAAOA,GAAoB,UAC5B,EACD,EAAE,kCAAmC,CAAE,KAAMA,GAAoB,KAAM,EAC7E,EACF,SACC8C,GAAA,CACC,UAAApH,MAACgB,EAAA,CAAO,QAAS,IAAMqD,EAAoB,EAAK,EAAI,WAAE,QAAQ,EAAE,EAChErE,MAACgB,EAAA,CAAO,QAAS4E,GAAe,MAAM,QAAQ,QAAQ,YACnD,WAAE,QAAQ,EACb,GACF,GACF,GACF,CAEJ,CCnrBA,SAAwByB,GAAc,CACpC,iBAAA5J,EACA,aAAA6J,EACA,YAAAjN,EACA,aAAckN,EACd,SAAAhK,EACA,aAAAC,EACA,QAAAgK,EACA,aAAAC,EACA,gBAAAC,CACF,EAAuB,CACrB,KAAM,CAAE,EAAA5F,CAAA,EAAMjE,GAAA,EACR,CAAE,SAAAC,CAAA,EAAaC,GAAA,EAEf,CAACJ,EAAUgK,CAAW,EAAIzJ,WAAwB,CACtD,SAAUJ,EAAS,UAAY,SAC/B,MAAO,GACP,UAAW,GACX,OAAQ,GACR,KAAM,CAACgE,EAAE,QAAQ,CAAC,EACnB,EAGK,CAAC8F,EAAiBC,CAAkB,EAAI3J,WAAS,EAAK,EACtD,CAAC4J,EAAmBC,CAAoB,EAAI7J,WAAS,EAAE,EACvD,CAAC8J,EAAsBC,CAAuB,EAAI/J,WAAS,CAAC,EAKlE2B,YAAU,IAAM,CAmCd,MAAMqI,EAAY,WAlCG,SAAY,CAC/B,GAAI,CAACvK,EAAS,OAAS,CAACA,EAAS,WAAa,CAACA,EAAS,OAAQ,CAC9DoK,EAAqB,EAAE,EACvB,MACF,CAEA,GAAI,CACF,MAAMvM,EAAa,MAAM2M,GACvB,CACE,MAAOxK,EAAS,MAChB,UAAW,OAAOA,EAAS,SAAS,EACpC,OAAQA,EAAS,OACjB,KAAMA,EAAS,KACf,SAAUA,EAAS,SACnB,SAAU,GAEZG,EAAS,QAAU,KACnBH,EAAS,UAGNnC,EAAW,QAGduM,EAAqB,EAAE,EAFvBA,EAAqBvM,EAAW,OAAO,KAAK,IAAI,CAAC,CAIrD,OAASb,EAAO,CACd,QAAQ,MAAM,yBAA0BA,CAAK,EAC7CoN,EAAqB,EAAE,CACzB,CACF,EAK2C,GAAG,EAC9C,MAAO,IAAM,aAAaG,CAAS,CACrC,EAAG,CACDvK,EAAS,MACTA,EAAS,UACTA,EAAS,OACTA,EAAS,SACTA,EAAS,KACTG,EAAS,OACV,EAGD+B,YAAU,IAAM,CAEd,MAAMuI,GADa,MAAM,QAAQ/N,CAAW,EAAIA,EAAc,IAClC,KAAK,CAAC,CAAE,GAAAwL,CAAA,IAASA,IAAO4B,CAAY,EAEhE,GAAIW,EAAU,CAEZ,MAAMC,EAAeD,EAAS,UAAYtK,EAAS,SAEnD6J,EAAY,CACV,SAAUU,EACV,MAAOD,EAAS,OAAS,GACzB,UAAWA,EAAS,WAAa,GACjC,OAAQA,EAAS,QAAU,GAC3B,KAAMA,EAAS,MAAQ,CAACtG,EAAE,QAAQ,CAAC,EACpC,CACH,MAEE6F,EAAaW,IAAU,CACrB,GAAGA,EACH,SAAUxK,EAAS,UACnB,CAEN,EAAG,CAAC2J,EAAc3J,EAAS,SAAUzD,EAAayH,CAAC,CAAC,EAEpD,SAASyG,EACPnP,EACAV,EACA8P,EACwB,CAExB,OADmB,MAAM,QAAQnO,CAAW,EAAIA,EAAc,IAC5C,KACfV,GAASA,EAAK,QAAUP,GAASO,EAAK,YAAcjB,GAAaiB,EAAK,SAAW6O,CAAA,CAEtF,CAEA,SAASC,GAAc,CACrBf,EAAgB,IAAI,EACpBC,EAAY,CACV,SAAU7J,EAAS,SACnB,MAAO,GACP,UAAW,GACX,OAAQ,GACR,KAAM,CAACgE,EAAE,QAAQ,CAAC,EACnB,EACDiG,EAAqB,EAAE,CACzB,CAGA,MAAMW,EAAsBtP,GAA2B,CACrDuO,EAAaW,IAAU,CACrB,GAAGA,EACH,MAAOlP,EAAM,KACb,UAAW,IACX,EACFyO,EAAmB,EAAK,EAExBI,EAAyBK,GAASA,EAAO,CAAC,CAC5C,EAGMK,EAAqB,IAAM,CAE/BV,EAAyBK,GAASA,EAAO,CAAC,CAC5C,EAGMM,EAAwB7J,cAAarG,GAAsB,CAC/DiP,EAAaW,IAAU,CACrB,GAAGA,EACH,UAAW5P,EAAU,UAAS,EAC9B,CACJ,EAAG,EAAE,EAEL,eAAemQ,GAA+B,CAE5C,MAAMC,EAAW,SAAS,cAAc,oBAAoB,EACtDC,EAAc,CAAC,GAAGpL,EAAS,IAAI,EAEjCmL,GAAYA,EAAS,MAAM,SAC7BC,EAAY,KAAKD,EAAS,MAAM,MAAM,EAEtCA,EAAS,MAAQ,IAGnB,KAAM,CAAE,SAAA5J,EAAU,MAAA9F,EAAO,UAAAV,EAAW,OAAAqD,GAAW4B,EAE/C,GAAI,CAACuB,GAAY,CAAC9F,GAAS,CAACV,GAAa,CAACqD,EACxC,OAAO0B,EAAiB,CACtB,QAASqE,EAAE,oBAAqB,yBAAyB,EACzD,KAAM,QACP,EAIH,GAAIgG,EACF,OAAOrK,EAAiB,CACtB,QAASqK,EACT,KAAM,QACP,EAGH,GAAIL,GAAgB,MAAQc,EAAWnP,EAAOV,EAAWqD,CAAM,EAC7D,OAAO0B,EAAiB,CAAE,QAASqE,EAAE,cAAc,EAAG,KAAM,QAAS,EAGvE,MAAMkH,EAAmB,CACvB,MAAA5P,EACA,UAAW,OAAOV,CAAS,EAC3B,OAAAqD,EACA,KAAMgN,EACN,SAAA7J,EACA,SAAU,GAGZ,GAAI,CAEF,MAAM1D,EAAa,MAAM2M,GACvBa,EACAlL,EAAS,QAAU,KACnBoB,CAAA,EAGF,GAAI,CAAC1D,EAAW,QACd,OAAOiC,EAAiB,CACtB,QAASjC,EAAW,OAAO,KAAK,IAAI,EACpC,KAAM,QACP,EAIH,GAAIiM,IAAiB,KAAM,CAEzB,MAAMwB,EAAa,GAAG7P,CAAK,YAAYV,CAAS,GAChDgH,GAAmBuJ,EAAYlN,CAAM,EAGrC,MAAMG,GAAc8M,CAAI,CAC1B,MACE,MAAMnM,GAAiB4K,EAAcuB,CAAI,EAG3C,OAAA1B,EAAA,EAEAK,EAAaW,IAAU,CACrB,GAAGA,EACH,OAAQ,GACR,KAAM,CAACxG,EAAE,QAAQ,CAAC,GAClB,EAEKrE,EAAiB,CACtB,QAAwBqE,EAAf2F,EAAiB,gBAAqB,aAAN,EACzC,KAAM,UACP,CACH,OAAS9M,EAAO,CACd,eAAQ,MAAM,4BAA6BA,CAAK,EACzC8C,EAAiB,CACtB,QAASqE,EAAE,iBAAiB,EAC5B,KAAM,QACP,CACH,CACF,CAEA,MAAMoH,EAAiBtI,GAAiD,CACtE,OAAQA,EAAM,KACZ,IAAK,IACL,IAAK,QAAS,CACZA,EAAM,iBACNA,EAAM,kBACFA,EAAM,cAAc,MAAM,OAAS,IACrC+G,EAAaW,IAAU,CACrB,GAAGA,EACH,KAAM,CAAC,GAAGA,EAAK,KAAM1H,EAAM,cAAc,KAAK,GAC9C,EAEFA,EAAM,cAAc,MAAQ,IAE9B,KACF,CACA,CAEJ,EAEMuI,EAAsBvI,GAA8C,CACpEA,EAAM,OAAO,MAAM,OAAS,IAC9B+G,EAAaW,IAAU,CACrB,GAAGA,EACH,KAAM,CAAC,GAAGA,EAAK,KAAM1H,EAAM,OAAO,KAAK,GACvC,EAEFA,EAAM,OAAO,MAAQ,IAIvB,WAAW,IAAM,CAEf,MAAMwI,EAAgB,SAAS,cAAc,yBAAyB,EAClEA,IACDA,EAA8B,MAAM,QAAU,OAEnD,EAAG,GAAG,CACR,EAEA,OACEtJ,OAAAoG,WAAA,CACE,UAAApG,OAACC,GAAA,CACC,SAAUxC,IAAa,QACvB,SAAUC,EAAa,OAAO,EAC9B,UAAU,kBAEV,UAAAwC,MAACC,IAAiB,gBAAc,gBAAgB,GAAG,eACjD,eAACC,EAAA,CAAW,UAAU,kBACpB,SAAAF,MAACG,GAAM,QAASsH,EAAe,WAAa,QAAS,EACvD,EACF,EACAzH,MAACI,IACC,SAAAN,OAACO,EAAA,CAAI,UAAU,OAAO,OAAO,OAAO,UAAU,eAE5C,UAAAP,OAACa,GAAA,CACC,OAAM,GACN,MAAOmB,EAAE,sBAAsB,EAC/B,MAAOnE,EAAS,SAChB,SAAW8C,GAAM,CACfkH,EAAaW,IAAU,CACrB,GAAGA,EACH,SAAU7H,EAAE,OAAO,MACnB,MAAO,GACP,UAAW,IACX,CACJ,EACA,UAAS,GACT,GAAI,CAAE,GAAI,GAEV,UAAAT,MAAC,UAAO,MAAM,SAAU,SAAA8B,EAAE,QAAQ,EAAE,QACnC,UAAO,MAAM,QAAS,SAAAA,EAAE,OAAO,EAAE,QACjC,UAAO,MAAM,OAAQ,SAAAA,EAAE,MAAM,EAAE,KAIlC9B,MAACiB,GAAA,CACC,MAAOtD,EAAS,MAChB,SAAWnD,GAAc,CACvBmN,EAAaW,IAAU,CACrB,GAAGA,EACH,MAAO9N,EACP,UAAW,IACX,CACJ,EACA,OAAQsD,EAAS,QAAU,KAC3B,SAAUH,EAAS,SACnB,eAAgBqK,CAAA,SAIjB3H,EAAA,CAAI,GAAI,CAAE,GAAI,GACb,SAAAL,MAAC6B,GAAA,CACC,UAAWlE,EAAS,MACpB,MAAO,OAAOA,EAAS,SAAS,GAAK,EACrC,SAAUiL,EACV,OAAQ9K,EAAS,QAAU,KAC3B,SAAUH,EAAS,WAEvB,EAGCmK,GACC9H,MAACK,EAAA,CAAI,GAAI,CAAE,GAAI,EAAG,GAAI,GACpB,eAACH,EAAA,CAAW,MAAM,QAAQ,QAAQ,QAC/B,WACH,EACF,EAGFF,MAACW,GAAA,CACC,GAAG,SACH,KAAK,SACL,SAAQ,GACR,UAAS,GACT,MAAOmB,EAAE,QAAQ,EACjB,GAAI,CAAE,GAAI,EAAG,GAAI,GACjB,MAAOnE,EAAS,OAChB,SAAWiD,GAAU,CACnB+G,EAAY,CAAE,GAAGhK,EAAU,OAAQiD,EAAM,OAAO,MAAO,CACzD,IAGFZ,MAACqJ,GAAA,CACC,GAAG,OACH,qBAAoB,GACpB,SAAQ,GACR,SAAQ,GACR,QAAS7B,EACT,MAAO7J,EAAS,KAChB,SAAU,CAAC2L,EAAQC,IAAc,CAC/B5B,EAAY,CAAE,GAAGhK,EAAU,KAAM4L,EAAuB,CAC1D,EACA,YAAcC,IACZA,EAAO,WAAW,UAAYN,EAC9BM,EAAO,WAAW,OAASL,QACnBxI,GAAA,CAAW,GAAG6I,EAAQ,MAAO1H,EAAE,MAAM,EAAG,GAElD,GAAI,CAAE,GAAI,GACV,YAAW,GACX,aAAY,GACZ,YAAW,GACX,cAAe,GACf,gBAAiB,CACf,OAAQ,CACN,UAAW,CACT,CACE,KAAM,kBACN,QAAS,CACP,QAAS,GACT,YAAa,GACb,QAAS,EACX,CACF,CACF,CACF,CACF,GAGFhC,OAACO,EAAA,CACC,QAAQ,OACR,cAAe,CAAE,GAAI,SAAU,GAAI,OACnC,eAAgB,CAAE,GAAI,UAAW,GAAI,gBACrC,IAAK,EAEL,UAAAL,MAACgB,EAAA,CAAO,QAAQ,WAAW,KAAK,SAAS,QAAS,IAAM6G,EAAmB,EAAI,EAC5E,SAAA/F,EAAE,cAAc,EACnB,EACA9B,MAACgB,EAAA,CAAO,QAAQ,YAAY,KAAK,SAAS,QAAS,IAAMyH,EAAA,EACvD,SAAAzI,MAACG,EAAA,CAAM,QAAQ,QAAQ,EACzB,EACAH,MAACgB,EAAA,CAAO,QAAQ,YAAY,KAAK,SAAS,QAAS6H,EACjD,SAAA7I,MAACG,EAAA,CAAM,QAASsH,EAAe,WAAa,QAAS,EACvD,IACF,EACF,EACF,KAIFzH,MAACyC,GAAA,CACC,KAAMmF,EACN,QAAS,IAAMC,EAAmB,EAAK,EACvC,eAAgBa,EAChB,eAAgBC,EAChB,OAAQ7K,EAAS,QAAU,KAC3B,SAAUH,EAAS,UACrB,EACF,CAEJ,CC9ZA,SAAwB8L,GAAe,CAAE,SAAAlM,EAAU,aAAAC,GAAqC,CACtF,MAAMkM,EAAWC,GAAA,EACX,CAACC,EAAeC,CAAgB,EAAI3L,WAAqC,EAAE,EAC3E,CAAC4L,EAAgBC,CAAiB,EAAI7L,WAAqC,EAAE,EAE7E8L,EAAcnE,GAAe,CACjCgE,EAAkBvB,IAAU,CAAE,GAAGA,EAAM,CAACzC,CAAE,EAAG,CAACyC,EAAKzC,CAAE,GAAI,CAC3D,EAEMoE,EAAepE,GAAe,CAClCkE,EAAmBzB,IAAU,CAAE,GAAGA,EAAM,CAACzC,CAAE,EAAG,CAACyC,EAAKzC,CAAE,GAAI,CAC5D,EAEMqE,EAAgB,CACpB,CACE,GAAI,iBACJ,WAAOC,GAAA,EAAU,EACjB,MAAO,iBACP,YAAa,mDACb,IAAK,iHACL,MAAO,WAET,CACE,GAAI,qBACJ,WAAOC,GAAA,EAAS,EAChB,MAAO,6BACP,YAAa,2CACb,IAAK,2GACL,MAAO,YACT,EAGIC,EAAgB,CACpB,CACE,GAAI,iBACJ,WAAOC,GAAA,EAAU,EACjB,MAAO,iBACP,YAAa,gDACb,KAAM,CACJ,uFACA,sEACA,0DACA,8DAEF,MAAO,WAET,CACE,GAAI,kBACJ,WAAOC,GAAA,EAAW,EAClB,MAAO,wBACP,YAAa,wCACb,KAAM,CACJ,6FACA,wEACA,oEACA,kEAEF,MAAO,aAET,CACE,GAAI,YACJ,WAAOC,GAAA,EAAQ,EACf,MAAO,cACP,YAAa,6CACb,KAAM,CACJ,6EACA,2DACA,mDACA,kEAEF,MAAO,WAET,CACE,GAAI,gBACJ,WAAOC,GAAA,EAAS,EAChB,MAAO,gBACP,YAAa,0DACb,KAAM,CACJ,gFACA,yDACA,gEACA,8DAEF,MAAO,WAET,CACE,GAAI,kBACJ,WAAOC,GAAA,EAAM,EACb,MAAO,mBACP,YAAa,2CACb,KAAM,CACJ,sEACA,gEACA,yDACA,wDAEF,MAAO,OACT,EAGF,OACE5K,OAAAoG,WAAA,CACE,UAAApG,OAACC,GAAA,CACC,SAAUxC,IAAa,QACvB,SAAUC,EAAa,OAAO,EAC9B,UAAU,kBAEV,UAAAwC,MAACC,IAAiB,gBAAc,gBAAgB,GAAG,eACjD,gBAACI,EAAA,CAAI,GAAI,CAAE,QAAS,OAAQ,WAAY,SAAU,IAAK,EAAG,MAAO,QAC/D,UAAAL,MAACmK,GAAA,CAAU,MAAM,UAAU,EAC3BnK,MAACE,GAAW,UAAU,kBACpB,eAACC,EAAA,CAAM,QAAQ,cAAc,EAC/B,GACF,EACF,QACCC,GAAA,CAAiB,GAAI,CAAE,EAAG,GACzB,SAAAJ,MAACyG,GAAA,CAAK,MAAK,GACR,SAAAyD,EAAc,IAAI,CAACS,EAAShS,WAC1B0H,EAAA,CACC,UAAAP,OAAC6G,GAAA,CACC,GAAI,CACF,OAAQ,UACR,aAAc,EACd,UAAW,CACT,QAAS,eACT,UAAW,kBACX,WAAY,wBAEd,WAAY,wBAEd,QAAS,IAAMsD,EAAYU,EAAQ,EAAE,EAErC,UAAA3K,MAAC4K,IAAa,GAAI,CAAE,SAAUlB,EAAW,GAAK,IAC5C,SAAA1J,MAACK,EAAA,CACC,GAAI,CACF,MAAO,GAAGsK,EAAQ,KAAK,QACvB,QAAS,OACT,WAAY,UAGb,SAAAA,EAAQ,OAEb,EACA3K,MAAC4G,GAAA,CACC,QACE5G,MAACE,EAAA,CACC,QAAQ,YACR,GAAI,CACF,WAAY,IACZ,SAAUwJ,EAAW,SAAW,QAGjC,SAAAiB,EAAQ,QAGb,UACE3K,MAACE,EAAA,CACC,QAAQ,QACR,GAAI,CACF,SAAUwJ,EAAW,SAAW,UAChC,MAAO,kBAGR,SAAAiB,EAAQ,aACX,SAGH7D,GAAA,CAAW,KAAK,QAAQ,GAAI,CAAE,GAAI,GAChC,SAAAgD,EAAea,EAAQ,EAAE,EAAI3K,MAAC6K,KAAW,EAAK7K,MAAC8K,KAAW,EAC7D,KAGF9K,MAAC+K,GAAA,CAAS,GAAIjB,EAAea,EAAQ,EAAE,EAAG,QAAQ,OAAO,cAAa,GACpE,SAAA3K,MAACK,EAAA,CACC,GAAI,CACF,GAAIqJ,EAAW,EAAI,EACnB,GAAI,EACJ,GAAI,EACJ,EAAG,IACH,QAAS,kBACT,aAAc,EACd,WAAY,EACZ,gBAAiB,GAAGiB,EAAQ,KAAK,SAGnC,SAAA7K,OAACI,EAAA,CACC,QAAQ,QACR,GAAI,CACF,SAAUwJ,EAAW,SAAW,UAChC,UAAW,SACX,MAAO,kBAEV,gBACKiB,EAAQ,MACd,GAEJ,EAEChS,EAAQuR,EAAc,OAAS,SAC7BjD,GAAA,CAAQ,QAAQ,QAAQ,GAAI,CAAE,GAAIyC,EAAW,EAAI,EAAE,CAAG,IAjFjDiB,EAAQ,EAmFlB,CACD,EACH,EACF,KAGF7K,OAACC,GAAA,CACC,SAAUxC,IAAa,QACvB,SAAUC,EAAa,OAAO,EAC9B,UAAU,kBAEV,UAAAwC,MAACC,IAAiB,gBAAc,gBAAgB,GAAG,eACjD,gBAACI,EAAA,CAAI,GAAI,CAAE,QAAS,OAAQ,WAAY,SAAU,IAAK,EAAG,MAAO,QAC/D,UAAAL,MAACgL,GAAA,CAAW,MAAM,UAAU,EAC5BhL,MAACE,GAAW,UAAU,kBACpB,eAACC,EAAA,CAAM,QAAQ,UAAU,EAC3B,GACF,EACF,QACCC,GAAA,CAAiB,GAAI,CAAE,EAAG,GACzB,SAAAJ,MAACyG,GAAA,CAAK,MAAK,GACR,SAAA4D,EAAc,IAAI,CAACY,EAAMtS,WACvB0H,EAAA,CACC,UAAAP,OAAC6G,GAAA,CACC,GAAI,CACF,OAAQ,UACR,aAAc,EACd,UAAW,CACT,QAAS,eACT,UAAW,kBACX,WAAY,wBAEd,WAAY,wBAEd,QAAS,IAAMqD,EAAWiB,EAAK,EAAE,EAEjC,UAAAjL,MAAC4K,IAAa,GAAI,CAAE,SAAUlB,EAAW,GAAK,IAC5C,SAAA1J,MAACK,EAAA,CACC,GAAI,CACF,MAAO,GAAG4K,EAAK,KAAK,QACpB,QAAS,OACT,WAAY,UAGb,SAAAA,EAAK,OAEV,EACAjL,MAAC4G,GAAA,CACC,QACE5G,MAACE,EAAA,CACC,QAAQ,YACR,GAAI,CACF,WAAY,IACZ,SAAUwJ,EAAW,SAAW,QAGjC,SAAAuB,EAAK,QAGV,UACEjL,MAACE,EAAA,CACC,QAAQ,QACR,GAAI,CACF,SAAUwJ,EAAW,SAAW,UAChC,MAAO,kBAGR,SAAAuB,EAAK,aACR,SAGHnE,GAAA,CAAW,KAAK,QAAQ,GAAI,CAAE,GAAI,GAChC,SAAA8C,EAAcqB,EAAK,EAAE,EAAIjL,MAAC6K,KAAW,EAAK7K,MAAC8K,KAAW,EACzD,KAGF9K,MAAC+K,GAAA,CAAS,GAAInB,EAAcqB,EAAK,EAAE,EAAG,QAAQ,OAAO,cAAa,GAChE,SAAAjL,MAACK,EAAA,CACC,GAAI,CACF,GAAIqJ,EAAW,EAAI,EACnB,GAAI,EACJ,GAAI,EACJ,EAAG,IACH,QAAS,kBACT,aAAc,EACd,WAAY,EACZ,gBAAiB,GAAGuB,EAAK,KAAK,SAG/B,SAAAA,EAAK,KAAK,IAAI,CAACC,EAAKC,IACnBnL,MAACE,EAAA,CAEC,QAAQ,QACR,GAAI,CACF,SAAUwJ,EAAW,SAAW,UAChC,UAAWyB,IAAa,EAAI,SAAW,SACvC,MAAO,iBACP,GAAIA,EAAWF,EAAK,KAAK,OAAS,EAAI,EAAI,EAC1C,WAAYE,IAAa,EAAI,CAAE,QAAS,SAAY,CAAE,QAAS,OAAO,EAGvE,SAAAD,CAAA,EAVIC,CAAA,CAYR,IAEL,EAECxS,EAAQ0R,EAAc,OAAS,SAC7BpD,GAAA,CAAQ,QAAQ,QAAQ,GAAI,CAAE,GAAIyC,EAAW,EAAI,EAAE,CAAG,IAtFjDuB,EAAK,EAwFf,CACD,EACH,EACF,IACF,EACF,CAEJ,CC/TA,SAAwBG,GAAsB,CAC5C,SAAAlM,EACA,YAAAmM,EACA,gBAAAC,EACA,OAAAzR,EACA,aAAAwC,EACA,YAAAkP,EACA,iBAAAC,EACA,cAAAC,EACA,kBAAAC,EACA,QAAAC,EAAU,GACV,GAAAC,EAAK,EACP,EAAmD,CACjD,KAAM,CAAE,EAAA9J,CAAA,EAAMjE,GAAA,EACR,CAACgO,EAAcC,CAAe,EAAI5N,WAAmB,EAAE,EACvD6N,EAAyBJ,EAAU,EAAI,MAGvCK,EAAqB7J,UAAQ,IAAM,CACvC,GAAI,CAAC9F,IAAe6C,CAAoB,QAAU,GAClD,MAAM+M,EAAS9T,GAAmBkE,EAAa6C,CAAoB,CAAC,EACpE,OAAO,MAAM,QAAQ+M,CAAM,EAAKA,EAA2B,EAC7D,EAAG,CAAC5P,EAAc6C,CAAQ,CAAC,EAGrBgN,EAAgBnN,cACnB3F,GAA0B,CAEzB,GAAImS,IAAcnS,CAAK,EACrB,OAAOmS,EAAYnS,CAAK,EAAE,OAASA,EAIrC,MAAM+S,EAAcH,EAAmB,KAAMtG,GAAMA,EAAE,QAAUtM,CAAK,EACpE,OAAI+S,GAAa,WACRA,EAAY,WAId/S,CACT,EACA,CAACmS,EAAaS,CAAkB,GAI5BI,EAAoBrN,cACxB,CAACsN,EAA0B3T,IAA8B,CAEvD,GAAI6S,IAAcc,CAAgB,EAAG,CACnC,MAAMC,EAAgBf,EAAYc,CAAgB,EAAE,YAAY,KAC7DnS,GAAMA,EAAE,QAAU,OAAOxB,CAAS,GAErC,GAAI4T,GAAe,MACjB,OAAOA,EAAc,KAEzB,CAGA,MAAMH,EAAcH,EAAmB,KACpCtG,GAAMA,EAAE,QAAU2G,GAAoB3G,EAAE,YAAc,OAAOhN,CAAS,GAEzE,OAAIyT,GAAa,oBACRA,EAAY,oBAId,SAAS,OAAOzT,CAAS,EAAI,CAAC,EACvC,EACA,CAAC6S,EAAaS,CAAkB,GAIlCnM,YAAU,IAAM,CACd,GAAIhG,EAAQ,CACV,MAAM0S,EAAa,OAAO,KAAK1S,CAAM,EACrCiS,EAAgBS,CAAU,CAC5B,CACF,EAAG,CAAC1S,EAAQqF,CAAQ,CAAC,EAErB,SAASsN,EAAwB5L,EAAkC,CACjE,MAAM6L,EAAW7L,EAAM,OAAO,MAG9B6K,EAAcgB,CAAQ,EACtBf,EAAkBK,CAAsB,CAC1C,CAEA,GAAI,CAACF,GAAc,OAAQ,OAAO,KAIlC,MAAMQ,EACJR,EAAa,SAAW,GAAKA,EAAa,SAASR,CAAW,EAAIA,EAAc,GAG5EqB,EAAuBpB,IAAoB,MAAQ,MAAQA,EAEjE,OACExL,OAACO,EAAA,CAAI,GAAI,CAAE,QAAS,OAAQ,SAAU,OAAQ,IAAK,EAAG,GAAGuL,CAAA,EACvD,UAAA9L,OAACQ,GAAY,GAAI,CAAE,MAAO,IAAK,WAAY,GACzC,UAAAN,MAACO,GAAW,GAAG,yBACb,eAACJ,EAAA,CAAM,QAAQ,uBAAuB,EACxC,EACAL,OAACU,EAAA,CACC,QAAQ,yBACR,GAAG,mBACH,MAAOtB,EACP,MAAO4C,EAAE,uBAAwB,WAAW,EAC5C,SAAWrB,GAAM,CACf+K,EAAiB/K,EAAE,OAAO,KAAK,CACjC,EACA,UAAW,CACT,MAAO,CAAE,aAAcqB,EAAE,uBAAwB,WAAW,EAAE,EAGhE,UAAA9B,MAACU,GAAS,MAAM,SACd,eAACP,EAAA,CAAM,QAAQ,SAAS,EAC1B,EACAH,MAACU,GAAS,MAAM,QACd,eAACP,EAAA,CAAM,QAAQ,QAAQ,EACzB,IACF,EACF,EAEAL,OAACQ,GAAY,GAAI,CAAE,SAAU,IAAK,KAAM,GACtC,UAAAN,MAACO,GAAW,GAAG,qBACb,eAACJ,EAAA,CAAM,QAAQ,QAAQ,EACzB,EACAH,MAACQ,EAAA,CACC,QAAQ,qBACR,GAAG,eACH,MAAO6L,EACP,MAAOvK,EAAE,OAAO,EAChB,SAAU0K,EACV,UAAW,CACT,MAAO,CAAE,aAAc1K,EAAE,OAAO,EAAE,EAGnC,WAAa,IAAK1I,GACjB0G,OAACY,EAAA,CAAqB,MAAOtH,EAC1B,UAAA8S,EAAc9S,CAAK,EACnB,CAACuS,GAAW9R,EAAOT,CAAK,GAAK,KAAKS,EAAOT,CAAK,EAAE,KAAK,MAFzCA,CAGf,CACD,GACH,EACF,EAEA0G,OAACQ,EAAA,CAAY,GAAI,CAAE,SAAU,IAAK,KAAM,GAAK,SAAU,CAAC+L,EACtD,UAAArM,MAACO,EAAA,CAAW,GAAG,yBACb,SAAAP,MAACG,GAAM,QAAQ,6BAA6B,2BAAe,EAC7D,EACAL,OAACU,EAAA,CACC,QAAQ,yBACR,GAAG,mBACH,MAAOkM,EACP,MAAO5K,EAAE,6BAA8B,iBAAiB,EACxD,SAAWrB,GAAMiL,EAAkBjL,EAAE,OAAO,KAAK,EACjD,UAAW,CACT,MAAO,CAAE,aAAcqB,EAAE,6BAA8B,iBAAiB,EAAE,EAG3E,WAAC6J,GACA3L,MAACU,EAAA,CAAmB,MAAM,MACxB,SAAAV,MAACG,EAAA,CAAM,QAAQ,MAAM,eAAG,GADZ,KAEd,EAEDkM,GACCxS,GACAA,EAAOwS,CAAgB,GACvB,OAAO,QAAQxS,EAAOwS,CAAgB,EAAE,aAAe,EAAE,EACtD,KAAK,CAAC,CAACtS,CAAC,EAAG,CAACC,CAAC,IAAM,OAAOD,CAAC,EAAI,OAAOC,CAAC,CAAC,EACxC,IAAI,CAAC,CAACtB,EAAWiU,CAAK,IACrB7M,OAACY,GAAyB,MAAO,OAAOhI,CAAS,EAC9C,UAAA0T,EAAkBC,EAAkB3T,CAAS,EAC7C,CAACiT,GAAWgB,IAAU,OAAY,KAAKA,CAAK,IAAM,KAFtCjU,CAGf,CACD,IACP,EACF,GACF,CAEJ,CCrLA,SAAwBkU,GAAgB,CACtC,QAAApF,EACA,aAAAF,EACA,aAAAjL,EACA,WAAAwQ,EACA,eAAAxL,CACF,EAAyB,CACvB,KAAM,CAAE,EAAAS,EAAG,KAAAgL,CAAA,EAASjP,GAAA,EACd,CAAE,SAAAC,CAAA,EAAaC,GAAA,EACf,CAACgP,EAAWC,CAAY,EAAI9O,WAAwB,IAAI,EACxD,CAAC+O,EAAgBC,CAAiB,EAAIhP,WAAiBJ,EAAS,UAAY,QAAQ,EACpF,CAACuN,EAAa8B,CAAc,EAAIjP,WAAiB,EAAE,EACnD,CAACoN,EAAiB8B,CAAkB,EAAIlP,WAA0B,EAAE,EACpE,CAACmP,EAAMC,CAAO,EAAIpP,WAAiB,CAAC,EACpC,CAACqD,EAASC,CAAU,EAAItD,WAAkB,EAAI,EAC9C,CAACqP,EAAOC,CAAQ,EAAItP,WAAmB,CAAE,MAAO,GAAI,MAAO,EAAG,WAAY,EAAG,EAC7E,CAACrE,EAAQyH,CAAS,EAAIpD,WAA2B,EAAE,EACnD,CAACqN,EAAakC,CAAc,EAAIvP,WAA0C,EAAE,EAE5EwP,EAAQ,GAGd7N,YAAU,IAAM,CACd,eAAe8N,GAAsB,CACnC,GAAI,CACFnM,EAAW,EAAI,EAGf,KAAM,CAACoM,EAAWvK,CAAU,EAAI,MAAM,QAAQ,IAAI,CAChD5B,GAAsBqL,EAAK,iBAAkBG,CAAc,EAC3DY,GAAqBf,EAAK,iBAAkBG,EAAgBF,CAAS,EACtE,EAGKe,EAA4C,GAClDF,EAAU,QAASxU,GAAU,CAC3B0U,EAAS1U,EAAM,IAAI,EAAIA,CACzB,CAAC,EACDqU,EAAeK,CAAQ,EAGvB,MAAM5S,GAA8B,GACpC0S,EAAU,QAASxU,GAAU,CAC3B,MAAMqL,GAASpB,EAAWjK,EAAM,IAAI,GAAK,CAAE,MAAO,EAAG,YAAa,EAAC,EACnE8B,GAAU9B,EAAM,IAAI,EAAI,CACtB,MAAOA,EAAM,OAASA,EAAM,KAC5B,MAAOqL,GAAO,MACd,YAAaA,GAAO,YAExB,CAAC,EAEDnD,EAAUpG,EAAS,EAGnB,MAAMqR,EAAaqB,EAAU,IAAKxU,GAAUA,EAAM,IAAI,EAGhD2U,GAAsBxB,EAAW,SAASlB,CAAW,EAG3D,IAAK,CAACA,GAAe,CAAC0C,KAAwBxB,EAAW,OAAS,EAChEY,EAAeZ,EAAW,CAAC,CAAC,EAC5Ba,EAAmB,KAAK,UACfW,IAAuBzC,IAAoB,MAAO,CAE3D,MAAM0C,EAAgBJ,EAAU,KAAMlI,IAAMA,GAAE,OAAS2F,CAAW,EAC9D2C,IAC2BA,EAAc,YAAY,IAAK9T,IAAMA,GAAE,KAAK,EAC/C,SAAS,OAAOoR,CAAe,CAAC,GACxD8B,EAAmB,KAAK,EAG9B,CACF,OAASzS,EAAO,CACd,QAAQ,MAAM,mCAAoCA,CAAK,CACzD,SACE6G,EAAW,EAAK,CAClB,CACF,CAEAmM,EAAA,CACF,EAAG,CAACV,EAAgBH,EAAK,iBAAkBC,EAAW1B,EAAaC,CAAe,CAAC,EAGnFzL,YAAU,IAAM,CACd,IAAIoO,EAAY,GAEhB,eAAeC,GAAY,CACzB,GAAI,CACF1M,EAAW,EAAI,EACf,MAAM2M,EAAU,CACd,MAAO9C,EACP,UAAWC,IAAoB,MAAQ,KAAO,OAAOA,CAAe,EACpE,IAAKyB,EACL,SAAUE,EACV,OAAQnP,EAAS,OACjB,KAAAuP,EACA,MAAAK,EACA,UAAW,IAGP5R,EAAW,MAAMsS,GAAkBD,CAAO,EAG5CF,IACFT,EAAS1R,CAA+B,EAExC,WAAW,IAAM,CACXmS,GACFzM,EAAW,EAAK,CAEpB,EAAG,GAAG,EAEV,OAAS7G,EAAO,CACd,QAAQ,MAAM,uBAAwBA,CAAK,EACvCsT,GACFzM,EAAW,EAAK,CAEpB,CACF,CAGA,OAAI6J,EACF6C,EAAA,EAEA1M,EAAW,EAAK,EAIX,IAAM,CACXyM,EAAY,EACd,CACF,EAAG,CACD5C,EACAC,EACAyB,EACAE,EACAI,EACAK,EACArM,EACAvD,EAAS,OACV,EAED,SAASuQ,EAAgBC,EAAmB,CAC1C9M,EAAW,EAAI,EAEbwL,EADED,IAAcuB,EACH,KAEAA,CAFI,CAIrB,CAEA,SAASC,EAAiBnJ,EAA+BoJ,EAAuB,CAC9EhN,EAAW,EAAI,EACf8L,EAAQkB,CAAO,CACjB,CAEA,eAAeC,EAAW9V,EAA8B,CACtD,MAAM+V,GAAiB/V,CAAK,EAC5B2O,EAAA,EAEA,MAAM6G,EAAU,CACd,MAAO9C,EACP,UAAWC,IAAoB,MAAQ,KAAOA,EAC9C,IAAKyB,EACL,SAAUE,EACV,OAAQnP,EAAS,OACjB,KAAAuP,EACA,MAAAK,EACA,UAAW,IAEP5R,EAAW,MAAMsS,GAAkBD,CAAO,EAChDX,EAAS1R,CAA+B,CAC1C,CAEA,eAAe6S,EAAW9I,EAA2B,CACnD,MAAM+I,GAAiB/I,CAAE,EACzByB,EAAA,EAEAkG,EAAUlF,IAAU,CAClB,GAAGA,EACH,MAAOA,EAAK,MAAM,IAAK3O,GACrBA,EAAK,KAAOkM,EAAK,CAAE,GAAGlM,EAAM,UAAW,CAACA,EAAK,WAAcA,CAAA,CAC7D,EACA,CACJ,CAEA,SAASkV,EAAiBhJ,EAAkB,CAC1CgH,EAAWhH,CAAE,EAEb,MAAMiJ,EAAgB,SAAS,cAAc,wBAAwB,EACjEA,IACFA,EAAc,UAAY,EAE9B,CAEA,SAASC,EAAiB3V,EAAeV,EAA2B,CAElE,MAAMsW,EAAazD,EAAYnS,CAAK,EAEpC,GAAI4V,EAAY,CAEd,MAAM/F,EAAa+F,EAAW,OAAS5V,EAIjC6V,EADgBD,EAAW,YAAY,KAAM9U,IAAMA,GAAE,QAAU,OAAOxB,CAAS,CAAC,GAChD,OAAS,SAAS,OAAOA,CAAS,EAAI,CAAC,GAE7E,MAAO,GAAGuQ,CAAU,MAAMgG,CAAc,EAC1C,CAGA,MAAO,GAAG7V,CAAK,YAAY,OAAOV,CAAS,EAAI,CAAC,EAClD,CAEA,MAAMwW,EAAW3B,EAAM,OAAO,IAC5B,CAAC,CAAE,GAAA1H,EAAI,MAAAzM,EAAO,UAAAV,EAAW,OAAAqD,EAAQ,KAAAC,GAAM,UAAAmT,EAAY,GAAM,SAAAC,GAAW,MAClEtP,OAACuP,GAAA,CAAK,GAAI,CAAE,GAAI,GACd,UAAArP,MAACsP,GAAA,CACC,MAAOvT,EACP,UAAW,CACT,MAAO,CAAE,QAAS,SAClB,UAAW,CAAE,QAAS,SACtB,OAAQ,CAAE,aAAc+F,EAAE,qBAAqB,EAAE,EAEnD,UAAWiN,EAAiB3V,EAAOV,CAAS,EAC5C,OACEoH,OAAAoG,WAAA,CACE,UAAAlG,MAACuP,GAAA,CACC,QAAS,CAAC,CAACJ,EACX,SAAU,IAAMtJ,IAAO,QAAa8I,EAAW9I,CAAE,EACjD,UAAW,CAAE,MAAO,CAAE,aAAc/D,EAAE,wBAAwB,EAAE,CAAE,GAEnE,CAAC,CAACsN,IACDtP,OAAAoG,WAAA,CACE,UAAAlG,MAAC8G,GAAA,CACC,QAAS,IAAMjB,IAAO,QAAagJ,EAAiBhJ,CAAE,EACtD,aAAY/D,EAAE,oBAAoB,EAElC,eAAC0N,GAAA,EAAK,IAERxP,MAAC8G,GAAA,CACC,QAAS,IAAMjB,IAAO,QAAa4I,EAAW5I,CAAE,EAChD,aAAY/D,EAAE,oBAAoB,EAElC,eAAC2N,GAAA,EAAO,GACV,EACF,GAEJ,EAEF,GAAI,CAAE,GAAI,EAAE,GAEdzP,MAAC0P,IACE,SAAA1T,IAAM,IAAKsS,GACVtO,MAAC4B,GAAA,CAAe,MAAO0M,IAAQ,UAAYxM,EAAE,SAAS,EAAIwM,EAAK,GAAI,CAAE,EAAG,GAAI,EAAjEA,CAAoE,CAChF,EACH,IAxCwBzI,CAyC1B,GAIJ,cACGxF,EAAA,CACC,UAAAL,MAACK,EAAA,CACE,SAAAmH,GAAS,IAAK8G,GACbtO,MAAC4B,GAAA,CAEC,MAAO0M,EACP,GAAI,CAAE,EAAG,IACT,MAAOvB,IAAcuB,EAAM,UAAY,UACvC,QAAS,IAAMD,EAAgBC,CAAG,GAJ7BA,CAAA,CAMR,EACH,EACAtO,MAACK,EAAA,CACC,GAAI,CACF,QAAS,OACT,cAAe,SACf,IAAK,EACL,GAAI,EACJ,WAAY,wBAGd,SAAAL,MAACoL,GAAA,CACC,SAAU6B,EACV,YAAA5B,EACA,gBAAAC,EACA,OAAAzR,EACA,aAAAwC,EACA,YAAAkP,EACA,iBAAmB7Q,GAAkB,CACnCwS,EAAkBxS,CAAK,EACvByS,EAAe,EAAE,EACjBC,EAAmB,EAAE,EACrBE,EAAQ,CAAC,CACX,EACA,cAAgB5S,GAAkB,CAChCyS,EAAezS,CAAK,EACpB4S,EAAQ,CAAC,CACX,EACA,kBAAoB5S,GAA2B,CAC7C0S,EAAmB1S,CAAK,EACxB4S,EAAQ,CAAC,CACX,GACF,GAGFxN,OAACO,GAAI,GAAI,CAAE,SAAU,WAAY,UAAW,SAE1C,UAAAL,MAAC2P,GAAA,CAAK,GAAIpO,EAAS,QAAS,IAC1B,SAAAvB,MAACK,EAAA,CACC,GAAI,CACF,SAAU,WACV,IAAK,EACL,KAAM,EACN,MAAO,EACP,OAAQ,EACR,QAAS,OACT,eAAgB,SAChB,WAAY,SACZ,gBAAiB,yBACjB,OAAQ,EACR,aAAc,GAGhB,eAACsB,GAAA,EAAiB,IAEtB,EAGA3B,MAACK,EAAA,CACC,GAAI,CACF,QAASkB,EAAU,GAAM,EACzB,WAAY,2BACZ,cAAeA,EAAU,OAAS,QAGnC,SAAAgM,EAAM,MAAM,SAAW,QACrBrN,EAAA,CAAW,QAAQ,QAAQ,GAAI,CAAE,UAAW,SAAU,GAAI,GACzD,SAAAF,MAACG,EAAA,CAAM,QAAQ,2BAA2B,qDAE1C,EACF,EAEAL,OAAAoG,WAAA,CACG,UAAAgJ,EAGA3B,EAAM,WAAa,GAClBvN,MAACK,GAAI,GAAI,CAAE,QAAS,OAAQ,eAAgB,SAAU,GAAI,EAAG,GAAI,GAC/D,SAAAL,MAAC4P,GAAA,CACC,MAAOrC,EAAM,WACb,KAAAF,EACA,SAAUkB,EACV,MAAM,YAEV,EAGFvO,MAACE,EAAA,CACC,QAAQ,QACR,GAAI,CAAE,UAAW,SAAU,GAAI,EAAG,MAAO,kBAEzC,SAAAJ,OAACK,EAAA,CACC,QAAQ,2BACR,OAAQ,CAAE,MAAOoN,EAAM,MAAM,OAAQ,MAAOA,EAAM,OACnD,qBACU,CAAE,MAAOA,EAAM,MAAM,QAAS,OAAK,CAAE,MAAOA,EAAM,OAAQ,WACrE,EACF,EACF,GAEJ,EACF,GACF,CAEJ,CCnYA,SAAwBsC,GAAiB,CACvC,aAAAvI,EACA,QAAAwI,EACA,KAAApN,EAAO,EACT,EAA0B,CACxB,KAAM,CAAE,EAAAZ,EAAG,KAAAgL,CAAA,EAASjP,GAAA,EACd6L,EAAWC,GAAA,EACXoG,EAAgBpG,GAAc,IAAI,EAClC,CAACqG,EAAevS,CAAgB,EAAIS,WAAwB,CAChE,QAAS,GACT,KAAM,OACP,EACK,CAACX,EAAU0S,CAAW,EAAI/R,WAAiB,OAAO,EAClD,CAACgS,EAAQC,CAAS,EAAIjS,WAAwB,IAAI,EAClD,CAACmD,EAAgB+O,CAAiB,EAAIlS,WAAiB,CAAC,EACxD,CAACmS,EAAoBC,CAAqB,EAAIpS,WAA6B,CAC/E,OAAQ,GACR,MAAO,GACP,KAAM,EAAC,CACR,EACK,CAACqS,EAAkBC,CAAmB,EAAItS,WAAkB,EAAI,EAGhEuS,EAAiB1R,cAAY,IAAM,CACvCqR,EAAmB9H,GAASA,EAAO,CAAC,CACtC,EAAG,EAAE,EAEC9K,EAAgBkT,GAAkB,CAACpH,EAA8BqH,IAAyB,CAC9FV,EAAYU,EAAcD,EAAQ,EAAE,CACtC,EAGA7Q,YAAU,IAAM,CACd,eAAe+Q,GAAyB,CACtCJ,EAAoB,EAAI,EACxB,GAAI,CACF,KAAM,CAACK,EAAeC,EAAcC,CAAW,EAAI,MAAM,QAAQ,IAAI,CACnEC,GAAclE,EAAK,iBAAkB,QAAQ,EAC7CkE,GAAclE,EAAK,iBAAkB,OAAO,EAC5CkE,GAAclE,EAAK,iBAAkB,MAAM,EAC5C,EAEDwD,EAAsB,CACpB,OAAQO,EACR,MAAOC,EACP,KAAMC,CAAA,CACP,CACH,OAASpW,EAAO,CACd,QAAQ,MAAM,mCAAoCA,CAAK,CACzD,SACE6V,EAAoB,EAAK,CAC3B,CACF,CAEAI,EAAA,CACF,EAAG,CAAC9D,EAAK,gBAAgB,CAAC,EAE1B,MAAMmE,EAAWC,GAAa,IAAMxX,GAAS,CAAE,OAAQoT,EAAK,iBAAkB,CAAC,EAEzEtF,EAAUrF,UAAQ,IACjB8O,EAEE,MAAM,QAAQA,CAAQ,EACzBA,EACG,IAAI,CAAC,CAAE,KAAAjV,CAAA,IAAWA,CAAI,EACtB,OACA,OAAO,CAACsS,EAAK3V,EAAOwY,IAAS7C,GAAO6C,EAAK,QAAQ7C,CAAG,IAAM3V,CAAK,EAC/D,OACH,GARkB,GASrB,CAACsY,CAAQ,CAAC,EAEPG,EAAarS,cACjB,MAAOsS,GAA0B,CAC/B,MAAMC,GAAkBD,CAAO,EAC/B/J,EAAA,EACAmJ,EAAA,CACF,EACA,CAACnJ,EAAcmJ,CAAc,GAG/B,GAAI,CAACQ,GAAYV,EAAkB,OAAO,KAG1C,MAAMgB,EAAgB,IAAM,CAC1B,MAAMC,EACJ1R,OAAAoG,WAAA,CACE,UAAAlG,MAACyJ,GAAA,CAAe,SAAAlM,EAAoB,aAAAC,CAAA,CAA4B,EAEhEwC,MAACqH,GAAA,CACC,iBAAA5J,EACA,aAAc,IAAM,CAClB6J,EAAA,EACAmJ,EAAA,CACF,EACA,YAAaQ,EACb,aAAcZ,EACd,SAAA9S,EACA,aAAAC,EACA,QAAAgK,EACA,aAAc0I,EACd,gBAAiBC,CAAA,GAGnBnQ,MAAC1C,GAAA,CACC,SAAAC,EACA,aAAAC,EACA,YAAayT,EACb,aAAcZ,EACd,iBAAA5S,EACA,WAAA2T,CAAA,EACF,EACF,EAGIK,EAAqB,MAAM,QAAQR,CAAQ,GAAKA,EAAS,OAAS,GACtEjR,MAACK,EAAA,CACC,SAAAL,MAAC4M,GAAA,CACC,QAAApF,EACA,aAAc,IAAM,CAClBF,EAAA,EACAmJ,EAAA,CACF,EACA,aAAcJ,EACd,WAAaxK,GAAe,CAC1BsK,EAAUtK,CAAE,EACZoK,EAAY,OAAO,CACrB,EACA,eAAA5O,CAAA,GAEJ,EAGF,OAAK0O,EASDjQ,OAAAoG,WAAA,CACG,UAAAsL,EACAC,GACC3R,OAAAoG,WAAA,CACE,UAAAlG,MAACiH,GAAA,CAAQ,GAAI,CAAE,GAAI,GAAK,EACvBwK,CAAA,EACH,GAEJ,EAfA3R,OAAC4R,GAAA,CAAK,UAAS,GAAC,QAAS,EACvB,UAAA1R,MAAC0R,GAAA,CAAK,KAAM,CAAE,GAAI,GAAI,GAAI,GAAM,SAAAF,CAAA,CAAkB,EAClDxR,MAAC0R,IAAK,KAAM,CAAE,GAAI,GAAI,GAAI,GAAM,SAAAD,CAAA,CAAmB,GACrD,CAeN,EAEA,OACE3R,OAAAoG,WAAA,CACE,UAAApG,OAACqG,GAAA,CACC,WAAYuD,EACZ,KAAAhH,EACA,QAAS,IAAMoN,EAAQ,EAAK,EAC5B,SAAWC,EAAuB,KAAP,KAC3B,UAAW,GAEX,UAAAjQ,OAACsG,GAAA,CACC,UAAApG,MAACG,EAAA,CAAM,QAAQ,cAAc,EAC7BH,MAAC8G,GAAA,CACC,aAAYhF,EAAE,OAAO,EACrB,QAAS,IAAMgO,EAAQ,EAAK,EAC5B,GAAI,CACF,SAAU,WACV,MAAO,EACP,IAAK,EACL,MAAQ6B,GAAUA,EAAM,QAAQ,KAAK,GAAG,GAG1C,eAACC,GAAA,EAAM,GACT,EACF,EACA5R,MAACwG,GAAA,CAAe,SAAA+K,EAAA,CAAc,CAAE,KAElCvR,MAAC6R,GAAA,CACC,KAAM,CAAC,CAAC7B,EAAc,QACtB,MAAO,IAAMvS,EAAiB,CAAE,QAAS,GAAI,KAAM,OAAQ,EAC3D,KAAMuS,EAAc,KAEnB,SAAAA,EAAc,SACjB,EACF,CAEJ,CC3MA,SAAwB8B,GACtBC,EAAqB,GACrBC,EAA+B,GACG,CAClC,KAAM,CAAClU,CAAQ,EAAImU,GAAA,EAGbC,EAAkB,CACtB,GAAGH,EACH,GAAGjU,EAEH,gBAAiBA,GAAU,iBAAmB,GAE9C,YAAaA,GAAU,aAAe,CAAC,GAAI,EAAE,EAC7C,GAAGkU,CAAA,EAGC,CAACrU,EAAUgK,CAAW,EAAIzJ,WAAYgU,CAAe,EACrD,CAAE,SAAAC,CAAA,EAAaC,GAAA,EACf,CAACC,EAAeC,CAAgB,EAAIpU,WAAS,EAAK,EAGxD2B,mBAAU,IAAM,CACd,MAAMF,EAAU4S,GAAoBJ,EAAU,MAAM,EAEpD,GAAIxS,GAAS,SACX,GAAI,CACF,MAAM6S,EAAkB,KAAK,MAAM7S,EAAQ,QAAQ,EAEnDgI,EAAa8K,GAENJ,EAUHI,EAAiB,iBACjB,OAAO,KAAKA,EAAiB,eAAe,EAAE,OAAS,EAIhD,CACL,GAAGA,EACH,GAAGD,EACH,gBAAiBC,EAAiB,iBAI/B,CACL,GAAGA,EACH,GAAGD,CAAA,GAvBHF,EAAiB,EAAI,EACd,CACL,GAAGG,EACH,GAAGD,CAAA,EAsBR,CACH,OAAS7X,EAAO,CACd,QAAQ,MAAM,kCAAmCA,CAAK,CACxD,MACU0X,GACVC,EAAiB,EAAI,CAEzB,EAAG,CAACH,EAAUE,CAAa,CAAC,EAErB,CAAC1U,EAAUgK,CAAW,CAC/B","names":["groupActionsFolder","actionsFolder","key","label","actions","entry","DEFAULT_NONE_OPTION","intensity","index","camelToPascal","EXPORT_FORMAT_VERSION","JSON_INDENT_SPACES","NONE_INTENSITY_VALUE","exportCleanData","locale","options","customGroups","group","getCustomGroupByName","getCustomGroups","allGroupsForLocale","defaultGroupNames","relevantTiles","getTiles","tile","matchesLocale","groups","intensityLabels","a","b","noneIntensity","i","filteredLabels","orderedLabels","customTiles","sortedGroups","sortedCustomTiles","groupName","_key","value","error","importCleanData","importDataString","result","importData","targetLocale","mergeStrategy","groupData","existingGroup","finalGroupName","counter","intensities","customGroup","validation","validateCustomGroup","updateCustomGroup","addCustomGroup","tilesData","intensityStr","tileData","action","tags","existing","addCustomTile","importLegacyData","legacyDataString","mappedGroups","_locale","_gameMode","getUniqueImportRecords","__vitePreload","existingTiles","newUniqueRecords","changedTagRecords","updateCustomTile","exportGroupData","autoImportData","trimmedData","parsedData","getAvailableGroupsForExport","nonDefaultGroups","allCustomTiles","groupTiles","ImportExport","expanded","handleChange","setSubmitMessage","_bulkImport","formData","useRef","useTranslation","settings","useGameSettings","inputValue","setInputValue","useState","importResult","setImportResult","exportFormat","setExportFormat","exportScope","setExportScope","singleGroup","setSingleGroup","availableGroups","setAvailableGroups","setMergeStrategy","exportData","useCallback","exportedData","customString","gameMode","userData","actionText","importTiles","formRef","importDataValue","module","record","submitCustomAction","message","loadAvailableGroups","useEffect","jsxs","Accordion","jsx","AccordionSummary","Typography","Trans","AccordionDetails","Box","FormControl","InputLabel","Select","e","MenuItem","TextField","event","CopyToClipboard","Alert","warning","Button","CustomGroupSelector","onChange","includeDefault","disabled","refreshTrigger","setGroups","loading","setLoading","getAllAvailableGroups","filteredGroups","CircularProgress","Chip","IntensitySelector","t","setIntensities","groupIntensities","getGroupIntensities","sortedIntensities","useMemo","firstIntensity","DEFAULT_INTENSITY_TEMPLATES","findMatchingTemplateIndex","matchingTemplateIndex","template","CustomGroupDialog","open","onClose","onGroupCreated","onGroupUpdated","editingGroup","selectedTab","setSelectedTab","existingGroups","setExistingGroups","loadingGroups","setLoadingGroups","tileCounts","setTileCounts","validationConstants","getValidationConstants","setLabel","type","setType","selectedTemplateIndex","setSelectedTemplateIndex","setIntensityLabels","currentEditingGroup","setCurrentEditingGroup","isSubmitting","setIsSubmitting","setValidation","deleteDialogOpen","setDeleteDialogOpen","pendingDeleteGroup","setPendingDeleteGroup","reloadGroupsAndCounts","counts","countTilesByGroup","generateGroupName","displayLabel","nanoid","handleTemplateChange","templateIndex","updateIntensityLabel","newLabels","addIntensity","removeIntensity","_","errors","labelText","handleEditGroup","handleDeleteGroup","groupId","g","tileCount","confirmDelete","id","deleteCustomTilesByGroup","deleteCustomGroup","handleSubmit","resetEditingState","Fragment","Dialog","DialogTitle","Tabs","newValue","Tab","DialogContent","List","React","ListItem","ListItemText","ListItemSecondaryAction","IconButton","EditIcon","DeleteIcon","Divider","validateGroupLabel","AddIcon","DialogActions","AddCustomTile","boardUpdated","_mappedGroups","tagList","updateTileId","setUpdateTileId","setFormData","groupDialogOpen","setGroupDialogOpen","validationMessage","setValidationMessage","groupsRefreshTrigger","setGroupsRefreshTrigger","timeoutId","validateCustomTileWithGroups","editTile","tileGameMode","prev","tileExists","newAction","clear","handleGroupCreated","handleGroupUpdated","handleIntensityChange","submitNewTile","tagInput","currentTags","data","groupLabel","handleKeyDown","handleTagInputBlur","popperElement","Autocomplete","_event","newValues","params","CustomTileHelp","isMobile","useBreakpoint","expandedIdeas","setExpandedIdeas","expandedBasics","setExpandedBasics","toggleIdea","toggleBasic","basicConcepts","Extension","Settings","creativeIdeas","Lightbulb","TrendingUp","Shuffle","Category","Share","concept","ListItemIcon","ExpandLess","ExpandMore","Collapse","Psychology","idea","tip","tipIndex","TileCategorySelection","groupFilter","intensityFilter","dexieGroups","onGameModeChange","onGroupChange","onIntensityChange","hideAll","sx","uniqueGroups","setUniqueGroups","defaultIntensityFilter","mappedGroupsFolder","folder","getGroupLabel","folderGroup","getIntensityLabel","validGroupFilter","intensityData","groupNames","handleGroupFilterChange","newGroup","validIntensityFilter","count","ViewCustomTiles","updateTile","i18n","tagFilter","setTagFilter","gameModeFilter","setGameModeFilter","setGroupFilter","setIntensityFilter","page","setPage","tiles","setTiles","setDexieGroups","limit","loadGroupsAndCounts","allGroups","getTileCountsByGroup","groupMap","isCurrentGroupValid","selectedGroup","isMounted","loadTiles","filters","getPaginatedTiles","toggleTagFilter","tag","handlePageChange","newPage","deleteTile","deleteCustomTile","toggleTile","toggleCustomTile","handleUpdateTile","dialogContent","getSubheaderText","dexieGroup","intensityLabel","tileList","isEnabled","isCustom","Card","CardHeader","Switch","Edit","Delete","CardActions","Fade","Pagination","CustomTileDialog","setOpen","isSmallScreen","submitMessage","setExpanded","tileId","setTileId","setRefreshTrigger","allGameModeActions","setAllGameModeActions","isLoadingActions","setIsLoadingActions","triggerRefresh","panel","newExpanded","loadAllGameModeActions","onlineActions","localActions","soloActions","importActions","allTiles","useLiveQuery","self","bulkImport","records","importCustomTiles","renderContent","leftColumnContent","rightColumnContent","Grid","theme","Close","ToastAlert","useSettingsToFormData","defaultSettings","overrideSettings","useSettings","initialFormData","messages","useMessages","isInitialized","setIsInitialized","latestMessageByType","messageSettings","previousFormData"],"ignoreList":[],"sources":["../../src/helpers/actionsFolder.ts","../../src/views/CustomTileDialog/ImportExport/enhancedImportExport.ts","../../src/views/CustomTileDialog/ImportExport/index.tsx","../../src/components/CustomGroupSelector/index.tsx","../../src/components/IntensitySelector/index.tsx","../../src/types/customGroups.ts","../../src/views/CustomGroupDialog/index.tsx","../../src/views/CustomTileDialog/AddCustomTile/index.tsx","../../src/views/CustomTileDialog/CustomTileHelp/index.tsx","../../src/components/TileCategorySelection/index.tsx","../../src/views/CustomTileDialog/ViewCustomTiles/index.tsx","../../src/views/CustomTileDialog/index.tsx","../../src/hooks/useSettingsToFormData.ts"],"sourcesContent":["import { GroupedActions, MappedGroup } from '@/types/customTiles';\n\nimport { DEFAULT_NONE_OPTION } from '@/constants/actionConstants';\nimport { camelToPascal } from '@/helpers/strings';\n\n/**\n * Transforms grouped actions into a flat array of mapped groups for UI components\n *\n * @param actionsFolder - Object containing grouped actions with intensities\n * @returns Array of mapped groups with intensity levels and labels\n *\n * Features:\n * - Filters out the default \"None\" option\n * - Creates individual entries for each intensity level\n * - Converts group names to PascalCase for consistency\n */\nexport default function groupActionsFolder(actionsFolder: GroupedActions): MappedGroup[] {\n  return Object.entries(actionsFolder).flatMap(([key, { label, actions }]) => {\n    if (!actions) return [];\n    const intensities = Object.keys(actions).filter((entry) => entry !== DEFAULT_NONE_OPTION);\n    return intensities.map((intensity, index) => ({\n      group: camelToPascal(key),\n      groupLabel: label,\n      value: key,\n      intensity: Number(index + 1),\n      translatedIntensity: intensity,\n      label: `${label} - ${intensity}`,\n    }));\n  });\n}\n","import { CustomGroupIntensity, CustomGroupPull } from '@/types/customGroups';\nimport {\n  getCustomGroups,\n  addCustomGroup,\n  getCustomGroupByName,\n  updateCustomGroup,\n} from '@/stores/customGroups';\nimport { getTiles, addCustomTile, updateCustomTile } from '@/stores/customTiles';\nimport { validateCustomGroup } from '@/services/validationService';\n\n/**\n * Clean import/export functionality with locale-inspired format\n */\n\n// Version identifier for export format\nconst EXPORT_FORMAT_VERSION = '2.0.0';\n\n// Constants for better maintainability\nconst JSON_INDENT_SPACES = 2;\nconst NONE_INTENSITY_VALUE = 0;\n\n// Custom tile with optional tags\nexport interface CleanCustomTile {\n  action: string;\n  tags?: string[];\n}\n\n// Clean export data structure\nexport interface CleanExportData {\n  version: string;\n  locale: string;\n  groups: {\n    [groupName: string]: {\n      label: string;\n      type: string;\n      intensities: string[];\n    };\n  };\n  customTiles: {\n    [groupName: string]: {\n      [intensityValue: number]: (string | CleanCustomTile)[];\n    };\n  };\n}\n\nexport interface ImportResult {\n  success: boolean;\n  importedGroups: number;\n  importedTiles: number;\n  errors: string[];\n  warnings: string[];\n}\n\n/**\n * Export custom groups and tiles in clean v2.0 format (locale-inspired)\n * @param locale - Target locale for export ('en', 'es', 'fr')\n * @param options - Export configuration options\n * @param options.singleGroup - Name of specific group to export (only for 'single' scope)\n * @param options.exportScope - Scope of export: 'all' (everything), 'single' (one group), 'default' (custom tiles from default groups)\n * @returns Promise<string> - JSON string of exported data\n * @throws Error if export fails or validation errors occur\n */\nexport async function exportCleanData(\n  locale = 'en',\n  options: {\n    singleGroup?: string;\n    exportScope?: 'all' | 'single' | 'default';\n  } = {}\n): Promise<string> {\n  try {\n    // Get custom groups based on scope\n    let customGroups: CustomGroupPull[];\n\n    if (options.exportScope === 'single' && options.singleGroup) {\n      // Get only the single selected group\n      const group = await getCustomGroupByName(options.singleGroup, locale);\n      customGroups = group && !group.isDefault ? [group] : [];\n    } else if (options.exportScope === 'default') {\n      // Only export default groups (no custom groups, but their tiles)\n      customGroups = [];\n    } else {\n      // Get all custom groups for this locale (exclude defaults)\n      const allGroups = await getCustomGroups({ locale });\n      customGroups = allGroups.filter((group) => !group.isDefault);\n    }\n\n    // Get all groups to determine which are default vs custom\n    const allGroupsForLocale = await getCustomGroups({ locale });\n    const defaultGroupNames = new Set(\n      allGroupsForLocale.filter((group) => group.isDefault).map((group) => group.name)\n    );\n\n    // Get ALL custom tiles for this locale\n    const allCustomTiles = await getTiles({ isCustom: 1 });\n    const relevantTiles = allCustomTiles.filter((tile) => {\n      const matchesLocale = !tile.locale || tile.locale === locale;\n\n      // If exporting single group, only include tiles from that group\n      if (options.exportScope === 'single' && options.singleGroup) {\n        return matchesLocale && tile.group === options.singleGroup;\n      }\n\n      // If exporting default scope, only include tiles from default groups\n      if (options.exportScope === 'default') {\n        // Check if the tile's group is a default group\n        return matchesLocale && defaultGroupNames.has(tile.group);\n      }\n\n      // Otherwise include all custom tiles for this locale\n      return matchesLocale;\n    });\n\n    // Build the clean export format\n    const groups: CleanExportData['groups'] = {};\n\n    // Export custom groups with their structure\n    for (const group of customGroups) {\n      // Convert intensities to simple string array starting with \"None\"\n      const intensityLabels = group.intensities\n        .sort((a, b) => a.value - b.value)\n        .map((intensity) => intensity.label);\n\n      // Ensure \"None\" is at index 0 (intensity value 0)\n      const noneIntensity = group.intensities.find((i) => i.value === NONE_INTENSITY_VALUE);\n      const filteredLabels = intensityLabels.filter((label) => label !== noneIntensity?.label);\n      const orderedLabels = noneIntensity\n        ? [noneIntensity.label, ...filteredLabels]\n        : intensityLabels;\n\n      groups[group.name] = {\n        label: group.label,\n        type: group.type || 'sex',\n        intensities: orderedLabels,\n      };\n    }\n\n    // Export custom tiles grouped by group name and intensity value\n    const customTiles: CleanExportData['customTiles'] = {};\n\n    for (const tile of relevantTiles) {\n      if (!customTiles[tile.group]) {\n        customTiles[tile.group] = {};\n      }\n      if (!customTiles[tile.group][tile.intensity]) {\n        customTiles[tile.group][tile.intensity] = [];\n      }\n\n      // Include tags if they exist, otherwise just export as string\n      if (tile.tags && tile.tags.length > 0) {\n        customTiles[tile.group][tile.intensity].push({\n          action: tile.action,\n          tags: tile.tags,\n        });\n      } else {\n        customTiles[tile.group][tile.intensity].push(tile.action);\n      }\n    }\n\n    // Sort groups alphabetically for better readability\n    const sortedGroups: CleanExportData['groups'] = {};\n    Object.keys(groups)\n      .sort()\n      .forEach((key) => {\n        sortedGroups[key] = groups[key];\n      });\n\n    // Sort custom tiles by group name and intensity for better organization\n    const sortedCustomTiles: CleanExportData['customTiles'] = {};\n    Object.keys(customTiles)\n      .sort()\n      .forEach((groupName) => {\n        sortedCustomTiles[groupName] = {};\n        // Sort intensity levels numerically\n        Object.keys(customTiles[groupName])\n          .sort((a, b) => Number.parseInt(a, 10) - Number.parseInt(b, 10))\n          .forEach((intensity) => {\n            sortedCustomTiles[groupName][Number.parseInt(intensity, 10)] =\n              customTiles[groupName][Number.parseInt(intensity, 10)];\n          });\n      });\n\n    const exportData: CleanExportData = {\n      version: EXPORT_FORMAT_VERSION,\n      locale,\n      groups: sortedGroups,\n      customTiles: sortedCustomTiles,\n    };\n\n    // Use custom JSON formatting for better readability\n    return JSON.stringify(\n      exportData,\n      (_key, value) => {\n        // Keep arrays compact for tile actions to save space\n        if (Array.isArray(value) && value.length > 0 && typeof value[0] === 'string') {\n          return value;\n        }\n        return value;\n      },\n      JSON_INDENT_SPACES\n    );\n  } catch (error) {\n    console.error('Error exporting clean data:', error);\n    throw new Error(`Export failed: ${error}`);\n  }\n}\n\n/**\n * Import custom groups and tiles from clean v2.0 format\n * @param importDataString - JSON string containing export data\n * @param options - Import configuration options\n * @param options.locale - Target locale for import\n * @param options.mergeStrategy - How to handle conflicts: 'skip', 'overwrite', or 'rename'\n * @returns Promise<ImportResult> - Result object containing success status, counts, errors, and warnings\n */\nexport async function importCleanData(\n  importDataString: string,\n  options: {\n    locale?: string;\n    mergeStrategy?: 'skip' | 'overwrite' | 'rename';\n  } = {}\n): Promise<ImportResult> {\n  const result: ImportResult = {\n    success: false,\n    importedGroups: 0,\n    importedTiles: 0,\n    errors: [],\n    warnings: [],\n  };\n\n  try {\n    // Parse the import data\n    let importData: CleanExportData;\n    try {\n      importData = JSON.parse(importDataString);\n    } catch (error) {\n      result.errors.push('Invalid JSON format');\n      console.warn('Failed to parse import data JSON:', error);\n      return result;\n    }\n\n    // Validate the format\n    if (!importData.version || !importData.groups || !importData.customTiles) {\n      result.errors.push('Invalid export format - missing version, groups, or customTiles');\n      return result;\n    }\n\n    // Version compatibility check\n    if (importData.version !== EXPORT_FORMAT_VERSION) {\n      result.warnings.push(\n        `Format version mismatch: expected ${EXPORT_FORMAT_VERSION}, got ${importData.version}`\n      );\n    }\n\n    const targetLocale = options.locale || importData.locale || 'en';\n    const mergeStrategy = options.mergeStrategy || 'skip';\n\n    // Step 1: Import custom groups (if they don't exist)\n    for (const [groupName, groupData] of Object.entries(importData.groups)) {\n      try {\n        // Check if group already exists\n        const existingGroup = await getCustomGroupByName(groupName, targetLocale);\n        let finalGroupName = groupName;\n\n        if (existingGroup) {\n          switch (mergeStrategy) {\n            case 'skip':\n              result.warnings.push(`Skipped existing group: ${groupName}`);\n              continue;\n            case 'overwrite':\n              // Will update the existing group\n              result.warnings.push(`Will update existing group: ${groupName}`);\n              break;\n            case 'rename': {\n              // Create with a new name\n              let counter = 1;\n              finalGroupName = `${groupName}_imported`;\n              while (await getCustomGroupByName(finalGroupName, targetLocale)) {\n                finalGroupName = `${groupName}_imported_${counter}`;\n                counter++;\n              }\n              result.warnings.push(`Renamed group from ${groupName} to ${finalGroupName}`);\n              break;\n            }\n          }\n        }\n\n        // Convert intensities array back to CustomGroupIntensity objects\n        const intensities: CustomGroupIntensity[] = groupData.intensities.map((label, index) => ({\n          id: `intensity-${index}`,\n          label: label,\n          value: index, // Start from 0 for \"None\"\n          isDefault: index === NONE_INTENSITY_VALUE, // Mark \"None\" as default\n        }));\n\n        // Create the group object\n        const customGroup = {\n          name: finalGroupName,\n          label: groupData.label,\n          intensities: intensities,\n          type: groupData.type as any,\n          locale: targetLocale,\n          isDefault: false,\n        };\n\n        // Validate the group before importing\n        const validation = await validateCustomGroup(customGroup);\n        if (!validation.isValid) {\n          result.errors.push(`Invalid group ${finalGroupName}: ${validation.errors.join(', ')}`);\n          continue;\n        }\n\n        // Import or update the group\n        if (existingGroup && mergeStrategy === 'overwrite') {\n          await updateCustomGroup(existingGroup.id, customGroup);\n        } else {\n          await addCustomGroup(customGroup);\n        }\n\n        result.importedGroups++;\n      } catch (error) {\n        result.errors.push(`Error importing group ${groupName}: ${error}`);\n      }\n    }\n\n    // Step 2: Import custom tiles from customTiles section\n    for (const [groupName, tilesData] of Object.entries(importData.customTiles)) {\n      try {\n        // Verify the group exists (could be custom or default)\n        const group = await getCustomGroupByName(groupName, targetLocale);\n        if (!group) {\n          result.warnings.push(`Group ${groupName} not found for custom tiles, skipping tiles`);\n          continue;\n        }\n\n        // Import tiles for each intensity\n        for (const [intensityStr, actions] of Object.entries(tilesData)) {\n          const intensity = Number.parseInt(intensityStr, 10);\n\n          // Verify intensity is valid for this group\n          const validIntensity = group.intensities.find((i) => i.value === intensity);\n          if (!validIntensity) {\n            result.warnings.push(\n              `Intensity ${intensity} not valid for group ${groupName}, skipping tiles`\n            );\n            continue;\n          }\n\n          for (const tileData of actions) {\n            try {\n              // Parse tile data - can be string or object with action and tags\n              let action: string;\n              let tags: string[] = [];\n\n              if (typeof tileData === 'string') {\n                action = tileData;\n              } else if (tileData && typeof tileData === 'object' && 'action' in tileData) {\n                action = tileData.action;\n                tags = tileData.tags || [];\n              } else {\n                result.warnings.push(`Invalid tile data format in group ${groupName}, skipping`);\n                continue;\n              }\n\n              // Check if tile already exists\n              const existingTiles = await getTiles();\n              const existingTile = existingTiles.find(\n                (existing) =>\n                  existing.group === groupName &&\n                  existing.intensity === intensity &&\n                  existing.action === action &&\n                  (!existing.locale || existing.locale === targetLocale)\n              );\n\n              if (existingTile && mergeStrategy === 'skip') {\n                result.warnings.push(`Skipped existing tile: ${action.substring(0, 50)}...`);\n                continue;\n              }\n\n              // Import the tile\n              await addCustomTile({\n                group: groupName,\n                intensity: intensity,\n                action: action,\n                tags: tags,\n                isCustom: 1,\n                locale: targetLocale,\n              });\n\n              result.importedTiles++;\n            } catch (error) {\n              result.errors.push(\n                `Error importing tile \"${typeof tileData === 'string' ? tileData.substring(0, 30) : 'object'}...\": ${error}`\n              );\n            }\n          }\n        }\n      } catch (error) {\n        result.errors.push(`Error importing tiles for group ${groupName}: ${error}`);\n      }\n    }\n\n    result.success = result.errors.length === 0;\n    return result;\n  } catch (error) {\n    result.errors.push(`Import failed: ${error}`);\n    return result;\n  }\n}\n\n/**\n * Legacy import support - converts old format to new format\n */\nexport async function importLegacyData(\n  legacyDataString: string,\n  mappedGroups: any,\n  _locale = 'en',\n  _gameMode = 'online'\n): Promise<ImportResult> {\n  const result: ImportResult = {\n    success: false,\n    importedGroups: 0,\n    importedTiles: 0,\n    errors: [],\n    warnings: [],\n  };\n\n  try {\n    // Use the existing getUniqueImportRecords for legacy format\n    const { default: getUniqueImportRecords } = await import('./getUniqueImportRecords');\n\n    const existingTiles = await getTiles();\n    const { newUniqueRecords, changedTagRecords } = getUniqueImportRecords(\n      legacyDataString,\n      existingTiles,\n      mappedGroups\n    );\n\n    // Import new tiles\n    for (const tile of newUniqueRecords) {\n      try {\n        await addCustomTile(tile);\n        result.importedTiles++;\n      } catch (error) {\n        result.errors.push(`Error importing tile: ${error}`);\n      }\n    }\n\n    // Update tiles with changed tags\n    for (const tile of changedTagRecords) {\n      try {\n        if (tile.id) {\n          await updateCustomTile(tile.id, tile);\n        }\n      } catch (error) {\n        result.errors.push(`Error updating tile: ${error}`);\n      }\n    }\n\n    result.success = result.errors.length === 0;\n    result.warnings.push(\n      'Imported using legacy format. Consider exporting in clean v2.0 format for better compatibility.'\n    );\n\n    return result;\n  } catch (error) {\n    result.errors.push(`Legacy import failed: ${error}`);\n    return result;\n  }\n}\n\n/**\n * Export a single group in clean v2.0 format\n */\nexport async function exportGroupData(groupName: string, locale = 'en'): Promise<string> {\n  return exportCleanData(locale, {\n    singleGroup: groupName,\n    exportScope: 'single',\n  });\n}\n\n/**\n * Auto-detect import format and use appropriate import method\n */\nexport async function autoImportData(\n  importDataString: string,\n  mappedGroups: any,\n  options: {\n    locale?: string;\n    gameMode?: string;\n    mergeStrategy?: 'skip' | 'overwrite' | 'rename';\n  } = {}\n): Promise<ImportResult> {\n  const trimmedData = importDataString.trim();\n\n  // Try to parse as JSON\n  try {\n    const parsedData = JSON.parse(trimmedData);\n\n    // Check for clean v2.0 format (has groups object)\n    if (parsedData.version && parsedData.groups) {\n      return importCleanData(trimmedData, options);\n    }\n\n    // Check for old enhanced format (has customGroups array) - should not exist after our changes\n    if (parsedData.version && parsedData.customGroups !== undefined) {\n      return {\n        success: false,\n        importedGroups: 0,\n        importedTiles: 0,\n        errors: ['Old enhanced format no longer supported. Please use clean v2.0 format.'],\n        warnings: [],\n      };\n    }\n  } catch {\n    // Not JSON, probably legacy format\n  }\n\n  // Fall back to legacy import\n  return importLegacyData(\n    trimmedData,\n    mappedGroups,\n    options.locale || 'en',\n    options.gameMode || 'online'\n  );\n}\n\n/**\n * Generate a human-readable summary of export data\n */\nexport function generateExportSummary(exportDataString: string): string {\n  try {\n    const data: CleanExportData = JSON.parse(exportDataString);\n\n    const groupNames = Object.keys(data.groups);\n    const groupCount = groupNames.length;\n\n    // Count total tiles across all custom tiles\n    let totalTileCount = 0;\n    for (const groupTiles of Object.values(data.customTiles)) {\n      for (const intensityTiles of Object.values(groupTiles)) {\n        totalTileCount += intensityTiles.length;\n      }\n    }\n\n    let summary = `Export Summary:\\n`;\n    summary += `• Format Version: ${data.version}\\n`;\n    summary += `• Locale: ${data.locale}\\n`;\n    summary += `• Custom Groups: ${groupCount}\\n`;\n    summary += `• Total Custom Tiles: ${totalTileCount}\\n`;\n\n    if (groupCount > 0) {\n      summary += `\\nCustom Groups:\\n`;\n      groupNames.forEach((groupName) => {\n        const group = data.groups[groupName];\n        const groupTiles = data.customTiles[groupName] || {};\n        const groupTileCount = Object.values(groupTiles).reduce(\n          (sum, tiles) => sum + tiles.length,\n          0\n        );\n        summary += `• ${group.label} (${group.intensities.length} intensities, ${groupTileCount} tiles)\\n`;\n      });\n    }\n\n    return summary;\n  } catch {\n    return 'Unable to parse export data';\n  }\n}\n\n/**\n * Get list of available custom groups for export selection\n */\nexport async function getAvailableGroupsForExport(\n  locale = 'en'\n): Promise<{ name: string; label: string; tileCount: number }[]> {\n  try {\n    // Get all custom groups (exclude defaults)\n    const customGroups = await getCustomGroups({ locale });\n    const nonDefaultGroups = customGroups.filter((group) => !group.isDefault);\n\n    // Get tile counts for each group\n    const allCustomTiles = await getTiles({ isCustom: 1 });\n\n    return nonDefaultGroups.map((group) => {\n      const groupTiles = allCustomTiles.filter(\n        (tile) => tile.group === group.name && (!tile.locale || tile.locale === locale)\n      );\n\n      return {\n        name: group.name,\n        label: group.label,\n        tileCount: groupTiles.length,\n      };\n    });\n  } catch (error) {\n    console.error('Error getting available groups for export:', error);\n    return [];\n  }\n}\n","import {\n  Box,\n  Button,\n  TextField,\n  Typography,\n  Alert,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n} from '@mui/material';\nimport { submitCustomAction } from '@/services/firebase';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport Accordion from '@/components/Accordion';\nimport AccordionSummary from '@/components/Accordion/Summary';\nimport AccordionDetails from '@/components/Accordion/Details';\nimport CopyToClipboard from '@/components/CopyToClipboard';\nimport groupActionsFolder from '@/helpers/actionsFolder';\nimport { ImportExportProps } from '@/types/customTiles';\nimport {\n  exportCleanData,\n  exportGroupData,\n  autoImportData,\n  ImportResult,\n  getAvailableGroupsForExport,\n} from './enhancedImportExport';\nimport { useGameSettings } from '@/stores/settingsStore';\n\nexport default function ImportExport({\n  expanded,\n  handleChange,\n  customTiles,\n  mappedGroups,\n  setSubmitMessage,\n  bulkImport: _bulkImport,\n}: ImportExportProps) {\n  const formData = useRef<HTMLFormElement | null>(null);\n  const { t } = useTranslation();\n  const { settings } = useGameSettings();\n  const [inputValue, setInputValue] = useState<string>('');\n  // const [selectedTab, setSelectedTab] = useState(0); // Removed as tabs not implemented yet\n  const [importResult, setImportResult] = useState<ImportResult | null>(null);\n  const [exportFormat, setExportFormat] = useState<'clean' | 'legacy'>('clean');\n  const [exportScope, setExportScope] = useState<'all' | 'single' | 'default'>('all');\n  const [singleGroup, setSingleGroup] = useState<string>('');\n  const [availableGroups, setAvailableGroups] = useState<\n    { name: string; label: string; tileCount: number }[]\n  >([]);\n  const [mergeStrategy, setMergeStrategy] = useState<'skip' | 'overwrite' | 'rename'>('skip');\n\n  const exportData = useCallback(async () => {\n    try {\n      if (exportFormat === 'clean') {\n        let exportedData: string;\n\n        switch (exportScope) {\n          case 'single':\n            if (!singleGroup) {\n              setSubmitMessage({\n                message: t('errors.selectGroupToExport'),\n                type: 'error',\n              });\n              return;\n            }\n            exportedData = await exportGroupData(singleGroup, settings.locale || 'en');\n            break;\n          case 'default':\n            exportedData = await exportCleanData(settings.locale || 'en', {\n              exportScope: 'default',\n            });\n            break;\n          default:\n            exportedData = await exportCleanData(settings.locale || 'en', { exportScope: 'all' });\n            break;\n        }\n\n        setInputValue(exportedData);\n      } else {\n        // Use the legacy export format\n        const userCustomTiles = customTiles.filter((tile) => tile.isCustom);\n\n        const customString = userCustomTiles.map(\n          ({ group, intensity, action, tags, gameMode = 'online' }) => {\n            // Get the appropriate groups for this tile's game mode\n            const gameModeGroups = groupActionsFolder(\n              mappedGroups[gameMode as keyof typeof mappedGroups] || {}\n            );\n\n            // Find the matching group data\n            const userData = gameModeGroups.find(\n              (entry) => entry?.intensity === Number(intensity) && entry?.value === group\n            );\n\n            let actionText = '';\n            actionText += `[${userData?.group || group} - ${userData?.translatedIntensity || intensity}]\\n`;\n            actionText += action;\n            actionText += tags?.length ? `\\nTags: ` + tags?.join(', ') : '';\n            actionText += `\\nGameMode: ${gameMode}`;\n\n            return actionText;\n          }\n        );\n\n        setInputValue(customString.join('\\n---\\n'));\n      }\n    } catch (error) {\n      console.error('Error exporting data:', error);\n      setSubmitMessage({\n        message: t('errors.exportFailed', { error: error }),\n        type: 'error',\n      });\n    }\n  }, [\n    customTiles,\n    mappedGroups,\n    setInputValue,\n    exportFormat,\n    exportScope,\n    singleGroup,\n    settings.locale,\n    setSubmitMessage,\n    t,\n  ]);\n\n  async function importTiles(formRef: React.RefObject<HTMLFormElement | null>) {\n    if (!formRef.current) return;\n\n    const form = formRef.current as unknown as { importData: HTMLInputElement };\n    const importDataValue = form.importData.value;\n\n    if (!importDataValue.trim()) {\n      return setSubmitMessage({\n        type: 'error',\n        message: t('enterDataToImport'),\n      });\n    }\n\n    try {\n      setSubmitMessage({ type: 'info', message: t('importMessages.importing') });\n\n      // Use the new auto-import function that detects format\n      const result = await autoImportData(importDataValue, mappedGroups, {\n        locale: settings.locale || 'en',\n        mergeStrategy,\n      });\n\n      setImportResult(result);\n\n      if (result.success) {\n        // Submit custom actions for tracking if tiles were imported\n        if (result.importedTiles > 0) {\n          const customTilesFromImport = await import('@/stores/customTiles').then((module) =>\n            module.getTiles({ isCustom: 1 })\n          );\n\n          // Submit the most recent tiles (simplified approach)\n          customTilesFromImport.slice(-result.importedTiles).forEach(async (record) => {\n            submitCustomAction(`${record.group} - ${record.intensity}`, record.action);\n          });\n        }\n\n        let message: string = t('importMessages.importSuccess');\n        if (result.importedGroups > 0) {\n          message += ` ${t('importMessages.importedGroups', { count: result.importedGroups })}`;\n        }\n        if (result.importedTiles > 0) {\n          message += ` ${t('importMessages.importedTiles', { count: result.importedTiles })}`;\n        }\n\n        setSubmitMessage({\n          type: 'success',\n          message,\n        });\n\n        // Refresh the export data to show the new content\n        await exportData();\n      } else {\n        setSubmitMessage({\n          type: 'error',\n          message: t('errors.importFailed', { errors: result.errors.join(', ') }),\n        });\n      }\n    } catch (error: any) {\n      console.error('Import error:', error);\n      setSubmitMessage({\n        type: 'error',\n        message: t('errors.importFailed', { errors: error.message || error }),\n      });\n      setImportResult(null);\n    }\n  }\n\n  // Load available groups when component opens\n  const loadAvailableGroups = useCallback(async () => {\n    try {\n      const groups = await getAvailableGroupsForExport(settings.locale || 'en');\n      setAvailableGroups(groups);\n    } catch (error) {\n      console.error('Error loading available groups:', error);\n    }\n  }, [settings.locale]);\n\n  useEffect(() => {\n    if (expanded === 'ctImport') {\n      loadAvailableGroups();\n      exportData();\n    }\n  }, [expanded, customTiles, exportData, loadAvailableGroups]);\n\n  return (\n    <Accordion\n      expanded={expanded === 'ctImport'}\n      onChange={handleChange('ctImport')}\n      className=\"about-accordion\"\n    >\n      <AccordionSummary aria-controls=\"ctImport-content\" id=\"ctImport-header\">\n        <Typography className=\"accordion-title\">\n          <Trans i18nKey=\"importExport\" />\n        </Typography>\n      </AccordionSummary>\n      <AccordionDetails>\n        <Typography variant=\"body1\" sx={{ mb: 2 }}>\n          <Trans i18nKey=\"ctImportDescription\" />\n        </Typography>\n\n        {/* Compact Select Box Layout */}\n        <Box\n          sx={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            gap: 2,\n            mb: 2,\n            '& .MuiFormControl-root': {\n              minWidth: 150,\n              flex: '1 1 auto',\n            },\n          }}\n        >\n          {/* Export Format Selection */}\n          <FormControl size=\"small\">\n            <InputLabel>{t('labels.exportFormat')}</InputLabel>\n            <Select\n              value={exportFormat}\n              onChange={(e) => setExportFormat(e.target.value as 'clean' | 'legacy')}\n              label={t('labels.exportFormat')}\n            >\n              <MenuItem value=\"clean\">{t('exportFormat.clean')}</MenuItem>\n              <MenuItem value=\"legacy\">{t('exportFormat.legacy')}</MenuItem>\n            </Select>\n          </FormControl>\n\n          {/* Export Scope Selection */}\n          {exportFormat === 'clean' && (\n            <FormControl size=\"small\">\n              <InputLabel>{t('labels.exportScope')}</InputLabel>\n              <Select\n                value={exportScope}\n                onChange={(e) => {\n                  setExportScope(e.target.value as 'all' | 'single' | 'default');\n                  // Reset selection when scope changes\n                  setSingleGroup('');\n                }}\n                label={t('labels.exportScope')}\n              >\n                <MenuItem value=\"all\">{t('exportScope.all')}</MenuItem>\n                <MenuItem value=\"default\">{t('exportScope.default')}</MenuItem>\n                <MenuItem value=\"single\">{t('exportScope.single')}</MenuItem>\n              </Select>\n            </FormControl>\n          )}\n\n          {/* Import Merge Strategy */}\n          <FormControl size=\"small\">\n            <InputLabel>{t('labels.importStrategy')}</InputLabel>\n            <Select\n              value={mergeStrategy}\n              onChange={(e) => setMergeStrategy(e.target.value as 'skip' | 'overwrite' | 'rename')}\n              label={t('labels.importStrategy')}\n            >\n              <MenuItem value=\"skip\">{t('importStrategy.skip')}</MenuItem>\n              <MenuItem value=\"overwrite\">{t('importStrategy.overwrite')}</MenuItem>\n              <MenuItem value=\"rename\">{t('importStrategy.rename')}</MenuItem>\n            </Select>\n          </FormControl>\n        </Box>\n\n        {/* Single Group Selection - Only show when needed */}\n        {exportFormat === 'clean' && exportScope === 'single' && (\n          <Box sx={{ mb: 2 }}>\n            <FormControl size=\"small\" fullWidth>\n              <InputLabel>{t('labels.selectGroup')}</InputLabel>\n              <Select\n                value={singleGroup}\n                onChange={(e) => setSingleGroup(e.target.value)}\n                label={t('labels.selectGroup')}\n              >\n                {availableGroups.map((group) => (\n                  <MenuItem key={group.name} value={group.name}>\n                    {group.label} ({group.tileCount} tiles)\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Box>\n        )}\n\n        <Box component=\"form\" method=\"post\" ref={formData}>\n          <TextField\n            id=\"importData\"\n            name=\"importData\"\n            multiline\n            required\n            fullWidth\n            rows={6}\n            sx={{ pb: 2 }}\n            value={inputValue}\n            onChange={(event) => setInputValue(event.target.value)}\n            placeholder={\n              exportFormat === 'clean'\n                ? t('placeholder.cleanFormat')\n                : t('placeholder.legacyFormat')\n            }\n            InputProps={{\n              endAdornment: <CopyToClipboard text={inputValue} />,\n              sx: { alignItems: 'flex-start' },\n            }}\n          />\n\n          {/* Import Result Display */}\n          {importResult && (\n            <Alert\n              severity={importResult.success ? 'success' : 'error'}\n              sx={{ mb: 2 }}\n              onClose={() => setImportResult(null)}\n            >\n              <Typography variant=\"body2\">\n                <strong>\n                  <Trans i18nKey=\"importResults.title\" />\n                </strong>\n              </Typography>\n              {importResult.importedGroups > 0 && (\n                <Typography variant=\"body2\">\n                  •{' '}\n                  <Trans\n                    i18nKey=\"importResults.groupsImported\"\n                    values={{ count: importResult.importedGroups }}\n                  />\n                </Typography>\n              )}\n              {importResult.importedTiles > 0 && (\n                <Typography variant=\"body2\">\n                  •{' '}\n                  <Trans\n                    i18nKey=\"importResults.tilesImported\"\n                    values={{ count: importResult.importedTiles }}\n                  />\n                </Typography>\n              )}\n              {importResult.warnings.length > 0 && (\n                <Box sx={{ mt: 1 }}>\n                  <Typography variant=\"body2\" color=\"warning.main\">\n                    <strong>\n                      <Trans i18nKey=\"importResults.warnings\" />\n                    </strong>\n                  </Typography>\n                  {importResult.warnings.map((warning, index) => (\n                    <Typography key={index} variant=\"body2\" color=\"warning.main\">\n                      • {warning}\n                    </Typography>\n                  ))}\n                </Box>\n              )}\n              {importResult.errors.length > 0 && (\n                <Box sx={{ mt: 1 }}>\n                  <Typography variant=\"body2\" color=\"error.main\">\n                    <strong>\n                      <Trans i18nKey=\"importResults.errors\" />\n                    </strong>\n                  </Typography>\n                  {importResult.errors.map((error, index) => (\n                    <Typography key={index} variant=\"body2\" color=\"error.main\">\n                      • {error}\n                    </Typography>\n                  ))}\n                </Box>\n              )}\n            </Alert>\n          )}\n\n          <Button fullWidth variant=\"contained\" type=\"button\" onClick={() => importTiles(formData)}>\n            <Trans i18nKey=\"import\" />\n          </Button>\n        </Box>\n\n        {/* Format Guide - Collapsed by default */}\n        {exportFormat === 'clean' && (\n          <Accordion sx={{ mt: 2 }} className=\"about-accordion\">\n            <AccordionSummary>\n              <Typography variant=\"subtitle2\" className=\"accordion-title\">\n                <Trans i18nKey=\"formatGuide.title\" />\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Typography variant=\"body2\" sx={{ mb: 2 }}>\n                <Trans i18nKey=\"formatGuide.description\" />\n              </Typography>\n\n              <Typography variant=\"body2\" sx={{ mb: 1, fontWeight: 'bold' }}>\n                <Trans i18nKey=\"formatGuide.keySections\" />\n              </Typography>\n              <Typography variant=\"body2\" component=\"div\" sx={{ mb: 2, ml: 2 }}>\n                <Trans\n                  i18nKey=\"formatGuide.keySectionsContent\"\n                  components={{\n                    strong1: <strong />,\n                    strong2: <strong />,\n                    br: <br />,\n                  }}\n                />\n              </Typography>\n\n              <Typography variant=\"body2\" sx={{ mb: 1, fontWeight: 'bold' }}>\n                <Trans i18nKey=\"formatGuide.manualEditing\" />\n              </Typography>\n              <Typography variant=\"body2\" component=\"div\" sx={{ mb: 2, ml: 2 }}>\n                <Trans\n                  i18nKey=\"formatGuide.manualEditingContent\"\n                  components={{\n                    br: <br />,\n                  }}\n                />\n              </Typography>\n\n              <Typography variant=\"body2\" sx={{ mb: 1, fontWeight: 'bold' }}>\n                <Trans i18nKey=\"formatGuide.customTilesFormat\" />\n              </Typography>\n              <Typography variant=\"body2\" component=\"div\" sx={{ ml: 2 }}>\n                <Trans\n                  i18nKey=\"formatGuide.customTilesFormatContent\"\n                  components={{\n                    br: <br />,\n                    code1: <code />,\n                    code2: <code />,\n                  }}\n                />\n              </Typography>\n            </AccordionDetails>\n          </Accordion>\n        )}\n      </AccordionDetails>\n    </Accordion>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport {\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Box,\n  Typography,\n  Chip,\n  CircularProgress,\n} from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport { CustomGroupSelectorProps, CustomGroupPull } from '@/types/customGroups';\nimport { getAllAvailableGroups } from '@/stores/customGroups';\n\nexport default function CustomGroupSelector({\n  value,\n  onChange,\n  locale,\n  gameMode,\n  includeDefault = true,\n  disabled = false,\n  refreshTrigger = 0,\n}: CustomGroupSelectorProps) {\n  const { t } = useTranslation();\n  const [groups, setGroups] = useState<CustomGroupPull[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  // Load available groups\n  useEffect(() => {\n    const loadGroups = async () => {\n      setLoading(true);\n      try {\n        // Migration is handled at app level - no need to check here\n\n        // Get all available groups for the locale/gameMode\n        const availableGroups = await getAllAvailableGroups(locale, gameMode);\n\n        // Filter by includeDefault if needed\n        const filteredGroups = includeDefault\n          ? availableGroups\n          : availableGroups.filter((group) => !group.isDefault);\n\n        setGroups(filteredGroups);\n      } catch (error) {\n        console.error('Error loading custom groups:', error);\n        setGroups([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadGroups();\n  }, [locale, gameMode, includeDefault, refreshTrigger]);\n\n  if (loading) {\n    return (\n      <FormControl fullWidth disabled>\n        <InputLabel>{t('customGroups.loadingGroups')}</InputLabel>\n        <Select value=\"\">\n          <MenuItem value=\"\">\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n              <CircularProgress size={16} />\n              <span>{t('customGroups.loadingGroups')}</span>\n            </Box>\n          </MenuItem>\n        </Select>\n      </FormControl>\n    );\n  }\n\n  return (\n    <Box>\n      <FormControl fullWidth disabled={disabled}>\n        <InputLabel id=\"group-label\">{t('group')}</InputLabel>\n        <Select\n          labelId=\"group-label\"\n          value={value}\n          onChange={(e) => onChange(e.target.value)}\n          label={t('group')}\n        >\n          {groups.length === 0 ? (\n            <MenuItem value=\"\" disabled>\n              <Typography color=\"text.secondary\">\n                {t('customGroups.noGroupsAvailable', { locale, gameMode })}\n              </Typography>\n            </MenuItem>\n          ) : (\n            groups.map((group) => (\n              <MenuItem key={group.id} value={group.name}>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                  <span>{group.label}</span>\n                  {group.isDefault && <Chip label={t('default')} size=\"small\" variant=\"outlined\" />}\n                </Box>\n              </MenuItem>\n            ))\n          )}\n        </Select>\n      </FormControl>\n    </Box>\n  );\n}\n","import { useState, useEffect, useMemo } from 'react';\nimport {\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Box,\n  Typography,\n  CircularProgress,\n} from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport { IntensitySelectorProps, CustomGroupIntensity } from '@/types/customGroups';\nimport { getGroupIntensities } from '@/stores/customGroups';\n\nexport default function IntensitySelector({\n  groupName,\n  value,\n  onChange,\n  locale,\n  gameMode,\n  disabled = false,\n}: IntensitySelectorProps) {\n  const { t } = useTranslation();\n  const [intensities, setIntensities] = useState<CustomGroupIntensity[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  // Load intensities when group changes\n  useEffect(() => {\n    const loadIntensities = async () => {\n      if (!groupName) {\n        setIntensities([]);\n        return;\n      }\n\n      setLoading(true);\n      try {\n        const groupIntensities = await getGroupIntensities(groupName, locale, gameMode);\n        setIntensities(groupIntensities);\n      } catch (error) {\n        console.error('Error loading group intensities:', error);\n        setIntensities([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadIntensities();\n  }, [groupName, locale, gameMode]);\n\n  // Memoize sorted intensities to prevent re-sorting on every render\n  const sortedIntensities = useMemo(() => {\n    return intensities.sort((a, b) => a.value - b.value);\n  }, [intensities]);\n\n  // Validate current value when intensities change\n  useEffect(() => {\n    if (intensities.length > 0 && value && !intensities.some((i) => i.value === value)) {\n      const firstIntensity = sortedIntensities[0];\n      if (firstIntensity) {\n        onChange(firstIntensity.value);\n      }\n    }\n  }, [intensities, value, onChange, sortedIntensities]);\n\n  if (!groupName) {\n    return (\n      <FormControl fullWidth disabled>\n        <InputLabel>{t('intensity')}</InputLabel>\n        <Select value=\"\">\n          <MenuItem value=\"\" disabled>\n            <Typography color=\"text.secondary\">{t('customGroups.selectGroupFirst')}</Typography>\n          </MenuItem>\n        </Select>\n      </FormControl>\n    );\n  }\n\n  if (loading) {\n    return (\n      <FormControl fullWidth disabled>\n        <InputLabel>{t('customGroups.loadingIntensities')}</InputLabel>\n        <Select value=\"\">\n          <MenuItem value=\"\">\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n              <CircularProgress size={16} />\n              <span>{t('customGroups.loadingIntensities')}</span>\n            </Box>\n          </MenuItem>\n        </Select>\n      </FormControl>\n    );\n  }\n\n  if (intensities.length === 0) {\n    return (\n      <FormControl fullWidth disabled>\n        <InputLabel>{t('intensity')}</InputLabel>\n        <Select value=\"\">\n          <MenuItem value=\"\" disabled>\n            <Typography color=\"text.secondary\">\n              {t('customGroups.noIntensitiesAvailable', { groupName })}\n            </Typography>\n          </MenuItem>\n        </Select>\n      </FormControl>\n    );\n  }\n\n  return (\n    <Box>\n      <FormControl fullWidth disabled={disabled}>\n        <InputLabel>{t('intensity')}</InputLabel>\n        <Select\n          value={value || ''}\n          onChange={(e) => onChange(Number(e.target.value))}\n          label={t('intensity')}\n        >\n          {sortedIntensities.map((intensity) => (\n            <MenuItem key={intensity.id} value={intensity.value}>\n              {intensity.label}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </Box>\n  );\n}\n","// Custom group and intensity management type definitions\nimport type { GroupType } from '@/services/validationService';\n\n// Individual intensity level within a custom group\nexport interface CustomGroupIntensity {\n  id: string;\n  label: string; // User-defined label (e.g., \"Light\", \"Medium\", \"Intense\")\n  value: number; // Numeric value (1, 2, 3, 4, etc.)\n  isDefault: boolean; // Whether this is a system default intensity\n}\n\n// Base custom group interface\nexport interface CustomGroupBase {\n  name: string; // Unique identifier/key for the group\n  label: string; // Display label for the group\n  intensities: CustomGroupIntensity[];\n  type?: GroupType; // Action type (e.g., 'solo', 'consumption', 'action')\n  isDefault?: boolean; // Whether this is a system default group\n  locale?: string; // Locale this group belongs to\n  gameMode?: string; // Game mode this group applies to\n}\n\n// Custom group for database push operations (id is optional)\nexport interface CustomGroupPush extends CustomGroupBase {\n  id?: string;\n}\n\n// Custom group for database pull operations (id is required)\nexport interface CustomGroupPull extends CustomGroupBase {\n  id: string;\n  createdAt: Date;\n  updatedAt: Date;\n  isDefault: boolean; // Required in pull operations\n  locale: string; // Required in pull operations\n  gameMode: string; // Required in pull operations\n}\n\n// Generic custom group type for most use cases\nexport type CustomGroup = CustomGroupPush | CustomGroupPull;\n\n// Validation result interface\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings?: string[];\n}\n\n// Default intensity templates\nexport interface IntensityTemplate {\n  name: string;\n  intensities: Omit<CustomGroupIntensity, 'id'>[];\n}\n\n// Export data structure for import/export functionality\nexport interface CustomGroupExportData {\n  customGroups: CustomGroup[];\n  version: string;\n  exportedAt: Date;\n  locale: string;\n  gameMode: string;\n}\n\n// Component prop interfaces\nexport interface CustomGroupDialogProps {\n  open: boolean;\n  onClose: () => void;\n  onGroupCreated?: (group: CustomGroupPull) => void;\n  onGroupUpdated?: (group: CustomGroupPull | null) => void;\n  editingGroup?: CustomGroupPull | null;\n  locale: string;\n  gameMode: string;\n}\n\nexport interface CustomGroupSelectorProps {\n  value: string;\n  onChange: (groupName: string) => void;\n  locale: string;\n  gameMode: string;\n  includeDefault?: boolean;\n  disabled?: boolean;\n  refreshTrigger?: number;\n}\n\nexport interface IntensitySelectorProps {\n  groupName: string;\n  value: number;\n  onChange: (intensity: number) => void;\n  locale: string;\n  gameMode: string;\n  disabled?: boolean;\n}\n\n// Filters for querying custom groups\nexport interface CustomGroupFilters {\n  locale?: string;\n  gameMode?: string;\n  isDefault?: boolean;\n  name?: string;\n}\n\n// Default intensity templates for common use cases\nexport const DEFAULT_INTENSITY_TEMPLATES: IntensityTemplate[] = [\n  {\n    name: 'Basic (1-4)',\n    intensities: [\n      { label: 'intensityLabels.light', value: 1, isDefault: true },\n      { label: 'intensityLabels.medium', value: 2, isDefault: true },\n      { label: 'intensityLabels.intense', value: 3, isDefault: true },\n      { label: 'intensityLabels.extreme', value: 4, isDefault: true },\n    ],\n  },\n  {\n    name: 'Simple (1-3)',\n    intensities: [\n      { label: 'intensityLabels.beginner', value: 1, isDefault: true },\n      { label: 'intensityLabels.intermediate', value: 2, isDefault: true },\n      { label: 'intensityLabels.advanced', value: 3, isDefault: true },\n    ],\n  },\n  {\n    name: 'Extended (1-5)',\n    intensities: [\n      { label: 'intensityLabels.veryLight', value: 1, isDefault: true },\n      { label: 'intensityLabels.light', value: 2, isDefault: true },\n      { label: 'intensityLabels.medium', value: 3, isDefault: true },\n      { label: 'intensityLabels.intense', value: 4, isDefault: true },\n      { label: 'intensityLabels.veryIntense', value: 5, isDefault: true },\n    ],\n  },\n];\n","import React, { useState, useEffect, useCallback } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  Box,\n  Typography,\n  IconButton,\n  Alert,\n  MenuItem,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  Divider,\n  Tab,\n  Tabs,\n} from '@mui/material';\nimport { Add as AddIcon, Delete as DeleteIcon, Edit as EditIcon } from '@mui/icons-material';\nimport { nanoid } from 'nanoid';\nimport { useTranslation } from 'react-i18next';\nimport {\n  CustomGroupDialogProps,\n  CustomGroupBase,\n  CustomGroupIntensity,\n  CustomGroupPull,\n  DEFAULT_INTENSITY_TEMPLATES,\n  ValidationResult,\n} from '@/types/customGroups';\nimport {\n  validateCustomGroup,\n  validateGroupLabel,\n  getValidationConstants,\n  type GroupType,\n} from '@/services/validationService';\nimport {\n  addCustomGroup,\n  updateCustomGroup,\n  deleteCustomGroup,\n  getAllAvailableGroups,\n} from '@/stores/customGroups';\nimport { countTilesByGroup, deleteCustomTilesByGroup } from '@/stores/customTiles';\n\n// Helper function to find matching template index\nconst findMatchingTemplateIndex = (intensities: CustomGroupIntensity[]) => {\n  const matchingTemplateIndex = DEFAULT_INTENSITY_TEMPLATES.findIndex(\n    (template) => template.intensities.length === intensities.length\n  );\n  return matchingTemplateIndex >= 0 ? matchingTemplateIndex : 1; // Default to Simple (1-3) template\n};\n\nexport default function CustomGroupDialog({\n  open,\n  onClose,\n  onGroupCreated,\n  onGroupUpdated,\n  editingGroup,\n  locale,\n  gameMode,\n}: CustomGroupDialogProps) {\n  const { t } = useTranslation();\n  const [selectedTab, setSelectedTab] = useState(0);\n  const [existingGroups, setExistingGroups] = useState<CustomGroupPull[]>([]);\n  const [loadingGroups, setLoadingGroups] = useState(true);\n  const [tileCounts, setTileCounts] = useState<Record<string, number>>({});\n  const validationConstants = getValidationConstants();\n\n  // Form state\n  const [label, setLabel] = useState('');\n  const [type, setType] = useState<string>('');\n  const [selectedTemplateIndex, setSelectedTemplateIndex] = useState(1); // Default to Simple (1-3) template\n  const [intensityLabels, setIntensityLabels] = useState<string[]>([\n    t('intensityLabels.beginner'),\n    t('intensityLabels.intermediate'),\n    t('intensityLabels.advanced'),\n  ]);\n  const [currentEditingGroup, setCurrentEditingGroup] = useState<CustomGroupPull | null>(null);\n\n  // UI state\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [validation, setValidation] = useState<ValidationResult>({ isValid: true, errors: [] });\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [pendingDeleteGroup, setPendingDeleteGroup] = useState<{\n    id: string;\n    name: string;\n    tileCount: number;\n  } | null>(null);\n  // UI state - removed expandedSection as we're no longer using accordions\n\n  // Reload groups and tile counts\n  const reloadGroupsAndCounts = useCallback(async () => {\n    try {\n      const groups = await getAllAvailableGroups(locale, gameMode);\n      const customGroups = groups.filter((group) => !group.isDefault);\n      setExistingGroups(customGroups);\n\n      // Load tile counts for each custom group\n      const counts: Record<string, number> = {};\n      await Promise.all(\n        customGroups.map(async (group) => {\n          counts[group.id] = await countTilesByGroup(group.name, locale, gameMode);\n        })\n      );\n      setTileCounts(counts);\n    } catch (error) {\n      console.error('Error reloading groups:', error);\n    }\n  }, [locale, gameMode]);\n\n  // Load existing groups\n  useEffect(() => {\n    const loadGroups = async () => {\n      if (!open) return;\n\n      setLoadingGroups(true);\n      try {\n        await reloadGroupsAndCounts();\n      } catch (error) {\n        console.error('Error loading groups:', error);\n      } finally {\n        setLoadingGroups(false);\n      }\n    };\n\n    loadGroups();\n  }, [open, locale, gameMode, reloadGroupsAndCounts]);\n\n  // Generate a unique name from label\n  const generateGroupName = (displayLabel: string): string => {\n    const sanitized = displayLabel\n      .toLowerCase()\n      .replace(/[^a-z0-9\\s]/g, '')\n      .replace(/\\s+/g, '_')\n      .substring(0, 20);\n    return sanitized || `group_${nanoid(6).toLowerCase()}`;\n  };\n\n  // Initialize form with editing group data or defaults\n  useEffect(() => {\n    if (editingGroup) {\n      setCurrentEditingGroup(editingGroup);\n      setLabel(editingGroup.label);\n      setType(editingGroup.type || '');\n      setIntensityLabels(editingGroup.intensities.map((i) => i.label));\n      // Find matching template or reset to default\n      setSelectedTemplateIndex(findMatchingTemplateIndex(editingGroup.intensities));\n    } else if (currentEditingGroup) {\n      // Keep current editing group if we're in edit mode\n      setLabel(currentEditingGroup.label);\n      setType(currentEditingGroup.type || '');\n      setIntensityLabels(currentEditingGroup.intensities.map((i) => i.label));\n      // Find matching template or reset to default\n      setSelectedTemplateIndex(findMatchingTemplateIndex(currentEditingGroup.intensities));\n    } else {\n      // Reset to defaults for new group\n      setCurrentEditingGroup(null);\n      setLabel('');\n      setType('');\n      setSelectedTemplateIndex(1); // Default to Simple (1-3) template\n      setIntensityLabels([\n        t('intensityLabels.beginner'),\n        t('intensityLabels.intermediate'),\n        t('intensityLabels.advanced'),\n      ]);\n    }\n    setValidation({ isValid: true, errors: [] });\n  }, [editingGroup, currentEditingGroup, open, t]);\n\n  // Handle template selection\n  const handleTemplateChange = (templateIndex: number) => {\n    const template = DEFAULT_INTENSITY_TEMPLATES[templateIndex];\n    setSelectedTemplateIndex(templateIndex);\n    setIntensityLabels(template.intensities.map((i) => t(i.label)));\n  };\n\n  // Handle intensity label changes\n  const updateIntensityLabel = (index: number, label: string) => {\n    const newLabels = [...intensityLabels];\n    newLabels[index] = label;\n    setIntensityLabels(newLabels);\n  };\n\n  // Add new intensity\n  const addIntensity = () => {\n    if (intensityLabels.length >= validationConstants.MAX_INTENSITIES_COUNT) {\n      return;\n    }\n\n    setIntensityLabels([\n      ...intensityLabels,\n      t('customGroups.levelLabel', { level: intensityLabels.length + 1 }),\n    ]);\n  };\n\n  // Remove intensity\n  const removeIntensity = (index: number) => {\n    if (intensityLabels.length <= validationConstants.MIN_INTENSITIES_COUNT) {\n      return;\n    }\n    const newLabels = intensityLabels.filter((_, i) => i !== index);\n    setIntensityLabels(newLabels);\n  };\n\n  // Validate form in real-time\n  useEffect(() => {\n    const validateForm = async () => {\n      if (!label.trim() && !type && intensityLabels.length === 0) {\n        setValidation({ isValid: true, errors: [] });\n        return;\n      }\n\n      // Validate type if provided\n      const errors: string[] = [];\n\n      if (type && !validationConstants.VALID_GROUP_TYPES.includes(type as GroupType)) {\n        errors.push(\n          t('typeValidationError', { types: validationConstants.VALID_GROUP_TYPES.join(', ') })\n        );\n      }\n\n      if (label.trim() && !type) {\n        errors.push(t('typeRequiredError'));\n      }\n\n      if (errors.length > 0) {\n        setValidation({ isValid: false, errors });\n        return;\n      }\n\n      // Generate intensities from labels\n      const intensities: CustomGroupIntensity[] = intensityLabels.map((labelText, index) => ({\n        id: nanoid(),\n        label: labelText,\n        value: index + 1,\n        isDefault: false,\n      }));\n\n      const groupData: CustomGroupBase = {\n        name: currentEditingGroup ? currentEditingGroup.name : generateGroupName(label),\n        label: label.trim(),\n        intensities,\n        type: (type as GroupType) || undefined,\n        locale,\n        gameMode,\n        isDefault: false,\n      };\n\n      const result = await validateCustomGroup(groupData, currentEditingGroup?.id);\n      setValidation(result);\n    };\n\n    validateForm();\n  }, [\n    label,\n    type,\n    intensityLabels,\n    locale,\n    gameMode,\n    currentEditingGroup,\n    t,\n    validationConstants.VALID_GROUP_TYPES,\n  ]);\n\n  // Handle editing an existing group\n  const handleEditGroup = (group: CustomGroupPull) => {\n    setCurrentEditingGroup(group);\n    setLabel(group.label);\n    setIntensityLabels(group.intensities.map((i) => i.label));\n    setSelectedTab(1); // Switch to create/edit tab\n  };\n\n  // Handle deleting a group\n  const handleDeleteGroup = async (groupId: string) => {\n    const group = existingGroups.find((g) => g.id === groupId);\n    if (!group) return;\n\n    const tileCount = tileCounts[groupId] || 0;\n    setPendingDeleteGroup({ id: groupId, name: group.label, tileCount });\n    setDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = async () => {\n    if (!pendingDeleteGroup) return;\n\n    const { id, tileCount } = pendingDeleteGroup;\n    const group = existingGroups.find((g) => g.id === id);\n    if (!group) return;\n\n    try {\n      // First delete all associated custom tiles\n      if (tileCount > 0) {\n        await deleteCustomTilesByGroup(group.name, locale, gameMode);\n      }\n\n      // Then delete the group\n      await deleteCustomGroup(id);\n\n      // Reload groups and tile counts\n      await reloadGroupsAndCounts();\n\n      // Notify parent if needed\n      onGroupUpdated?.(null); // Trigger refresh in parent\n    } catch (error) {\n      console.error('Error deleting group:', error);\n    } finally {\n      setDeleteDialogOpen(false);\n      setPendingDeleteGroup(null);\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async () => {\n    if (!validation.isValid || isSubmitting) {\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      // Generate intensities from labels with auto-incrementing values\n      const intensities: CustomGroupIntensity[] = intensityLabels.map((labelText, index) => ({\n        id: nanoid(),\n        label: labelText,\n        value: index + 1,\n        isDefault: false,\n      }));\n\n      const groupData: CustomGroupBase = {\n        name: currentEditingGroup ? currentEditingGroup.name : generateGroupName(label),\n        label: label.trim(),\n        intensities,\n        type: (type as GroupType) || undefined,\n        locale,\n        gameMode,\n        isDefault: false,\n      };\n\n      if (currentEditingGroup) {\n        // Update existing group\n        await updateCustomGroup(currentEditingGroup.id, groupData);\n        onGroupUpdated?.(currentEditingGroup);\n      } else {\n        // Create new group\n        const groupId = await addCustomGroup(groupData);\n        if (groupId) {\n          onGroupCreated?.({\n            ...groupData,\n            id: groupId,\n            createdAt: new Date(),\n            updatedAt: new Date(),\n            isDefault: false,\n            locale,\n            gameMode,\n          });\n        }\n      }\n\n      resetEditingState();\n      onClose();\n    } catch (error) {\n      console.error('Error saving custom group:', error);\n      setValidation({\n        isValid: false,\n        errors: [t('failedToSaveGroup', { error })],\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Reset editing state when switching tabs or closing\n  const resetEditingState = () => {\n    setCurrentEditingGroup(null);\n    setLabel('');\n    setType('');\n    setSelectedTemplateIndex(1); // Reset to Simple (1-3) template\n    setIntensityLabels([\n      t('intensityLabels.beginner'),\n      t('intensityLabels.intermediate'),\n      t('intensityLabels.advanced'),\n    ]);\n    setValidation({ isValid: true, errors: [] });\n  };\n\n  return (\n    <>\n      <Dialog\n        open={open}\n        onClose={onClose}\n        maxWidth=\"md\"\n        fullWidth\n        PaperProps={{ sx: { minHeight: '600px' } }}\n      >\n        <DialogTitle>\n          {t('customGroups.manageCustomGroups')}\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n            {t('customGroups.createNewGroupsDescription')}\n          </Typography>\n\n          {/* Tabs */}\n          <Tabs\n            value={selectedTab}\n            onChange={(_, newValue) => {\n              setSelectedTab(newValue);\n              if (newValue === 1 && !currentEditingGroup) {\n                // Switching to Create New tab - reset editing state\n                resetEditingState();\n              }\n            }}\n            sx={{ mt: 2, borderBottom: 1, borderColor: 'divider' }}\n          >\n            <Tab label={t('customGroups.existingGroups')} />\n            <Tab\n              label={\n                currentEditingGroup ? t('customGroups.editGroup') : t('customGroups.createNew')\n              }\n            />\n          </Tabs>\n        </DialogTitle>\n\n        <DialogContent dividers>\n          {/* Existing Groups Tab */}\n          {selectedTab === 0 && (\n            <Box>\n              {loadingGroups ? (\n                <Typography>{t('Loading groups...')}</Typography>\n              ) : existingGroups.length === 0 ? (\n                <Typography color=\"text.secondary\" sx={{ textAlign: 'center', py: 4 }}>\n                  {t('customGroups.noCustomGroupsFound')}\n                </Typography>\n              ) : (\n                <List>\n                  {existingGroups.map((group, index) => (\n                    <React.Fragment key={group.id}>\n                      <ListItem>\n                        <ListItemText\n                          primary={group.label}\n                          secondary={\n                            <Box component=\"span\" sx={{ display: 'block' }}>\n                              <Typography\n                                variant=\"body2\"\n                                color=\"text.secondary\"\n                                component=\"span\"\n                                sx={{ display: 'block' }}\n                              >\n                                {t('customGroups.intensityLevelsCount', {\n                                  count: group.intensities.length,\n                                })}\n                                : {group.intensities.map((i) => i.label).join(', ')}\n                              </Typography>\n                              <Typography\n                                variant=\"body2\"\n                                color=\"text.secondary\"\n                                component=\"span\"\n                                sx={{ display: 'block', mt: 0.5 }}\n                              >\n                                {t('customGroups.customTilesCount', {\n                                  count: tileCounts[group.id] || 0,\n                                })}\n                              </Typography>\n                            </Box>\n                          }\n                        />\n                        <ListItemSecondaryAction>\n                          <IconButton\n                            edge=\"end\"\n                            aria-label=\"edit\"\n                            onClick={() => handleEditGroup(group)}\n                            sx={{ mr: 1 }}\n                          >\n                            <EditIcon />\n                          </IconButton>\n                          <IconButton\n                            edge=\"end\"\n                            aria-label=\"delete\"\n                            onClick={() => handleDeleteGroup(group.id)}\n                            color=\"error\"\n                          >\n                            <DeleteIcon />\n                          </IconButton>\n                        </ListItemSecondaryAction>\n                      </ListItem>\n                      {index < existingGroups.length - 1 && <Divider />}\n                    </React.Fragment>\n                  ))}\n                </List>\n              )}\n            </Box>\n          )}\n\n          {/* Create/Edit Group Tab */}\n          {selectedTab === 1 && (\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>\n              {/* Validation Errors */}\n              {!validation.isValid && (\n                <Alert severity=\"error\">\n                  {validation.errors.map((error, index) => (\n                    <div key={index}>{error}</div>\n                  ))}\n                </Alert>\n              )}\n\n              {/* Group Information Header */}\n              <Box\n                sx={{\n                  p: 2,\n                  bgcolor: 'background.paper',\n                  borderRadius: 1,\n                  border: '1px solid',\n                  borderColor: 'divider',\n                }}\n              >\n                <Typography variant=\"h6\" sx={{ mb: 2 }}>\n                  {t('customGroups.groupInformation')}\n                </Typography>\n\n                <TextField\n                  label={t('customGroups.groupLabel')}\n                  value={label}\n                  onChange={(e) => setLabel(e.target.value)}\n                  placeholder=\"e.g., My Custom Group\"\n                  helperText={t('customGroups.groupLabelHelp', {\n                    maxLength: validationConstants.MAX_GROUP_LABEL_LENGTH,\n                  })}\n                  fullWidth\n                  required\n                  error={label.trim().length > 0 && !validateGroupLabel(label).isValid}\n                  sx={{ mb: 2 }}\n                />\n\n                <TextField\n                  select\n                  label={t('customGroups.groupType')}\n                  value={type}\n                  onChange={(e) => setType(e.target.value)}\n                  helperText={t('customGroups.groupTypeHelp')}\n                  fullWidth\n                  required\n                  error={label.trim().length > 0 && !type}\n                  sx={{ mb: 2 }}\n                >\n                  <MenuItem value=\"\">\n                    <em>{t('groupTypes.selectType')}</em>\n                  </MenuItem>\n                  <MenuItem value=\"solo\">{t('groupTypes.solo')}</MenuItem>\n                  <MenuItem value=\"foreplay\">{t('groupTypes.foreplay')}</MenuItem>\n                  <MenuItem value=\"sex\">{t('groupTypes.sex')}</MenuItem>\n                  <MenuItem value=\"consumption\">{t('groupTypes.consumption')}</MenuItem>\n                </TextField>\n\n                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    <strong>{t('customGroups.locale')}</strong> {locale} |{' '}\n                    <strong>{t('customGroups.gameMode')}</strong> {gameMode}\n                  </Typography>\n                  {currentEditingGroup ? (\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      <strong>{t('customGroups.internalId')}</strong> {currentEditingGroup.name}{' '}\n                      (locked)\n                    </Typography>\n                  ) : (\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      <strong>{t('customGroups.internalId')}</strong>{' '}\n                      {label ? generateGroupName(label) : t('customGroups.autoGenerated')}\n                    </Typography>\n                  )}\n                </Box>\n              </Box>\n\n              {/* Quick Templates - Compact Inline */}\n              <Box\n                sx={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  gap: 2,\n                  p: 2,\n                  bgcolor: 'action.hover',\n                  borderRadius: 1,\n                }}\n              >\n                <Typography variant=\"body2\" sx={{ fontWeight: 'medium', minWidth: 'auto' }}>\n                  {t('customGroups.quickStart')}\n                </Typography>\n                <TextField\n                  select\n                  value={selectedTemplateIndex}\n                  onChange={(e) => handleTemplateChange(Number(e.target.value))}\n                  size=\"small\"\n                  sx={{ minWidth: 200 }}\n                  label={t('customGroups.chooseTemplate')}\n                >\n                  {DEFAULT_INTENSITY_TEMPLATES.map((template, index) => (\n                    <MenuItem key={index} value={index}>\n                      {template.name === 'Basic (1-4)'\n                        ? t('templateBasic')\n                        : template.name === 'Simple (1-3)'\n                          ? t('templateSimple')\n                          : template.name === 'Extended (1-5)'\n                            ? t('templateExtended')\n                            : template.name}\n                    </MenuItem>\n                  ))}\n                </TextField>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ fontSize: '0.75rem' }}>\n                  {t('customGroups.selectTemplateDescription')}\n                </Typography>\n              </Box>\n\n              {/* Intensity Labels - Main Content Area */}\n              <Box>\n                <Typography variant=\"h6\" sx={{ mb: 2 }}>\n                  {t('customGroups.intensityLabels')} ({intensityLabels.length}/\n                  {validationConstants.MAX_INTENSITIES_COUNT})\n                </Typography>\n\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                  {t('customGroups.customizeIntensityDescription')}\n                </Typography>\n\n                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1.5 }}>\n                  {intensityLabels.map((labelText, index) => (\n                    <Box key={index} sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                      <Typography\n                        variant=\"body2\"\n                        sx={{ minWidth: '30px', fontWeight: 'bold', color: 'primary.main' }}\n                      >\n                        {index + 1}\n                      </Typography>\n                      <TextField\n                        label={t('customGroups.levelInputLabel', { level: index + 1 })}\n                        value={labelText}\n                        onChange={(e) => updateIntensityLabel(index, e.target.value)}\n                        size=\"small\"\n                        sx={{ flex: 1 }}\n                        inputProps={{ maxLength: validationConstants.MAX_INTENSITY_LABEL_LENGTH }}\n                      />\n                      <IconButton\n                        onClick={() => removeIntensity(index)}\n                        disabled={\n                          intensityLabels.length <= validationConstants.MIN_INTENSITIES_COUNT\n                        }\n                        color=\"error\"\n                        size=\"small\"\n                      >\n                        <DeleteIcon />\n                      </IconButton>\n                    </Box>\n                  ))}\n\n                  <Button\n                    startIcon={<AddIcon />}\n                    onClick={addIntensity}\n                    disabled={intensityLabels.length >= validationConstants.MAX_INTENSITIES_COUNT}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    sx={{ alignSelf: 'flex-start', mt: 1 }}\n                  >\n                    {t('customGroups.addIntensityLevel')}\n                  </Button>\n                </Box>\n              </Box>\n            </Box>\n          )}\n        </DialogContent>\n\n        <DialogActions>\n          <Button onClick={onClose} disabled={isSubmitting}>\n            {t('cancel')}\n          </Button>\n          <Button\n            onClick={handleSubmit}\n            variant=\"contained\"\n            disabled={!validation.isValid || isSubmitting}\n          >\n            {isSubmitting\n              ? t('customGroups.saving')\n              : currentEditingGroup\n                ? t('customGroups.updateGroup')\n                : t('customGroups.createGroup')}\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>\n        <DialogTitle>{t('customGroups.confirmDelete')}</DialogTitle>\n        <DialogContent>\n          <Typography>\n            {(pendingDeleteGroup?.tileCount ?? 0) > 0\n              ? t('customGroups.deleteGroupWithTiles', {\n                  name: pendingDeleteGroup?.name,\n                  count: pendingDeleteGroup?.tileCount,\n                })\n              : t('customGroups.deleteGroupConfirm', { name: pendingDeleteGroup?.name })}\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDeleteDialogOpen(false)}>{t('cancel')}</Button>\n          <Button onClick={confirmDelete} color=\"error\" variant=\"contained\">\n            {t('delete')}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","import { Autocomplete, Box, Button, TextField, Typography } from '@mui/material';\nimport { submitCustomAction } from '@/services/firebase';\nimport { useEffect, useState, KeyboardEvent, FocusEvent, useCallback } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport Accordion from '@/components/Accordion';\nimport AccordionSummary from '@/components/Accordion/Summary';\nimport AccordionDetails from '@/components/Accordion/Details';\nimport CustomGroupSelector from '@/components/CustomGroupSelector';\nimport IntensitySelector from '@/components/IntensitySelector';\nimport CustomGroupDialog from '@/views/CustomGroupDialog';\nimport { addCustomTile, updateCustomTile } from '@/stores/customTiles';\nimport { useGameSettings } from '@/stores/settingsStore';\nimport { validateCustomTileWithGroups } from '@/services/validationService';\nimport { AddCustomTileProps, CustomTile } from '@/types/customTiles';\nimport { FormDataState } from '@/types/addCustomTile';\nimport { CustomGroupPull } from '@/types/customGroups';\n\nexport default function AddCustomTile({\n  setSubmitMessage,\n  boardUpdated,\n  customTiles,\n  mappedGroups: _mappedGroups,\n  expanded,\n  handleChange,\n  tagList,\n  updateTileId,\n  setUpdateTileId,\n}: AddCustomTileProps) {\n  const { t } = useTranslation();\n  const { settings } = useGameSettings();\n\n  const [formData, setFormData] = useState<FormDataState>({\n    gameMode: settings.gameMode || 'online',\n    group: '',\n    intensity: '',\n    action: '',\n    tags: [t('custom')],\n  });\n\n  // UI state for custom group management\n  const [groupDialogOpen, setGroupDialogOpen] = useState(false);\n  const [validationMessage, setValidationMessage] = useState('');\n  const [groupsRefreshTrigger, setGroupsRefreshTrigger] = useState(0);\n\n  // Migration is handled at app level - removed redundant migration call\n\n  // Validate form data with debouncing to prevent excessive re-renders\n  useEffect(() => {\n    const validateForm = async () => {\n      if (!formData.group || !formData.intensity || !formData.action) {\n        setValidationMessage('');\n        return;\n      }\n\n      try {\n        const validation = await validateCustomTileWithGroups(\n          {\n            group: formData.group,\n            intensity: Number(formData.intensity),\n            action: formData.action,\n            tags: formData.tags,\n            gameMode: formData.gameMode,\n            isCustom: 1,\n          },\n          settings.locale || 'en',\n          formData.gameMode\n        );\n\n        if (!validation.isValid) {\n          setValidationMessage(validation.errors.join(', '));\n        } else {\n          setValidationMessage('');\n        }\n      } catch (error) {\n        console.error('Error validating tile:', error);\n        setValidationMessage('');\n      }\n    };\n\n    // Debounce validation to prevent excessive calls while typing\n    // 300ms provides responsive feedback while avoiding excessive validation calls.\n    // This timing is optimal for the lightweight validation operations performed here.\n    const timeoutId = setTimeout(validateForm, 300);\n    return () => clearTimeout(timeoutId);\n  }, [\n    formData.group,\n    formData.intensity,\n    formData.action,\n    formData.gameMode,\n    formData.tags,\n    settings.locale,\n  ]);\n\n  // Handle editing a tile\n  useEffect(() => {\n    const tilesArray = Array.isArray(customTiles) ? customTiles : [];\n    const editTile = tilesArray.find(({ id }) => id === updateTileId);\n\n    if (editTile) {\n      // Get the game mode from the tile being edited\n      const tileGameMode = editTile.gameMode || settings.gameMode;\n\n      setFormData({\n        gameMode: tileGameMode,\n        group: editTile.group || '',\n        intensity: editTile.intensity || '',\n        action: editTile.action || '',\n        tags: editTile.tags || [t('custom')],\n      });\n    } else {\n      // For new tiles, just set the game mode to the current setting\n      setFormData((prev) => ({\n        ...prev,\n        gameMode: settings.gameMode,\n      }));\n    }\n  }, [updateTileId, settings.gameMode, customTiles, t]);\n\n  function tileExists(\n    group: string,\n    intensity: string | number,\n    newAction: string\n  ): CustomTile | undefined {\n    const tilesArray = Array.isArray(customTiles) ? customTiles : [];\n    return tilesArray.find(\n      (tile) => tile.group === group && tile.intensity === intensity && tile.action === newAction\n    );\n  }\n\n  function clear(): void {\n    setUpdateTileId(null);\n    setFormData({\n      gameMode: settings.gameMode,\n      group: '',\n      intensity: '',\n      action: '',\n      tags: [t('custom')],\n    });\n    setValidationMessage('');\n  }\n\n  // Handle custom group creation\n  const handleGroupCreated = (group: CustomGroupPull) => {\n    setFormData((prev) => ({\n      ...prev,\n      group: group.name,\n      intensity: '',\n    }));\n    setGroupDialogOpen(false);\n    // Trigger refresh of groups in selector\n    setGroupsRefreshTrigger((prev) => prev + 1);\n  };\n\n  // Handle custom group updates/deletions\n  const handleGroupUpdated = () => {\n    // Trigger refresh of groups in selector\n    setGroupsRefreshTrigger((prev) => prev + 1);\n  };\n\n  // Memoized intensity change handler to prevent unnecessary re-renders\n  const handleIntensityChange = useCallback((intensity: number) => {\n    setFormData((prev) => ({\n      ...prev,\n      intensity: intensity.toString(),\n    }));\n  }, []);\n\n  async function submitNewTile(): Promise<void> {\n    // Check if there's text in the tag input field and add it to tags\n    const tagInput = document.querySelector('input[name=\"tags\"]') as HTMLInputElement | null;\n    const currentTags = [...formData.tags];\n\n    if (tagInput && tagInput.value.trim()) {\n      currentTags.push(tagInput.value.trim());\n      // Clear the input field\n      tagInput.value = '';\n    }\n\n    const { gameMode, group, intensity, action } = formData;\n\n    if (!gameMode || !group || !intensity || !action) {\n      return setSubmitMessage({\n        message: t('allFieldsRequired', 'All fields are required'),\n        type: 'error',\n      });\n    }\n\n    // Check if validation message exists\n    if (validationMessage) {\n      return setSubmitMessage({\n        message: validationMessage,\n        type: 'error',\n      });\n    }\n\n    if (updateTileId == null && tileExists(group, intensity, action)) {\n      return setSubmitMessage({ message: t('actionExists'), type: 'error' });\n    }\n\n    const data: CustomTile = {\n      group,\n      intensity: Number(intensity),\n      action,\n      tags: currentTags,\n      gameMode,\n      isCustom: 1,\n    };\n\n    try {\n      // Validate with custom groups system\n      const validation = await validateCustomTileWithGroups(\n        data,\n        settings.locale || 'en',\n        gameMode\n      );\n\n      if (!validation.isValid) {\n        return setSubmitMessage({\n          message: validation.errors.join(', '),\n          type: 'error',\n        });\n      }\n\n      // send action to firebase for review\n      if (updateTileId === null) {\n        // Create a simple label for Firebase submission\n        const groupLabel = `${group} - Level ${intensity}`;\n        submitCustomAction(groupLabel, action);\n\n        // store locally for user's board\n        await addCustomTile(data);\n      } else {\n        await updateCustomTile(updateTileId, data);\n      }\n\n      boardUpdated();\n\n      setFormData((prev) => ({\n        ...prev,\n        action: '',\n        tags: [t('custom')],\n      }));\n\n      return setSubmitMessage({\n        message: updateTileId ? t('customUpdated') : t('customAdded'),\n        type: 'success',\n      });\n    } catch (error) {\n      console.error('Error saving custom tile:', error);\n      return setSubmitMessage({\n        message: t('errorSavingTile'),\n        type: 'error',\n      });\n    }\n  }\n\n  const handleKeyDown = (event: KeyboardEvent<HTMLInputElement>): void => {\n    switch (event.key) {\n      case ',':\n      case 'Enter': {\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.currentTarget.value.length > 0) {\n          setFormData((prev) => ({\n            ...prev,\n            tags: [...prev.tags, event.currentTarget.value],\n          }));\n          // Clear the input after adding the tag\n          event.currentTarget.value = '';\n        }\n        break;\n      }\n      default:\n    }\n  };\n\n  const handleTagInputBlur = (event: FocusEvent<HTMLInputElement>): void => {\n    if (event.target.value.length > 0) {\n      setFormData((prev) => ({\n        ...prev,\n        tags: [...prev.tags, event.target.value],\n      }));\n      // Clear the input after adding the tag\n      event.target.value = '';\n    }\n\n    // Give time for any click events to process before closing dropdown\n    setTimeout(() => {\n      // Close any open dropdown\n      const popperElement = document.querySelector('.MuiAutocomplete-popper');\n      if (popperElement) {\n        (popperElement as HTMLElement).style.display = 'none';\n      }\n    }, 150);\n  };\n\n  return (\n    <>\n      <Accordion\n        expanded={expanded === 'ctAdd'}\n        onChange={handleChange('ctAdd')}\n        className=\"about-accordion\"\n      >\n        <AccordionSummary aria-controls=\"ctAdd-content\" id=\"ctAdd-header\">\n          <Typography className=\"accordion-title\">\n            <Trans i18nKey={updateTileId ? 'ctUpdate' : 'ctAdd'} />\n          </Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Box component=\"form\" method=\"post\" className=\"settings-box\">\n            {/* Game Mode Selection */}\n            <TextField\n              select\n              label={t('customTiles.gameMode')}\n              value={formData.gameMode}\n              onChange={(e) => {\n                setFormData((prev) => ({\n                  ...prev,\n                  gameMode: e.target.value,\n                  group: '',\n                  intensity: '',\n                }));\n              }}\n              fullWidth\n              sx={{ mb: 2 }}\n            >\n              <option value=\"online\">{t('online')}</option>\n              <option value=\"local\">{t('local')}</option>\n              <option value=\"solo\">{t('solo')}</option>\n            </TextField>\n\n            {/* Custom Group Selection */}\n            <CustomGroupSelector\n              value={formData.group}\n              onChange={(groupName) => {\n                setFormData((prev) => ({\n                  ...prev,\n                  group: groupName,\n                  intensity: '',\n                }));\n              }}\n              locale={settings.locale || 'en'}\n              gameMode={formData.gameMode}\n              refreshTrigger={groupsRefreshTrigger}\n            />\n\n            {/* Intensity Selection */}\n            <Box sx={{ mt: 2 }}>\n              <IntensitySelector\n                groupName={formData.group}\n                value={Number(formData.intensity) || 0}\n                onChange={handleIntensityChange}\n                locale={settings.locale || 'en'}\n                gameMode={formData.gameMode}\n              />\n            </Box>\n\n            {/* Validation Message */}\n            {validationMessage && (\n              <Box sx={{ mt: 1, mb: 2 }}>\n                <Typography color=\"error\" variant=\"body2\">\n                  {validationMessage}\n                </Typography>\n              </Box>\n            )}\n\n            <TextField\n              id=\"action\"\n              name=\"action\"\n              required\n              fullWidth\n              label={t('action')}\n              sx={{ mt: 2, pb: 2 }}\n              value={formData.action}\n              onChange={(event) => {\n                setFormData({ ...formData, action: event.target.value });\n              }}\n            />\n\n            <Autocomplete\n              id=\"tags\"\n              disableCloseOnSelect\n              multiple\n              freeSolo\n              options={tagList}\n              value={formData.tags}\n              onChange={(_event, newValues) => {\n                setFormData({ ...formData, tags: newValues as string[] });\n              }}\n              renderInput={(params) => {\n                params.inputProps.onKeyDown = handleKeyDown;\n                params.inputProps.onBlur = handleTagInputBlur;\n                return <TextField {...params} label={t('tags')} />;\n              }}\n              sx={{ pb: 2 }}\n              clearOnBlur\n              blurOnSelect\n              openOnFocus\n              disablePortal={false}\n              componentsProps={{\n                popper: {\n                  modifiers: [\n                    {\n                      name: 'preventOverflow',\n                      options: {\n                        altAxis: true,\n                        altBoundary: true,\n                        padding: 8,\n                      },\n                    },\n                  ],\n                },\n              }}\n            />\n\n            <Box\n              display=\"flex\"\n              flexDirection={{ xs: 'column', sm: 'row' }}\n              justifyContent={{ xs: 'stretch', sm: 'space-evenly' }}\n              gap={1}\n            >\n              <Button variant=\"outlined\" type=\"button\" onClick={() => setGroupDialogOpen(true)}>\n                {t('manageGroups')}\n              </Button>\n              <Button variant=\"contained\" type=\"button\" onClick={() => clear()}>\n                <Trans i18nKey=\"clear\" />\n              </Button>\n              <Button variant=\"contained\" type=\"button\" onClick={submitNewTile}>\n                <Trans i18nKey={updateTileId ? 'ctUpdate' : 'ctAdd'} />\n              </Button>\n            </Box>\n          </Box>\n        </AccordionDetails>\n      </Accordion>\n\n      {/* Custom Group Management Dialog */}\n      <CustomGroupDialog\n        open={groupDialogOpen}\n        onClose={() => setGroupDialogOpen(false)}\n        onGroupCreated={handleGroupCreated}\n        onGroupUpdated={handleGroupUpdated}\n        locale={settings.locale || 'en'}\n        gameMode={formData.gameMode}\n      />\n    </>\n  );\n}\n","import {\n  Box,\n  Collapse,\n  Divider,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n} from '@mui/material';\nimport {\n  Category,\n  ExpandLess,\n  ExpandMore,\n  Extension,\n  Lightbulb,\n  Psychology,\n  Settings,\n  Share,\n  Shuffle,\n  TrendingUp,\n} from '@mui/icons-material';\n\nimport Accordion from '@/components/Accordion';\nimport AccordionDetails from '@/components/Accordion/Details';\nimport AccordionSummary from '@/components/Accordion/Summary';\nimport { CustomTileHelpProps } from '@/types/customTiles';\nimport { Trans } from 'react-i18next';\nimport Typography from '@mui/material/Typography';\nimport useBreakpoint from '@/hooks/useBreakpoint';\nimport { useState } from 'react';\n\nexport default function CustomTileHelp({ expanded, handleChange }: CustomTileHelpProps) {\n  const isMobile = useBreakpoint();\n  const [expandedIdeas, setExpandedIdeas] = useState<{ [key: string]: boolean }>({});\n  const [expandedBasics, setExpandedBasics] = useState<{ [key: string]: boolean }>({});\n\n  const toggleIdea = (id: string) => {\n    setExpandedIdeas((prev) => ({ ...prev, [id]: !prev[id] }));\n  };\n\n  const toggleBasic = (id: string) => {\n    setExpandedBasics((prev) => ({ ...prev, [id]: !prev[id] }));\n  };\n\n  const basicConcepts = [\n    {\n      id: 'custom-actions',\n      icon: <Extension />,\n      title: 'Custom Actions',\n      description: 'Add your own personalized activities to the game',\n      tip: 'Think of custom tiles as your personal touch - add activities that match your style and preferences perfectly.',\n      color: 'primary',\n    },\n    {\n      id: 'category-intensity',\n      icon: <Settings />,\n      title: 'Category & Intensity Rules',\n      description: 'Tiles appear based on your game settings',\n      tip: 'Your tiles only show up when you select their category and intensity level (or higher) in game settings.',\n      color: 'secondary',\n    },\n  ];\n\n  const creativeIdeas = [\n    {\n      id: 'new-activities',\n      icon: <Lightbulb />,\n      title: 'New Activities',\n      description: 'Create unique actions not in the default list',\n      tips: [\n        'Think outside the box - what creative activities would make your game more exciting?',\n        'Add themed tiles like \"Movie Night Actions\" or \"Kitchen Adventures\"',\n        'Create seasonal tiles for holidays or special occasions',\n        'Design role-play scenarios with specific character actions',\n      ],\n      color: 'primary',\n    },\n    {\n      id: 'intensity-boost',\n      icon: <TrendingUp />,\n      title: 'Early Intensity Boost',\n      description: 'Add advanced tiles to beginner levels',\n      tips: [\n        'Pro tip: Add exciting advanced tiles to lower intensities to start games with more energy.',\n        'Copy your favorite advanced tiles and add them to beginner categories',\n        'Create \"gateway\" tiles that introduce advanced concepts gradually',\n        'Mix easy and challenging elements in the same tile for variety',\n      ],\n      color: 'secondary',\n    },\n    {\n      id: 'mix-match',\n      icon: <Shuffle />,\n      title: 'Mix & Match',\n      description: 'Combine different activities into one tile',\n      tips: [\n        \"Mix activities that don't usually go together for unexpected combinations.\",\n        'Combine physical actions with mental challenges or games',\n        'Create multi-step tiles that build on each other',\n        'Blend different intensity levels within a single creative tile',\n      ],\n      color: 'success',\n    },\n    {\n      id: 'custom-groups',\n      icon: <Category />,\n      title: 'Custom Groups',\n      description: 'Create your own tile categories with unique intensities',\n      tips: [\n        'Design completely custom groups like \"Couples Yoga\" or \"Adventure Challenges\"',\n        'Set your own intensity progression from gentle to wild',\n        'Create themed collections that tell a story or follow a theme',\n        'Build niche categories that perfectly match your interests',\n      ],\n      color: 'warning',\n    },\n    {\n      id: 'share-creations',\n      icon: <Share />,\n      title: 'Share & Discover',\n      description: 'Import/export tiles to share with others',\n      tips: [\n        'Export your best tile collections to share with friends or partners',\n        'Import creative tiles from others to expand your game options',\n        'Create themed tile packs and share them in communities',\n        'Backup your custom tiles by exporting them regularly',\n      ],\n      color: 'info',\n    },\n  ];\n\n  return (\n    <>\n      <Accordion\n        expanded={expanded === 'help1'}\n        onChange={handleChange('help1')}\n        className=\"about-accordion\"\n      >\n        <AccordionSummary aria-controls=\"help1-content\" id=\"help1-header\">\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: '100%' }}>\n            <Extension color=\"primary\" />\n            <Typography className=\"accordion-title\">\n              <Trans i18nKey=\"ctExplained\" />\n            </Typography>\n          </Box>\n        </AccordionSummary>\n        <AccordionDetails sx={{ p: 0 }}>\n          <List dense>\n            {basicConcepts.map((concept, index) => (\n              <Box key={concept.id}>\n                <ListItem\n                  sx={{\n                    cursor: 'pointer',\n                    borderRadius: 1,\n                    '&:hover': {\n                      bgcolor: 'action.hover',\n                      transform: 'translateX(4px)',\n                      transition: 'all 0.2s ease-in-out',\n                    },\n                    transition: 'all 0.2s ease-in-out',\n                  }}\n                  onClick={() => toggleBasic(concept.id)}\n                >\n                  <ListItemIcon sx={{ minWidth: isMobile ? 36 : 40 }}>\n                    <Box\n                      sx={{\n                        color: `${concept.color}.main`,\n                        display: 'flex',\n                        alignItems: 'center',\n                      }}\n                    >\n                      {concept.icon}\n                    </Box>\n                  </ListItemIcon>\n                  <ListItemText\n                    primary={\n                      <Typography\n                        variant=\"subtitle2\"\n                        sx={{\n                          fontWeight: 500,\n                          fontSize: isMobile ? '0.9rem' : '1rem',\n                        }}\n                      >\n                        {concept.title}\n                      </Typography>\n                    }\n                    secondary={\n                      <Typography\n                        variant=\"body2\"\n                        sx={{\n                          fontSize: isMobile ? '0.8rem' : '0.85rem',\n                          color: 'text.secondary',\n                        }}\n                      >\n                        {concept.description}\n                      </Typography>\n                    }\n                  />\n                  <IconButton size=\"small\" sx={{ ml: 1 }}>\n                    {expandedBasics[concept.id] ? <ExpandLess /> : <ExpandMore />}\n                  </IconButton>\n                </ListItem>\n\n                <Collapse in={expandedBasics[concept.id]} timeout=\"auto\" unmountOnExit>\n                  <Box\n                    sx={{\n                      ml: isMobile ? 4 : 6,\n                      mr: 2,\n                      mb: 1,\n                      p: 1.5,\n                      bgcolor: 'action.selected',\n                      borderRadius: 1,\n                      borderLeft: 3,\n                      borderLeftColor: `${concept.color}.main`,\n                    }}\n                  >\n                    <Typography\n                      variant=\"body2\"\n                      sx={{\n                        fontSize: isMobile ? '0.8rem' : '0.85rem',\n                        fontStyle: 'italic',\n                        color: 'text.secondary',\n                      }}\n                    >\n                      💡 {concept.tip}\n                    </Typography>\n                  </Box>\n                </Collapse>\n\n                {index < basicConcepts.length - 1 && (\n                  <Divider variant=\"inset\" sx={{ ml: isMobile ? 4 : 6 }} />\n                )}\n              </Box>\n            ))}\n          </List>\n        </AccordionDetails>\n      </Accordion>\n\n      <Accordion\n        expanded={expanded === 'help2'}\n        onChange={handleChange('help2')}\n        className=\"about-accordion\"\n      >\n        <AccordionSummary aria-controls=\"help2-content\" id=\"help2-header\">\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: '100%' }}>\n            <Psychology color=\"primary\" />\n            <Typography className=\"accordion-title\">\n              <Trans i18nKey=\"ctIdeas\" />\n            </Typography>\n          </Box>\n        </AccordionSummary>\n        <AccordionDetails sx={{ p: 0 }}>\n          <List dense>\n            {creativeIdeas.map((idea, index) => (\n              <Box key={idea.id}>\n                <ListItem\n                  sx={{\n                    cursor: 'pointer',\n                    borderRadius: 1,\n                    '&:hover': {\n                      bgcolor: 'action.hover',\n                      transform: 'translateX(4px)',\n                      transition: 'all 0.2s ease-in-out',\n                    },\n                    transition: 'all 0.2s ease-in-out',\n                  }}\n                  onClick={() => toggleIdea(idea.id)}\n                >\n                  <ListItemIcon sx={{ minWidth: isMobile ? 36 : 40 }}>\n                    <Box\n                      sx={{\n                        color: `${idea.color}.main`,\n                        display: 'flex',\n                        alignItems: 'center',\n                      }}\n                    >\n                      {idea.icon}\n                    </Box>\n                  </ListItemIcon>\n                  <ListItemText\n                    primary={\n                      <Typography\n                        variant=\"subtitle2\"\n                        sx={{\n                          fontWeight: 500,\n                          fontSize: isMobile ? '0.9rem' : '1rem',\n                        }}\n                      >\n                        {idea.title}\n                      </Typography>\n                    }\n                    secondary={\n                      <Typography\n                        variant=\"body2\"\n                        sx={{\n                          fontSize: isMobile ? '0.8rem' : '0.85rem',\n                          color: 'text.secondary',\n                        }}\n                      >\n                        {idea.description}\n                      </Typography>\n                    }\n                  />\n                  <IconButton size=\"small\" sx={{ ml: 1 }}>\n                    {expandedIdeas[idea.id] ? <ExpandLess /> : <ExpandMore />}\n                  </IconButton>\n                </ListItem>\n\n                <Collapse in={expandedIdeas[idea.id]} timeout=\"auto\" unmountOnExit>\n                  <Box\n                    sx={{\n                      ml: isMobile ? 4 : 6,\n                      mr: 2,\n                      mb: 1,\n                      p: 1.5,\n                      bgcolor: 'action.selected',\n                      borderRadius: 1,\n                      borderLeft: 3,\n                      borderLeftColor: `${idea.color}.main`,\n                    }}\n                  >\n                    {idea.tips.map((tip, tipIndex) => (\n                      <Typography\n                        key={tipIndex}\n                        variant=\"body2\"\n                        sx={{\n                          fontSize: isMobile ? '0.8rem' : '0.85rem',\n                          fontStyle: tipIndex === 0 ? 'italic' : 'normal',\n                          color: 'text.secondary',\n                          mb: tipIndex < idea.tips.length - 1 ? 1 : 0,\n                          '&:before': tipIndex === 0 ? { content: '\"💡 \"' } : { content: '\"• \"' },\n                        }}\n                      >\n                        {tip}\n                      </Typography>\n                    ))}\n                  </Box>\n                </Collapse>\n\n                {index < creativeIdeas.length - 1 && (\n                  <Divider variant=\"inset\" sx={{ ml: isMobile ? 4 : 6 }} />\n                )}\n              </Box>\n            ))}\n          </List>\n        </AccordionDetails>\n      </Accordion>\n    </>\n  );\n}\n","import {\n  Box,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n  SxProps,\n  Theme,\n} from '@mui/material';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useState, useEffect, useMemo, useCallback } from 'react';\nimport groupActionsFolder from '@/helpers/actionsFolder';\nimport { AllGameModeActions, MappedGroup, ProcessedGroups } from '@/types/customTiles';\nimport { GameMode } from '@/types/Settings';\nimport { CustomGroupPull } from '@/types/customGroups';\n\ninterface TileCategorySelectionProps {\n  gameMode: GameMode | string;\n  groupFilter: string;\n  intensityFilter: number | string;\n  groups: ProcessedGroups;\n  mappedGroups: AllGameModeActions;\n  dexieGroups?: Record<string, CustomGroupPull>;\n  onGameModeChange: (value: string) => void;\n  onGroupChange: (value: string) => void;\n  onIntensityChange: (value: string | number) => void;\n  hideAll?: boolean;\n  sx?: SxProps<Theme>;\n}\n\nexport default function TileCategorySelection({\n  gameMode,\n  groupFilter,\n  intensityFilter,\n  groups,\n  mappedGroups,\n  dexieGroups,\n  onGameModeChange,\n  onGroupChange,\n  onIntensityChange,\n  hideAll = false,\n  sx = {},\n}: TileCategorySelectionProps): JSX.Element | null {\n  const { t } = useTranslation();\n  const [uniqueGroups, setUniqueGroups] = useState<string[]>([]);\n  const defaultIntensityFilter = hideAll ? 1 : 'all';\n\n  // Memoize the mapped groups folder to avoid repeated calls\n  const mappedGroupsFolder = useMemo(() => {\n    if (!mappedGroups?.[gameMode as GameMode]) return [];\n    const folder = groupActionsFolder(mappedGroups[gameMode as GameMode]);\n    return Array.isArray(folder) ? (folder as MappedGroup[]) : [];\n  }, [mappedGroups, gameMode]);\n\n  // Helper function to get group label\n  const getGroupLabel = useCallback(\n    (group: string): string => {\n      // First try to get label from Dexie groups\n      if (dexieGroups?.[group]) {\n        return dexieGroups[group].label || group;\n      }\n\n      // Fallback to mappedGroups for default groups\n      const folderGroup = mappedGroupsFolder.find((g) => g.value === group);\n      if (folderGroup?.groupLabel) {\n        return folderGroup.groupLabel;\n      }\n\n      // Final fallback to raw group name\n      return group;\n    },\n    [dexieGroups, mappedGroupsFolder]\n  );\n\n  // Helper function to get intensity label\n  const getIntensityLabel = useCallback(\n    (validGroupFilter: string, intensity: string): string => {\n      // First try to get intensity label from Dexie groups\n      if (dexieGroups?.[validGroupFilter]) {\n        const intensityData = dexieGroups[validGroupFilter].intensities.find(\n          (i) => i.value === Number(intensity)\n        );\n        if (intensityData?.label) {\n          return intensityData.label;\n        }\n      }\n\n      // Fallback to mappedGroups for default groups\n      const folderGroup = mappedGroupsFolder.find(\n        (g) => g.value === validGroupFilter && g.intensity === Number(intensity)\n      );\n      if (folderGroup?.translatedIntensity) {\n        return folderGroup.translatedIntensity;\n      }\n\n      // Final fallback\n      return `Level ${Number(intensity) + 1}`;\n    },\n    [dexieGroups, mappedGroupsFolder]\n  );\n\n  // Extract unique groups whenever groups or gameMode changes\n  useEffect(() => {\n    if (groups) {\n      const groupNames = Object.keys(groups);\n      setUniqueGroups(groupNames);\n    }\n  }, [groups, gameMode]);\n\n  function handleGroupFilterChange(event: SelectChangeEvent<string>) {\n    const newGroup = event.target.value;\n\n    // Call the parent handlers\n    onGroupChange(newGroup);\n    onIntensityChange(defaultIntensityFilter);\n  }\n\n  if (!uniqueGroups?.length) return null;\n\n  // Ensure groupFilter is in the list of uniqueGroups or empty\n  // If uniqueGroups is empty, don't validate to allow for initial values\n  const validGroupFilter =\n    uniqueGroups.length === 0 || uniqueGroups.includes(groupFilter) ? groupFilter : '';\n\n  // for the intensity filter, grab the first intensity for the selected group if available\n  const validIntensityFilter = intensityFilter === 'all' ? 'all' : intensityFilter;\n\n  return (\n    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, ...sx }}>\n      <FormControl sx={{ width: 125, flexShrink: 0 }}>\n        <InputLabel id=\"game-mode-filter-label\">\n          <Trans i18nKey=\"customTiles.gameMode\" />\n        </InputLabel>\n        <Select\n          labelId=\"game-mode-filter-label\"\n          id=\"game-mode-filter\"\n          value={gameMode}\n          label={t('customTiles.gameMode', 'Game Mode')}\n          onChange={(e) => {\n            onGameModeChange(e.target.value);\n          }}\n          slotProps={{\n            input: { 'aria-label': t('customTiles.gameMode', 'Game Mode') },\n          }}\n        >\n          <MenuItem value=\"online\">\n            <Trans i18nKey=\"online\" />\n          </MenuItem>\n          <MenuItem value=\"local\">\n            <Trans i18nKey=\"local\" />\n          </MenuItem>\n        </Select>\n      </FormControl>\n\n      <FormControl sx={{ minWidth: 150, flex: 1 }}>\n        <InputLabel id=\"group-filter-label\">\n          <Trans i18nKey=\"group\" />\n        </InputLabel>\n        <Select\n          labelId=\"group-filter-label\"\n          id=\"group-filter\"\n          value={validGroupFilter}\n          label={t('group')}\n          onChange={handleGroupFilterChange}\n          slotProps={{\n            input: { 'aria-label': t('group') },\n          }}\n        >\n          {uniqueGroups.map((group) => (\n            <MenuItem key={group} value={group}>\n              {getGroupLabel(group)}\n              {!hideAll && groups[group] && ` (${groups[group].count})`}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n\n      <FormControl sx={{ minWidth: 200, flex: 1 }} disabled={!validGroupFilter}>\n        <InputLabel id=\"intensity-filter-label\">\n          <Trans i18nKey=\"customTiles.intensityLevel\">Intensity Level</Trans>\n        </InputLabel>\n        <Select\n          labelId=\"intensity-filter-label\"\n          id=\"intensity-filter\"\n          value={validIntensityFilter}\n          label={t('customTiles.intensityLevel', 'Intensity Level')}\n          onChange={(e) => onIntensityChange(e.target.value)}\n          slotProps={{\n            input: { 'aria-label': t('customTiles.intensityLevel', 'Intensity Level') },\n          }}\n        >\n          {!hideAll && (\n            <MenuItem key=\"all\" value=\"all\">\n              <Trans i18nKey=\"all\">All</Trans>\n            </MenuItem>\n          )}\n          {validGroupFilter &&\n            groups &&\n            groups[validGroupFilter] &&\n            Object.entries(groups[validGroupFilter].intensities || {})\n              .sort(([a], [b]) => Number(a) - Number(b))\n              .map(([intensity, count]) => (\n                <MenuItem key={intensity} value={Number(intensity)}>\n                  {getIntensityLabel(validGroupFilter, intensity)}\n                  {!hideAll && count !== undefined ? ` (${count})` : ''}\n                </MenuItem>\n              ))}\n        </Select>\n      </FormControl>\n    </Box>\n  );\n}\n","import { Delete, Edit } from '@mui/icons-material';\nimport {\n  Box,\n  Card,\n  CardActions,\n  CardHeader,\n  Chip,\n  IconButton,\n  Switch,\n  Pagination,\n  Typography,\n  CircularProgress,\n  Fade,\n} from '@mui/material';\nimport TileCategorySelection from '@/components/TileCategorySelection';\nimport { useState, useEffect } from 'react';\nimport {\n  deleteCustomTile,\n  toggleCustomTile,\n  getTileCountsByGroup,\n  getPaginatedTiles,\n} from '@/stores/customTiles';\nimport { Trans } from 'react-i18next';\nimport { useTranslation } from 'react-i18next';\nimport { useGameSettings } from '@/stores/settingsStore';\nimport { ViewCustomTilesProps } from '@/types/customTiles';\nimport { TileData } from '@/types/viewCustomTiles';\nimport { CustomTileGroups } from '@/types/dexieTypes';\nimport { getAllAvailableGroups } from '@/stores/customGroups';\nimport { CustomGroupPull } from '@/types/customGroups';\n\nexport default function ViewCustomTiles({\n  tagList,\n  boardUpdated,\n  mappedGroups,\n  updateTile,\n  refreshTrigger,\n}: ViewCustomTilesProps) {\n  const { t, i18n } = useTranslation();\n  const { settings } = useGameSettings();\n  const [tagFilter, setTagFilter] = useState<string | null>(null);\n  const [gameModeFilter, setGameModeFilter] = useState<string>(settings.gameMode || 'online');\n  const [groupFilter, setGroupFilter] = useState<string>('');\n  const [intensityFilter, setIntensityFilter] = useState<string | number>('');\n  const [page, setPage] = useState<number>(1);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [tiles, setTiles] = useState<TileData>({ items: [], total: 0, totalPages: 1 });\n  const [groups, setGroups] = useState<CustomTileGroups>({});\n  const [dexieGroups, setDexieGroups] = useState<Record<string, CustomGroupPull>>({});\n\n  const limit = 10;\n\n  // Load groups and tile counts on initial render\n  useEffect(() => {\n    async function loadGroupsAndCounts() {\n      try {\n        setLoading(true);\n\n        // Execute both async operations concurrently\n        const [allGroups, tileCounts] = await Promise.all([\n          getAllAvailableGroups(i18n.resolvedLanguage, gameModeFilter),\n          getTileCountsByGroup(i18n.resolvedLanguage, gameModeFilter, tagFilter),\n        ]);\n\n        // Also set dexieGroups for TileCategorySelection component\n        const groupMap: Record<string, CustomGroupPull> = {};\n        allGroups.forEach((group) => {\n          groupMap[group.name] = group;\n        });\n        setDexieGroups(groupMap);\n\n        // Merge group definitions with tile counts\n        const groupData: CustomTileGroups = {};\n        allGroups.forEach((group) => {\n          const counts = tileCounts[group.name] || { count: 0, intensities: {} };\n          groupData[group.name] = {\n            label: group.label || group.name,\n            count: counts.count,\n            intensities: counts.intensities,\n          };\n        });\n\n        setGroups(groupData);\n\n        // Extract group names from all available groups (not just those with tiles)\n        const groupNames = allGroups.map((group) => group.name);\n\n        // Check if current groupFilter is valid in the new list\n        const isCurrentGroupValid = groupNames.includes(groupFilter);\n\n        // Set default group filter if not already set or if current is invalid\n        if ((!groupFilter || !isCurrentGroupValid) && groupNames.length > 0) {\n          setGroupFilter(groupNames[0]);\n          setIntensityFilter('all');\n        } else if (isCurrentGroupValid && intensityFilter !== 'all') {\n          // Verify intensity is valid for this group - use the group definition, not tile data\n          const selectedGroup = allGroups.find((g) => g.name === groupFilter);\n          if (selectedGroup) {\n            const validIntensityValues = selectedGroup.intensities.map((i) => i.value);\n            if (!validIntensityValues.includes(Number(intensityFilter))) {\n              setIntensityFilter('all');\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error loading groups and counts:', error);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    loadGroupsAndCounts();\n  }, [gameModeFilter, i18n.resolvedLanguage, tagFilter, groupFilter, intensityFilter]);\n\n  // Load tiles when filters change\n  useEffect(() => {\n    let isMounted = true;\n\n    async function loadTiles() {\n      try {\n        setLoading(true);\n        const filters = {\n          group: groupFilter,\n          intensity: intensityFilter === 'all' ? null : Number(intensityFilter), // Send empty string for 'all'\n          tag: tagFilter,\n          gameMode: gameModeFilter,\n          locale: settings.locale,\n          page,\n          limit,\n          paginated: true,\n        };\n\n        const tileData = await getPaginatedTiles(filters);\n\n        // Only update state if component is still mounted\n        if (isMounted) {\n          setTiles(tileData as unknown as TileData);\n          // Add a small delay before removing loading state for smoother transitions\n          setTimeout(() => {\n            if (isMounted) {\n              setLoading(false);\n            }\n          }, 300);\n        }\n      } catch (error) {\n        console.error('Error loading tiles:', error);\n        if (isMounted) {\n          setLoading(false);\n        }\n      }\n    }\n\n    // Only load if we have a group filter\n    if (groupFilter) {\n      loadTiles();\n    } else {\n      setLoading(false);\n    }\n\n    // Cleanup function to prevent state updates after unmount\n    return () => {\n      isMounted = false;\n    };\n  }, [\n    groupFilter,\n    intensityFilter,\n    tagFilter,\n    gameModeFilter,\n    page,\n    limit,\n    refreshTrigger,\n    settings.locale,\n  ]);\n\n  function toggleTagFilter(tag: string): void {\n    setLoading(true);\n    if (tagFilter === tag) {\n      setTagFilter(null);\n    } else {\n      setTagFilter(tag);\n    }\n  }\n\n  function handlePageChange(_: React.ChangeEvent<unknown>, newPage: number): void {\n    setLoading(true);\n    setPage(newPage);\n  }\n\n  async function deleteTile(index: number): Promise<void> {\n    await deleteCustomTile(index);\n    boardUpdated();\n    // Refresh the current page\n    const filters = {\n      group: groupFilter,\n      intensity: intensityFilter === 'all' ? null : intensityFilter, // Send empty string for 'all'\n      tag: tagFilter,\n      gameMode: gameModeFilter,\n      locale: settings.locale,\n      page,\n      limit,\n      paginated: true,\n    };\n    const tileData = await getPaginatedTiles(filters);\n    setTiles(tileData as unknown as TileData);\n  }\n\n  async function toggleTile(id: number): Promise<void> {\n    await toggleCustomTile(id);\n    boardUpdated();\n    // Update the tile in the current list without reloading\n    setTiles((prev) => ({\n      ...prev,\n      items: prev.items.map((tile) =>\n        tile.id === id ? { ...tile, isEnabled: !tile.isEnabled } : tile\n      ),\n    }));\n  }\n\n  function handleUpdateTile(id: number): void {\n    updateTile(id);\n    // Scroll to the top of the dialog where the AddCustomTile component is\n    const dialogContent = document.querySelector('.MuiDialogContent-root');\n    if (dialogContent) {\n      dialogContent.scrollTop = 0;\n    }\n  }\n\n  function getSubheaderText(group: string, intensity: number): string {\n    // Get group and intensity labels from Dexie\n    const dexieGroup = dexieGroups[group];\n\n    if (dexieGroup) {\n      // Get the group label\n      const groupLabel = dexieGroup.label || group;\n\n      // Find the intensity label\n      const intensityData = dexieGroup.intensities.find((i) => i.value === Number(intensity));\n      const intensityLabel = intensityData?.label || `Level ${Number(intensity) + 1}`;\n\n      return `${groupLabel} - ${intensityLabel}`;\n    }\n\n    // Fallback if group not found in Dexie\n    return `${group} - Level ${Number(intensity) + 1}`;\n  }\n\n  const tileList = tiles.items?.map(\n    ({ id, group, intensity, action, tags, isEnabled = true, isCustom = true }) => (\n      <Card sx={{ my: 2 }} key={id}>\n        <CardHeader\n          title={action}\n          slotProps={{\n            title: { variant: 'body1' },\n            subheader: { variant: 'body2' },\n            action: { 'aria-label': t('customTiles.actions') },\n          }}\n          subheader={getSubheaderText(group, intensity)}\n          action={\n            <>\n              <Switch\n                checked={!!isEnabled}\n                onChange={() => id !== undefined && toggleTile(id)}\n                slotProps={{ input: { 'aria-label': t('customTiles.toggleTile') } }}\n              />\n              {!!isCustom && (\n                <>\n                  <IconButton\n                    onClick={() => id !== undefined && handleUpdateTile(id)}\n                    aria-label={t('customTiles.update')}\n                  >\n                    <Edit />\n                  </IconButton>\n                  <IconButton\n                    onClick={() => id !== undefined && deleteTile(id)}\n                    aria-label={t('customTiles.delete')}\n                  >\n                    <Delete />\n                  </IconButton>\n                </>\n              )}\n            </>\n          }\n          sx={{ pb: 0 }}\n        />\n        <CardActions>\n          {tags?.map((tag) => (\n            <Chip key={tag} label={tag === 'default' ? t('default') : tag} sx={{ m: 0.5 }} />\n          ))}\n        </CardActions>\n      </Card>\n    )\n  );\n\n  return (\n    <Box>\n      <Box>\n        {tagList?.map((tag) => (\n          <Chip\n            key={tag}\n            label={tag}\n            sx={{ m: 0.5 }}\n            color={tagFilter === tag ? 'primary' : 'default'}\n            onClick={() => toggleTagFilter(tag)}\n          />\n        ))}\n      </Box>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 2,\n          my: 2,\n          transition: 'all 0.3s ease-in-out',\n        }}\n      >\n        <TileCategorySelection\n          gameMode={gameModeFilter}\n          groupFilter={groupFilter}\n          intensityFilter={intensityFilter}\n          groups={groups}\n          mappedGroups={mappedGroups}\n          dexieGroups={dexieGroups}\n          onGameModeChange={(value: string) => {\n            setGameModeFilter(value);\n            setGroupFilter('');\n            setIntensityFilter('');\n            setPage(1);\n          }}\n          onGroupChange={(value: string) => {\n            setGroupFilter(value);\n            setPage(1);\n          }}\n          onIntensityChange={(value: string | number) => {\n            setIntensityFilter(value);\n            setPage(1);\n          }}\n        />\n      </Box>\n\n      <Box sx={{ position: 'relative', minHeight: '200px' }}>\n        {/* Loading overlay */}\n        <Fade in={loading} timeout={300}>\n          <Box\n            sx={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              right: 0,\n              bottom: 0,\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n              backgroundColor: 'rgba(255, 255, 255, 0)',\n              zIndex: 1,\n              borderRadius: 1,\n            }}\n          >\n            <CircularProgress />\n          </Box>\n        </Fade>\n\n        {/* Content area with consistent height */}\n        <Box\n          sx={{\n            opacity: loading ? 0.3 : 1,\n            transition: 'opacity 0.3s ease-in-out',\n            pointerEvents: loading ? 'none' : 'auto',\n          }}\n        >\n          {tiles.items.length === 0 ? (\n            <Typography variant=\"body1\" sx={{ textAlign: 'center', my: 4 }}>\n              <Trans i18nKey=\"customTiles.noTilesFound\">\n                No tiles found with the selected filters.\n              </Trans>\n            </Typography>\n          ) : (\n            <>\n              {tileList}\n\n              {/* Pagination */}\n              {tiles.totalPages > 1 && (\n                <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3, mb: 2 }}>\n                  <Pagination\n                    count={tiles.totalPages}\n                    page={page}\n                    onChange={handlePageChange}\n                    color=\"primary\"\n                  />\n                </Box>\n              )}\n\n              <Typography\n                variant=\"body2\"\n                sx={{ textAlign: 'center', mt: 2, color: 'text.secondary' }}\n              >\n                <Trans\n                  i18nKey=\"customTiles.showingTiles\"\n                  values={{ shown: tiles.items.length, total: tiles.total }}\n                >\n                  Showing {{ shown: tiles.items.length }} of {{ total: tiles.total }} tiles\n                </Trans>\n              </Typography>\n            </>\n          )}\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n","import { useState, useCallback, useMemo, useEffect } from 'react';\nimport { useLiveQuery } from 'dexie-react-hooks';\nimport { Dialog, DialogContent, DialogTitle, Divider, IconButton, Grid, Box } from '@mui/material';\nimport { Close } from '@mui/icons-material';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { importCustomTiles, getTiles } from '@/stores/customTiles';\nimport useBreakpoint from '@/hooks/useBreakpoint';\nimport ToastAlert from '@/components/ToastAlert';\nimport { importActions } from '@/services/dexieActionImport';\nimport ImportExport from '@/views/CustomTileDialog/ImportExport';\nimport AddCustomTile from './AddCustomTile';\nimport CustomTileHelp from './CustomTileHelp';\nimport ViewCustomTiles from './ViewCustomTiles';\nimport {\n  CustomTileDialogProps,\n  CustomTile,\n  AllGameModeActions,\n  SubmitMessage,\n  CustomTilePull,\n} from '@/types/customTiles';\n\nexport default function CustomTileDialog({\n  boardUpdated,\n  setOpen,\n  open = false,\n}: CustomTileDialogProps) {\n  const { t, i18n } = useTranslation();\n  const isMobile = useBreakpoint();\n  const isSmallScreen = useBreakpoint('md');\n  const [submitMessage, setSubmitMessage] = useState<SubmitMessage>({\n    message: '',\n    type: 'info',\n  });\n  const [expanded, setExpanded] = useState<string>('ctAdd');\n  const [tileId, setTileId] = useState<number | null>(null);\n  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);\n  const [allGameModeActions, setAllGameModeActions] = useState<AllGameModeActions>({\n    online: {},\n    local: {},\n    solo: {},\n  });\n  const [isLoadingActions, setIsLoadingActions] = useState<boolean>(true);\n\n  // Create a function to trigger refresh of the ViewCustomTiles component\n  const triggerRefresh = useCallback(() => {\n    setRefreshTrigger((prev) => prev + 1);\n  }, []);\n\n  const handleChange = (panel: string) => (_event: React.SyntheticEvent, newExpanded: boolean) => {\n    setExpanded(newExpanded ? panel : '');\n  };\n\n  // Load actions for both game modes\n  useEffect(() => {\n    async function loadAllGameModeActions() {\n      setIsLoadingActions(true);\n      try {\n        const [onlineActions, localActions, soloActions] = await Promise.all([\n          importActions(i18n.resolvedLanguage, 'online'),\n          importActions(i18n.resolvedLanguage, 'local'),\n          importActions(i18n.resolvedLanguage, 'solo'),\n        ]);\n\n        setAllGameModeActions({\n          online: onlineActions,\n          local: localActions,\n          solo: soloActions,\n        });\n      } catch (error) {\n        console.error('Error loading game mode actions:', error);\n      } finally {\n        setIsLoadingActions(false);\n      }\n    }\n\n    loadAllGameModeActions();\n  }, [i18n.resolvedLanguage]);\n\n  const allTiles = useLiveQuery(() => getTiles({ locale: i18n.resolvedLanguage }));\n\n  const tagList = useMemo(() => {\n    if (!allTiles) return [];\n\n    return Array.isArray(allTiles)\n      ? allTiles\n          .map(({ tags }) => tags)\n          .flat()\n          .filter((tag, index, self) => tag && self.indexOf(tag) === index)\n          .sort()\n      : [];\n  }, [allTiles]);\n\n  const bulkImport = useCallback(\n    async (records: CustomTile[]) => {\n      await importCustomTiles(records);\n      boardUpdated();\n      triggerRefresh();\n    },\n    [boardUpdated, triggerRefresh]\n  );\n\n  if (!allTiles || isLoadingActions) return null;\n\n  // Render content based on screen size\n  const renderContent = () => {\n    const leftColumnContent = (\n      <>\n        <CustomTileHelp expanded={expanded} handleChange={handleChange} />\n\n        <AddCustomTile\n          setSubmitMessage={setSubmitMessage}\n          boardUpdated={() => {\n            boardUpdated();\n            triggerRefresh();\n          }}\n          customTiles={allTiles as CustomTilePull[]}\n          mappedGroups={allGameModeActions}\n          expanded={expanded}\n          handleChange={handleChange}\n          tagList={tagList}\n          updateTileId={tileId}\n          setUpdateTileId={setTileId}\n        />\n\n        <ImportExport\n          expanded={expanded}\n          handleChange={handleChange}\n          customTiles={allTiles as CustomTilePull[]}\n          mappedGroups={allGameModeActions}\n          setSubmitMessage={setSubmitMessage}\n          bulkImport={bulkImport}\n        />\n      </>\n    );\n\n    const rightColumnContent = Array.isArray(allTiles) && allTiles.length > 0 && (\n      <Box>\n        <ViewCustomTiles\n          tagList={tagList}\n          boardUpdated={() => {\n            boardUpdated();\n            triggerRefresh();\n          }}\n          mappedGroups={allGameModeActions}\n          updateTile={(id: number) => {\n            setTileId(id);\n            setExpanded('ctAdd');\n          }}\n          refreshTrigger={refreshTrigger}\n        />\n      </Box>\n    );\n\n    if (!isSmallScreen) {\n      return (\n        <Grid container spacing={2}>\n          <Grid size={{ xs: 12, md: 6 }}>{leftColumnContent}</Grid>\n          <Grid size={{ xs: 12, md: 6 }}>{rightColumnContent}</Grid>\n        </Grid>\n      );\n    } else {\n      return (\n        <>\n          {leftColumnContent}\n          {rightColumnContent && (\n            <>\n              <Divider sx={{ my: 2 }} />\n              {rightColumnContent}\n            </>\n          )}\n        </>\n      );\n    }\n  };\n\n  return (\n    <>\n      <Dialog\n        fullScreen={isMobile}\n        open={open}\n        onClose={() => setOpen(false)}\n        maxWidth={!isSmallScreen ? 'lg' : 'sm'}\n        fullWidth={true}\n      >\n        <DialogTitle>\n          <Trans i18nKey=\"manageTiles\" />\n          <IconButton\n            aria-label={t('close')}\n            onClick={() => setOpen(false)}\n            sx={{\n              position: 'absolute',\n              right: 8,\n              top: 8,\n              color: (theme) => theme.palette.grey[500],\n            }}\n          >\n            <Close />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent>{renderContent()}</DialogContent>\n      </Dialog>\n      <ToastAlert\n        open={!!submitMessage.message}\n        close={() => setSubmitMessage({ message: '', type: 'info' })}\n        type={submitMessage.type}\n      >\n        {submitMessage.message}\n      </ToastAlert>\n    </>\n  );\n}\n","import useMessages from '@/context/hooks/useMessages';\nimport latestMessageByType from '@/helpers/messages';\nimport { useEffect, useState, Dispatch, SetStateAction } from 'react';\nimport { useSettings } from '@/stores/settingsStore';\nimport { RoomMessage } from '@/types/Message';\nimport { Settings } from '@/types/Settings';\n\nexport default function useSettingsToFormData<T extends Settings>(\n  defaultSettings: T = {} as T,\n  overrideSettings: Partial<T> = {}\n): [T, Dispatch<SetStateAction<T>>] {\n  const [settings] = useSettings();\n\n  // Use settings directly with selectedActions structure only\n  const initialFormData = {\n    ...defaultSettings,\n    ...settings,\n    // Ensure selectedActions is always defined\n    selectedActions: settings?.selectedActions || {},\n    // Ensure finishRange has default values for board generation\n    finishRange: settings?.finishRange || [30, 70],\n    ...overrideSettings,\n  } as T;\n\n  const [formData, setFormData] = useState<T>(initialFormData);\n  const { messages } = useMessages();\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  // Import our private room settings into the form data.\n  useEffect(() => {\n    const message = latestMessageByType(messages, 'room') as RoomMessage | undefined;\n\n    if (message?.settings) {\n      try {\n        const messageSettings = JSON.parse(message.settings);\n\n        setFormData((previousFormData) => {\n          // Only apply message settings on initial load or if no user modifications exist\n          if (!isInitialized) {\n            setIsInitialized(true);\n            return {\n              ...previousFormData,\n              ...messageSettings,\n            };\n          }\n\n          // For subsequent updates, preserve user action selections in selectedActions\n          const hasUserSelections =\n            previousFormData.selectedActions &&\n            Object.keys(previousFormData.selectedActions).length > 0;\n\n          if (hasUserSelections) {\n            // Preserve selectedActions when merging new room settings\n            return {\n              ...previousFormData,\n              ...messageSettings,\n              selectedActions: previousFormData.selectedActions, // Keep user's selections\n            };\n          }\n\n          return {\n            ...previousFormData,\n            ...messageSettings,\n          };\n        });\n      } catch (error) {\n        console.error('Error parsing message settings:', error);\n      }\n    } else if (!isInitialized) {\n      setIsInitialized(true);\n    }\n  }, [messages, isInitialized]);\n\n  return [formData, setFormData];\n}\n"],"file":"js/chunk-Cnn_1dqX.js"}