{"version":3,"file":"index.tsx-CMqgPCgK.js","sources":["../../src/views/Room/GameBoard/GameTile/index.tsx","../../src/views/Room/GameBoard/index.tsx"],"sourcesContent":["import { AvatarGroup, Divider } from '@mui/material';\nimport './styles.css';\nimport { useEffect, useMemo, useRef } from 'react';\n\nimport TextAvatar from '@/components/TextAvatar';\nimport { Tile } from '@/types/gameBoard';\nimport { Player } from '@/types/player';\n\nexport default function GameTile({\n  title,\n  description,\n  players,\n  current,\n  isTransparent,\n  className,\n}: Tile) {\n  const playerIndicators = useMemo(\n    () =>\n      players.map((p: Player) => (\n        <TextAvatar key={p.uid} displayName={p.displayName || ''} uid={p.uid || ''} />\n      )),\n    [players]\n  );\n\n  const tileRef = useRef<HTMLLIElement | null>(null);\n  useEffect(() => {\n    if (tileRef.current && current) {\n      tileRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [current]);\n\n  const liClass = [current && 'pulse-animation', isTransparent && 'gray-tiles', className]\n    .join(' ')\n    .trim();\n\n  return (\n    <li className={liClass} ref={tileRef}>\n      <div className=\"tile-title-row\">\n        <div className={`tile-title ${isTransparent && 'pop-text'}`}>{title}</div>\n        <div className=\"player-indicator\">\n          <AvatarGroup max={4}>{playerIndicators}</AvatarGroup>\n        </div>\n      </div>\n      <Divider sx={{ margin: '0.5rem 0' }} />\n      <div className={`tile-description ${isTransparent && 'pop-text'}`}>{description}</div>\n    </li>\n  );\n}\n","import useAuth from '@/context/hooks/useAuth';\nimport actionStringReplacement from '@/services/actionStringReplacement';\nimport GameTile from './GameTile';\nimport './styles.css';\nimport { Settings } from '@/types/Settings';\nimport { Tile, TileExport } from '@/types/gameBoard';\nimport type { LocalPlayer } from '@/types/localPlayers';\nimport { isLocalPlayer, type HybridPlayer } from '@/hooks/useHybridPlayerList';\n\ninterface PlayerWithLocation {\n  uid: string;\n  displayName: string;\n  location?: number;\n  isSelf?: boolean;\n}\n\ninterface GameBoardProps {\n  playerList: PlayerWithLocation[] | HybridPlayer[];\n  isTransparent: boolean;\n  gameBoard: TileExport[];\n  settings: Settings;\n}\n\nexport default function GameBoard({\n  playerList,\n  isTransparent,\n  gameBoard,\n  settings,\n}: GameBoardProps): JSX.Element | null {\n  const { user } = useAuth();\n  if (!Array.isArray(gameBoard) || !gameBoard.length) return null;\n\n  // Extract local players if available for role-based player selection\n  const localPlayers: LocalPlayer[] = [];\n  if (playerList && Array.isArray(playerList)) {\n    // Check if we're dealing with HybridPlayer array (which includes local players)\n    const hybridPlayers = playerList as HybridPlayer[];\n    hybridPlayers.forEach((player) => {\n      if (isLocalPlayer(player)) {\n        localPlayers.push({\n          id: player.localId,\n          name: player.displayName,\n          role: player.role as any, // HybridPlayer role is string, LocalPlayer role is typed\n          order: player.order,\n          isActive: player.isSelf,\n          deviceId: 'local-device',\n          location: player.location,\n          isFinished: player.isFinished,\n        });\n      }\n    });\n  }\n\n  const tileTypeArray = new Set<string>();\n\n  gameBoard.forEach(({ title }, index) => {\n    if (title && index !== 0 && index !== gameBoard.length - 1) {\n      tileTypeArray.add(title);\n    }\n  });\n\n  const gameTiles = gameBoard.map((entry, index) => {\n    const players = playerList.filter((player) => player.location === index);\n    const current =\n      playerList.find((player) => player.isSelf && player.location === index && index !== 0) ||\n      null;\n    const hueIndex = (Array.from(tileTypeArray).indexOf(entry.title) % 10) + 1;\n\n    const description =\n      !settings.hideBoardActions || index === 0 || current\n        ? actionStringReplacement(\n            entry.description || '',\n            settings.role || 'sub',\n            user?.displayName || '',\n            localPlayers.length > 0 ? localPlayers : undefined,\n            true // Use generic placeholders for GameBoard display\n          )\n        : // replace only letters and numbers with question marks. Remove special characters.\n          (entry.description || '').replace(/[^\\w\\s]/g, '').replace(/[a-zA-Z0-9]/g, '?');\n\n    // Convert TileExport to full Tile object\n    const tile: Tile = {\n      id: index,\n      title: entry.title,\n      description: entry.description,\n      index,\n      players: players.map((p) => ({ ...p, isSelf: p.isSelf || false, isFinished: false })),\n      current: current ? { ...current, isSelf: current.isSelf || false, isFinished: false } : null,\n      isTransparent,\n      className: `hue${hueIndex}`,\n    };\n\n    return (\n      <GameTile\n        key={index}\n        title={`#${index + 1}: ${entry.title}`}\n        description={description}\n        players={tile.players}\n        current={tile.current}\n        isTransparent={tile.isTransparent}\n        className={tile.className}\n      />\n    );\n  });\n\n  return (\n    <div className=\"gameboard transparent-scrollbar\">\n      <ol>{gameTiles}</ol>\n    </div>\n  );\n}\n"],"names":["GameTile","title","description","players","current","isTransparent","className","playerIndicators","useMemo","p","TextAvatar","tileRef","useRef","useEffect","liClass","jsxs","jsx","AvatarGroup","Divider","GameBoard","playerList","gameBoard","settings","user","useAuth","localPlayers","player","isLocalPlayer","tileTypeArray","index","gameTiles","entry","hueIndex","actionStringReplacement","tile"],"mappings":"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"}