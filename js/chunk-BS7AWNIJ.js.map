{"version":3,"mappings":"m9BAOMA,EAA2B,IAE3BC,EAA2B,CAC/B,YAAa,KACb,cAAe,CAAC,KAAM,KAAM,KAAM,KAAM,IAAI,EAC5C,GAAI,CAAC,cAAe,QAAQ,EAC5B,UAAW,cAEX,cAAe,CACb,YAAa,IAEf,MAAO,CACL,YAAa,IAEf,UAAW,CACT,MAAO,CAAC,cAAe,SAAU,eAAgB,YAAa,SAAS,EACvE,OAAQ,CAAC,eAAgB,QAAQ,GAGnC,KAAM,cACN,QAAS,GACT,UAAW,EACb,EAGMC,EAAuB,CAACC,EAAkBC,IAE1CA,IAAc,cACTC,EAAA,mDAAAC,EAAA,qFAAAA,EAAA,qFAAAA,EAAA,qFAAAA,EAAA,qFAAAA,EAAA,gEAAAH,CAAA,uBAIFE,EAAA,mDAAAC,EAAA,qFAAAA,EAAA,qFAAAA,EAAA,qFAAAA,EAAA,qFAAAA,EAAA,gEAAAH,CAAA,IAAAC,CAAA,WAAkD,MAAM,IAEtDC,EAAA,wHAAAD,CAAA,UACR,EAGGG,EAAOC,EACV,IAAIC,CAAgB,EACpB,IAAIC,CAAgB,EACpB,IAAIC,EAAmBT,CAAoB,CAAC,EAG/CK,EACG,KAAKN,CAAW,EAChB,KAAK,IAAM,EAEyB,IAAM,CACvC,MAAMW,EAAcL,EAAK,SACnBM,EAAc,CAAC,KAAM,KAAM,IAAI,EAAE,OAAQC,GAASA,IAASF,CAAW,EAGxE,OAAO,OAAW,KAAe,wBAAyB,OAC5D,OAAO,oBACL,IAAM,CACJC,EAAY,QAASC,GAAS,CAE1BP,GAAM,SAAS,eACf,MAAM,QAAQA,EAAK,QAAQ,aAAa,GACxCA,EAAK,QAAQ,cAAc,SAASO,CAAI,GAExCP,EAAK,cAAcO,CAAI,EAAE,MAAM,QAAQ,IAAI,CAE/C,CAAC,CACH,EACA,CAAE,QAASd,CAAA,CAAyB,EAItC,WAAW,IAAM,CACfa,EAAY,QAASC,GAAS,CAE1BP,GAAM,SAAS,eACf,MAAM,QAAQA,EAAK,QAAQ,aAAa,GACxCA,EAAK,QAAQ,cAAc,SAASO,CAAI,GAExCP,EAAK,cAAcO,CAAI,EAAE,MAAM,QAAQ,IAAI,CAE/C,CAAC,CACH,EAAGd,CAAwB,CAE/B,GAGA,CACF,CAAC,EACA,MAAM,QAAQ,KAAK","names":["LANGUAGE_PRELOAD_TIMEOUT","i18nOptions","lazyLoadTranslations","language","namespace","__variableDynamicImportRuntimeHelper","__vitePreload","i18n","i18next","initReactI18next","LanguageDetector","resourcesToBackend","currentLang","commonLangs","lang"],"ignoreList":[],"sources":["../../src/i18n.ts"],"sourcesContent":["import i18next, { InitOptions } from 'i18next';\n\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\nimport resourcesToBackend from 'i18next-resources-to-backend';\n\n// Configuration constants\nconst LANGUAGE_PRELOAD_TIMEOUT = 5000; // 5 second timeout for requestIdleCallback\n\nconst i18nOptions: InitOptions = {\n  fallbackLng: 'en',\n  supportedLngs: ['en', 'es', 'fr', 'zh', 'hi'],\n  ns: ['translation', 'errors'],\n  defaultNS: 'translation',\n  // debug: process.env.NODE_ENV === 'development',\n  interpolation: {\n    escapeValue: false, // React already safes from XSS\n  },\n  react: {\n    useSuspense: false, // Disable suspense to prevent issues with language switching\n  },\n  detection: {\n    order: ['querystring', 'cookie', 'localStorage', 'navigator', 'htmlTag'],\n    caches: ['localStorage', 'cookie'],\n  },\n  // Performance optimizations\n  load: 'currentOnly', // Only load current language initially\n  preload: false, // Don't preload all languages\n  cleanCode: true, // Clean language codes\n};\n\n// Lazy loading function for additional resources\nconst lazyLoadTranslations = (language: string, namespace: string) => {\n  // Only load specific locale files when actually needed\n  if (namespace === 'translation') {\n    return import(`./locales/${language}/translation.json`);\n  }\n\n  // For game-specific translations, load them on-demand\n  return import(`./locales/${language}/${namespace}.json`).catch(() => {\n    // Fallback to English if translation doesn't exist\n    return import(`./locales/en/${namespace}.json`);\n  });\n};\n\nconst i18n = i18next\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  .use(resourcesToBackend(lazyLoadTranslations));\n\n// Initialize i18n with optimized background loading\ni18n\n  .init(i18nOptions)\n  .then(() => {\n    // Defer preloading other languages until after migration is handled\n    const scheduleLanguagePreloading = () => {\n      const currentLang = i18n.language;\n      const commonLangs = ['en', 'es', 'fr'].filter((lang) => lang !== currentLang);\n\n      // Use requestIdleCallback for better performance\n      if (typeof window !== 'undefined' && 'requestIdleCallback' in window) {\n        window.requestIdleCallback(\n          () => {\n            commonLangs.forEach((lang) => {\n              if (\n                i18n?.options?.supportedLngs &&\n                Array.isArray(i18n.options.supportedLngs) &&\n                i18n.options.supportedLngs.includes(lang)\n              ) {\n                i18n.loadLanguages(lang).catch(console.warn);\n              }\n            });\n          },\n          { timeout: LANGUAGE_PRELOAD_TIMEOUT }\n        ); // Timeout for requestIdleCallback\n      } else {\n        // Fallback with longer delay to allow app to become interactive first\n        setTimeout(() => {\n          commonLangs.forEach((lang) => {\n            if (\n              i18n?.options?.supportedLngs &&\n              Array.isArray(i18n.options.supportedLngs) &&\n              i18n.options.supportedLngs.includes(lang)\n            ) {\n              i18n.loadLanguages(lang).catch(console.warn);\n            }\n          });\n        }, LANGUAGE_PRELOAD_TIMEOUT); // Load other languages after timeout\n      }\n    };\n\n    // Delay language preloading to prioritize app startup\n    scheduleLanguagePreloading();\n  })\n  .catch(console.error);\n\nexport default i18n;\n"],"file":"js/chunk-BS7AWNIJ.js"}