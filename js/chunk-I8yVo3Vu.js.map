{"version":3,"file":"chunk-I8yVo3Vu.js","sources":["../../src/components/TextAvatar/index.tsx"],"sourcesContent":["import { Avatar, Tooltip } from '@mui/material';\nimport { memo, useMemo } from 'react';\n\ninterface TextAvatarProps {\n  uid: string;\n  displayName: string;\n  size?: 'small' | 'medium';\n}\n\nfunction contrastBgColor(bgColor: string, lightColor: string, darkColor: string): string {\n  const color = bgColor.charAt(0) === '#' ? bgColor.substring(1, 7) : bgColor;\n  const r = parseInt(color.substring(0, 2), 16); // hexToR\n  const g = parseInt(color.substring(2, 4), 16); // hexToG\n  const b = parseInt(color.substring(4, 6), 16); // hexToB\n  return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? darkColor : lightColor;\n}\n\nfunction stringToColor(string: string): string {\n  let hash = 0;\n  let i;\n\n  for (i = 0; i < string.length; i += 1) {\n    hash = string.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let color = '#';\n\n  for (i = 0; i < 3; i += 1) {\n    const value = (hash >> (i * 8)) & 0xff;\n    color += `00${value.toString(16)}`.slice(-2);\n  }\n\n  return color;\n}\n\nfunction stringAvatar(name: string, uid: string, size?: 'small' | 'medium') {\n  const bgcolor = stringToColor(uid);\n  const dimension = size === 'small' ? 18 : 24;\n  const fontSize = size === 'small' ? 10 : 12;\n  return {\n    sx: {\n      bgcolor,\n      width: dimension,\n      height: dimension,\n      fontSize,\n      color: contrastBgColor(bgcolor, '#FFFFFF', '#000000'),\n    },\n    children: `${name?.split(' ')[0]?.[0] || ''}${name?.split(' ')?.[1]?.[0] ?? ''}`,\n  };\n}\n\nfunction TextAvatar({ uid, displayName, size }: TextAvatarProps): JSX.Element {\n  // Memoize expensive avatar calculations\n  const avatarProps = useMemo(() => stringAvatar(displayName, uid, size), [displayName, uid, size]);\n\n  return (\n    <Tooltip title={displayName}>\n      <Avatar {...avatarProps} className=\"player-online\" />\n    </Tooltip>\n  );\n}\n\nexport default memo(TextAvatar);\n"],"names":["contrastBgColor","bgColor","lightColor","darkColor","color","r","g","b","stringToColor","string","hash","i","value","stringAvatar","name","uid","size","_a","_b","_c","_d","bgcolor","dimension","TextAvatar","displayName","avatarProps","useMemo","jsx","Tooltip","Avatar","TextAvatar$1","memo"],"mappings":"qqBASA,SAASA,EAAgBC,EAAiBC,EAAoBC,EAA2B,CACvF,MAAMC,EAAQH,EAAQ,OAAO,CAAC,IAAM,IAAMA,EAAQ,UAAU,EAAG,CAAC,EAAIA,EAC9DI,EAAI,SAASD,EAAM,UAAU,EAAG,CAAC,EAAG,EAAE,EACtCE,EAAI,SAASF,EAAM,UAAU,EAAG,CAAC,EAAG,EAAE,EACtCG,EAAI,SAASH,EAAM,UAAU,EAAG,CAAC,EAAG,EAAE,EAC5C,OAAOC,EAAI,KAAQC,EAAI,KAAQC,EAAI,KAAQ,IAAMJ,EAAYD,CAC/D,CAEA,SAASM,EAAcC,EAAwB,CAC7C,IAAIC,EAAO,EACPC,EAEJ,IAAKA,EAAI,EAAGA,EAAIF,EAAO,OAAQE,GAAK,EAClCD,EAAOD,EAAO,WAAWE,CAAC,IAAMD,GAAQ,GAAKA,GAG/C,IAAIN,EAAQ,IAEZ,IAAKO,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAG,CACzB,MAAMC,EAASF,GAASC,EAAI,EAAM,IAClCP,GAAS,KAAKQ,EAAM,SAAS,EAAE,CAAC,GAAG,MAAM,EAAE,CAC7C,CAEA,OAAOR,CACT,CAEA,SAASS,EAAaC,EAAcC,EAAaC,EAA2B,CAnC5E,IAAAC,EAAAC,EAAAC,EAAAC,EAoCE,MAAMC,EAAUb,EAAcO,CAAG,EAC3BO,EAAYN,IAAS,QAAU,GAAK,GAE1C,MAAO,CACL,GAAI,CACF,QAAAK,EACA,MAAOC,EACP,OAAQA,EACR,SANaN,IAAS,QAAU,GAAK,GAOrC,MAAOhB,EAAgBqB,EAAS,UAAW,SAAS,CAAA,EAEtD,SAAU,KAAGJ,EAAAH,GAAA,KAAA,OAAAA,EAAM,MAAM,GAAA,EAAK,CAAA,IAAjB,cAAsB,CAAA,IAAM,EAAE,IAAGM,GAAAD,GAAAD,EAAAJ,GAAA,KAAA,OAAAA,EAAM,MAAM,GAAA,IAAZ,KAAA,OAAAI,EAAmB,KAAnB,KAAA,OAAAC,EAAwB,CAAA,IAAxB,OAA8B,EAAE,EAAA,CAElF,CAEA,SAASI,EAAW,CAAE,IAAAR,EAAK,YAAAS,EAAa,KAAAR,GAAsC,CAE5E,MAAMS,EAAcC,EAAAA,QAAQ,IAAMb,EAAaW,EAAaT,EAAKC,CAAI,EAAG,CAACQ,EAAaT,EAAKC,CAAI,CAAC,EAEhG,OACEW,EAAAA,IAACC,EAAA,CAAQ,MAAOJ,EACd,SAAAG,EAAAA,IAACE,GAAQ,GAAGJ,EAAa,UAAU,eAAA,CAAgB,CAAA,CACrD,CAEJ,CAEA,MAAAK,EAAeC,EAAAA,KAAKR,CAAU"}