{"version":3,"file":"chunk-Bgbo4R2z.js","sources":["../../src/stores/userListStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { OnlineUser } from '@/context/userList';\n\n// Performance tracking\ninterface PerformanceMetrics {\n  lastUpdateTime: number;\n  updateCount: number;\n  averageUpdateInterval: number;\n}\n\ninterface UserListStore {\n  // State\n  onlineUsers: Record<string, OnlineUser>;\n  loading: boolean;\n  error: string | null;\n  room: string | null;\n  _performanceMetrics: PerformanceMetrics;\n  _pendingUpdates: Record<string, OnlineUser | null>; // null means removal\n  _batchTimeout: NodeJS.Timeout | null;\n\n  // Actions\n  setUsers: (users: Record<string, OnlineUser>) => void;\n  addUser: (uid: string, user: OnlineUser) => void;\n  removeUser: (uid: string) => void;\n  clearUsers: () => void;\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  setRoom: (room: string | null) => void;\n\n  // Performance optimized actions\n  batchUpdateUsers: (updates: Record<string, OnlineUser | null>) => void;\n  flushPendingUpdates: () => void;\n\n  // Selectors\n  getUsersByRoom: (room?: string) => Record<string, OnlineUser>;\n  getActiveUserCount: () => number;\n  getPerformanceMetrics: () => PerformanceMetrics;\n}\n\nconst BATCH_DELAY = 50; // 50ms debounce for real-time updates\n\nexport const useUserListStore = create<UserListStore>((set, get) => ({\n  // State\n  onlineUsers: {},\n  loading: false,\n  error: null,\n  room: null,\n  _performanceMetrics: {\n    lastUpdateTime: Date.now(),\n    updateCount: 0,\n    averageUpdateInterval: 0,\n  },\n  _pendingUpdates: {},\n  _batchTimeout: null,\n\n  // Actions\n  setUsers: (users) => {\n    const now = Date.now();\n    set((state) => {\n      const timeDiff = now - state._performanceMetrics.lastUpdateTime;\n      const newUpdateCount = state._performanceMetrics.updateCount + 1;\n      const newAverage =\n        (state._performanceMetrics.averageUpdateInterval * state._performanceMetrics.updateCount +\n          timeDiff) /\n        newUpdateCount;\n\n      return {\n        onlineUsers: users,\n        loading: false,\n        error: null,\n        _performanceMetrics: {\n          lastUpdateTime: now,\n          updateCount: newUpdateCount,\n          averageUpdateInterval: newAverage,\n        },\n      };\n    });\n  },\n\n  addUser: (uid, user) => {\n    const state = get();\n    state._pendingUpdates[uid] = user;\n\n    // Debounced batch update\n    if (state._batchTimeout) clearTimeout(state._batchTimeout);\n    const timeout = setTimeout(() => {\n      state.flushPendingUpdates();\n    }, BATCH_DELAY);\n    set({ _batchTimeout: timeout });\n  },\n\n  removeUser: (uid) => {\n    const state = get();\n    state._pendingUpdates[uid] = null; // null indicates removal\n\n    // Debounced batch update\n    if (state._batchTimeout) clearTimeout(state._batchTimeout);\n    const timeout = setTimeout(() => {\n      state.flushPendingUpdates();\n    }, BATCH_DELAY);\n    set({ _batchTimeout: timeout });\n  },\n\n  batchUpdateUsers: (updates) =>\n    set((state) => {\n      const newUsers = { ...state.onlineUsers };\n\n      Object.entries(updates).forEach(([uid, user]) => {\n        if (user === null) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { [uid]: _, ...remaining } = newUsers;\n          Object.assign(newUsers, remaining);\n        } else {\n          newUsers[uid] = user;\n        }\n      });\n\n      const now = Date.now();\n      const timeDiff = now - state._performanceMetrics.lastUpdateTime;\n      const newUpdateCount = state._performanceMetrics.updateCount + 1;\n      const newAverage =\n        (state._performanceMetrics.averageUpdateInterval * state._performanceMetrics.updateCount +\n          timeDiff) /\n        newUpdateCount;\n\n      return {\n        onlineUsers: newUsers,\n        _performanceMetrics: {\n          lastUpdateTime: now,\n          updateCount: newUpdateCount,\n          averageUpdateInterval: newAverage,\n        },\n      };\n    }),\n\n  flushPendingUpdates: () => {\n    const state = get();\n    if (Object.keys(state._pendingUpdates).length === 0) return;\n\n    state.batchUpdateUsers(state._pendingUpdates);\n    set(() => ({ _pendingUpdates: {} }));\n  },\n\n  clearUsers: () =>\n    set(() => ({\n      onlineUsers: {},\n      loading: false,\n      error: null,\n      _pendingUpdates: {},\n    })),\n\n  setLoading: (loading) => set(() => ({ loading })),\n\n  setError: (error) => set(() => ({ error, loading: false })),\n\n  setRoom: (room) => set(() => ({ room })),\n\n  // Selectors\n  getUsersByRoom: (room) => {\n    const state = get();\n    if (!room) return state.onlineUsers;\n\n    // Filter users by room if needed (current implementation doesn't filter by room)\n    // This is here for future extensibility when room-specific user filtering is needed\n    return state.onlineUsers;\n  },\n\n  getActiveUserCount: () => {\n    const state = get();\n    return Object.keys(state.onlineUsers).length;\n  },\n\n  getPerformanceMetrics: () => {\n    const state = get();\n    return state._performanceMetrics;\n  },\n}));\n\n// Compatibility selectors for optimized subscriptions\nexport const useOnlineUsers = () => useUserListStore((state) => state.onlineUsers);\nexport const useUserListLoading = () => useUserListStore((state) => state.loading);\nexport const useUserListError = () => useUserListStore((state) => state.error);\nexport const useActiveUserCount = () => useUserListStore((state) => state.getActiveUserCount());\n\n// Performance-optimized hooks\nexport const useUserListPerformance = () =>\n  useUserListStore((state) => state.getPerformanceMetrics());\n\n// Memoized selectors for better performance\nexport const useUserCount = () =>\n  useUserListStore((state) => Object.keys(state.onlineUsers).length);\nexport const useUserIds = () => useUserListStore((state) => Object.keys(state.onlineUsers));\nexport const useHasUsers = () =>\n  useUserListStore((state) => Object.keys(state.onlineUsers).length > 0);\n\n// Specific user selectors to prevent unnecessary re-renders\nexport const useUser = (uid: string) => useUserListStore((state) => state.onlineUsers[uid]);\nexport const useIsUserOnline = (uid: string) =>\n  useUserListStore((state) => !!state.onlineUsers[uid]);\n"],"names":["BATCH_DELAY","useUserListStore","create","set","get","users","now","state","timeDiff","newUpdateCount","newAverage","uid","user","timeout","updates","newUsers","_","remaining","loading","error","room"],"mappings":"mkBAuCA,MAAMA,EAAc,GAEPC,EAAmBC,EAAsB,CAACC,EAAKC,KAAS,CAEnE,YAAa,CAAA,EACb,QAAS,GACT,MAAO,KACP,KAAM,KACN,oBAAqB,CACnB,eAAgB,KAAK,IAAA,EACrB,YAAa,EACb,sBAAuB,CAAA,EAEzB,gBAAiB,CAAA,EACjB,cAAe,KAGf,SAAWC,GAAU,CACnB,MAAMC,EAAM,KAAK,IAAA,EACjBH,EAAKI,GAAU,CACb,MAAMC,EAAWF,EAAMC,EAAM,oBAAoB,eAC3CE,EAAiBF,EAAM,oBAAoB,YAAc,EACzDG,GACHH,EAAM,oBAAoB,sBAAwBA,EAAM,oBAAoB,YAC3EC,GACFC,EAEF,MAAO,CACL,YAAaJ,EACb,QAAS,GACT,MAAO,KACP,oBAAqB,CACnB,eAAgBC,EAChB,YAAaG,EACb,sBAAuBC,CAAA,CACzB,CAEJ,CAAC,CACH,EAEA,QAAS,CAACC,EAAKC,IAAS,CACtB,MAAML,EAAQH,EAAA,EACdG,EAAM,gBAAgBI,CAAG,EAAIC,EAGzBL,EAAM,eAAe,aAAaA,EAAM,aAAa,EACzD,MAAMM,EAAU,WAAW,IAAM,CAC/BN,EAAM,oBAAA,CACR,EAAGP,CAAW,EACdG,EAAI,CAAE,cAAeU,EAAS,CAChC,EAEA,WAAaF,GAAQ,CACnB,MAAMJ,EAAQH,EAAA,EACdG,EAAM,gBAAgBI,CAAG,EAAI,KAGzBJ,EAAM,eAAe,aAAaA,EAAM,aAAa,EACzD,MAAMM,EAAU,WAAW,IAAM,CAC/BN,EAAM,oBAAA,CACR,EAAGP,CAAW,EACdG,EAAI,CAAE,cAAeU,EAAS,CAChC,EAEA,iBAAmBC,GACjBX,EAAKI,GAAU,CACb,MAAMQ,EAAW,CAAE,GAAGR,EAAM,WAAA,EAE5B,OAAO,QAAQO,CAAO,EAAE,QAAQ,CAAC,CAACH,EAAKC,CAAI,IAAM,CAC/C,GAAIA,IAAS,KAAM,CAEjB,KAAM,CAAE,CAACD,CAAG,EAAGK,EAAG,GAAGC,GAAcF,EACnC,OAAO,OAAOA,EAAUE,CAAS,CACnC,MACEF,EAASJ,CAAG,EAAIC,CAEpB,CAAC,EAED,MAAMN,EAAM,KAAK,IAAA,EACXE,EAAWF,EAAMC,EAAM,oBAAoB,eAC3CE,EAAiBF,EAAM,oBAAoB,YAAc,EACzDG,GACHH,EAAM,oBAAoB,sBAAwBA,EAAM,oBAAoB,YAC3EC,GACFC,EAEF,MAAO,CACL,YAAaM,EACb,oBAAqB,CACnB,eAAgBT,EAChB,YAAaG,EACb,sBAAuBC,CAAA,CACzB,CAEJ,CAAC,EAEH,oBAAqB,IAAM,CACzB,MAAMH,EAAQH,EAAA,EACV,OAAO,KAAKG,EAAM,eAAe,EAAE,SAAW,IAElDA,EAAM,iBAAiBA,EAAM,eAAe,EAC5CJ,EAAI,KAAO,CAAE,gBAAiB,CAAA,GAAK,EACrC,EAEA,WAAY,IACVA,EAAI,KAAO,CACT,YAAa,CAAA,EACb,QAAS,GACT,MAAO,KACP,gBAAiB,CAAA,CAAC,EAClB,EAEJ,WAAae,GAAYf,EAAI,KAAO,CAAE,QAAAe,GAAU,EAEhD,SAAWC,GAAUhB,EAAI,KAAO,CAAE,MAAAgB,EAAO,QAAS,EAAA,EAAQ,EAE1D,QAAUC,GAASjB,EAAI,KAAO,CAAE,KAAAiB,GAAO,EAGvC,eAAiBA,GAAS,CACxB,MAAMb,EAAQH,EAAA,EACd,OAIOG,EAAM,WACf,EAEA,mBAAoB,IAAM,CACxB,MAAMA,EAAQH,EAAA,EACd,OAAO,OAAO,KAAKG,EAAM,WAAW,EAAE,MACxC,EAEA,sBAAuB,IACPH,EAAA,EACD,mBAEjB,EAAE"}