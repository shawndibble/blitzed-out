{"version":3,"file":"chunk-BoJodteh.js","sources":["../../src/helpers/strings.ts","../../src/context/hooks/useAuth.ts","../../src/context/hooks/useMessages.ts","../../src/hooks/usePlayerList.ts"],"sourcesContent":["export function camelToPascal(text?: string): string {\n  const word = text?.replace(/([A-Z])/g, ' $1').trim();\n  if (!word) return '';\n  return word.charAt(0).toUpperCase() + word.slice(1);\n}\n\nexport function pascalToCamel(text: string): string {\n  return text.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, (match, index) => {\n    if (+match === 0) return ''; // or if (/\\s+/.test(match)) for white spaces\n    return index === 0 ? match.toLowerCase() : match.toUpperCase();\n  });\n}\n\nexport function a11yProps(index: number | string): {\n  id: string;\n  'aria-controls': string;\n} {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nexport function extractAction(message?: string): string | undefined {\n  const textLines = message?.split(/\\r?\\n/) || [];\n  return textLines[textLines.length - 1]?.split(':')[1];\n}\n\nexport function extractTime(string: string, timeValue: string): string[] | undefined {\n  const reg = new RegExp(`\\\\d+\\\\s${timeValue}`, 'g');\n  return string.match(reg)?.filter((value, index, array) => array.indexOf(value) === index);\n}\n\nexport function isPublicRoom(room?: string): boolean {\n  return room?.toUpperCase() === 'PUBLIC';\n}\n\n// aka solo game mode.\nexport function isOnlineMode(gameMode: string): boolean {\n  return gameMode === 'online';\n}\n","import { useContext } from 'react';\nimport { AuthContext, AuthContextType } from '@/context/auth';\n\nexport default function useAuth(): Omit<AuthContextType, 'user'> & {\n  user: NonNullable<AuthContextType['user']>;\n} {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context as Omit<AuthContextType, 'user'> & { user: NonNullable<AuthContextType['user']> };\n}\n","import React from 'react';\nimport { MessagesContext, MessagesContextType } from '../messages';\n\nexport default function useMessages(): MessagesContextType {\n  const value = React.useContext(MessagesContext);\n\n  if (!value) {\n    throw new Error(\"MessagesContext's value is undefined.\");\n  }\n\n  return value;\n}\n","import { t } from 'i18next';\nimport { useMemo } from 'react';\nimport { orderedMessagesByType } from '@/helpers/messages';\nimport useAuth from '@/context/hooks/useAuth';\nimport useMessages from '@/context/hooks/useMessages';\nimport { useUserListStore } from '@/stores/userListStore';\nimport { Message } from '@/types/Message';\n\ninterface Player {\n  displayName: string;\n  uid: string;\n  isSelf: boolean;\n  location: number;\n  isFinished: boolean;\n  status: 'active' | 'idle' | 'away';\n  lastActivity: Date;\n}\n\nfunction filteredGameMessages(messages: Message[]): Message[] {\n  const filteredMessages = orderedMessagesByType(messages, 'actions', 'DESC');\n  return [...new Map<string, Message>(filteredMessages.map((m: Message) => [m.uid, m])).values()];\n}\n\nexport default function usePlayerList(): Player[] {\n  const { user } = useAuth();\n  const { messages, isLoading } = useMessages();\n  const { onlineUsers } = useUserListStore();\n\n  const players = useMemo(() => {\n    if (isLoading || !user) return [];\n\n    const uniqueGameActions = filteredGameMessages(messages);\n\n    return Object.values(onlineUsers)\n      .map((userInfo) => {\n        // Extract game location from messages\n        const userGameMessage = uniqueGameActions.find(\n          (message) => message.uid === userInfo.uid\n        )?.text;\n\n        const locationRegEx = /(?:#)[\\d]*(?=:)/gs;\n        let currentLocation = 0;\n\n        if (userGameMessage && userGameMessage.match(locationRegEx)) {\n          const match = userGameMessage.match(locationRegEx);\n          if (match && match[0]) {\n            currentLocation = Number(match[0].replace('#', ''));\n          }\n        }\n\n        const location = currentLocation > 0 ? currentLocation - 1 : currentLocation;\n        const isFinished = Boolean(userGameMessage?.includes(t('finish')));\n\n        return {\n          displayName: userInfo.displayName || 'Unknown',\n          uid: userInfo.uid,\n          isSelf: userInfo.uid === user.uid,\n          location: userInfo.gameState?.location || location,\n          isFinished: userInfo.gameState?.isFinished || isFinished,\n          status: userInfo.status || 'away',\n          lastActivity: userInfo.lastSeen || new Date(0),\n        };\n      })\n      .sort((a, b) => {\n        // Sort by: self first, then active status, then by name\n        if (a.isSelf) return -1;\n        if (b.isSelf) return 1;\n        if (a.status === 'active' && b.status !== 'active') return -1;\n        if (b.status === 'active' && a.status !== 'active') return 1;\n        return a.displayName.localeCompare(b.displayName);\n      });\n  }, [user, onlineUsers, messages, isLoading]);\n\n  return players;\n}\n"],"names":["camelToPascal","text","word","a11yProps","index","extractAction","message","_a","textLines","extractTime","string","timeValue","reg","value","array","isPublicRoom","room","isOnlineMode","gameMode","useAuth","context","useContext","AuthContext","useMessages","React","MessagesContext","filteredGameMessages","messages","filteredMessages","orderedMessagesByType","m","usePlayerList","user","isLoading","onlineUsers","useUserListStore","useMemo","uniqueGameActions","userInfo","_b","_c","userGameMessage","locationRegEx","currentLocation","match","location","isFinished","t","a","b"],"mappings":"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"}