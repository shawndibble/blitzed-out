{"version":3,"file":"chunk-Chz5q09A.js","sources":["../../src/helpers/urls.ts"],"sourcesContent":["function getExtension(filename?: string): string | false {\n  const parts = filename?.split('.');\n  if (!parts || parts?.length < 2) return false;\n  return parts?.[parts.length - 1];\n}\n\nfunction isVideo(file?: string): boolean {\n  const bgExtension = getExtension(file);\n  return (\n    typeof bgExtension === 'string' &&\n    ['mp4', 'webm', 'mkv', 'flv', 'avi', 'mov', 'wmv', 'mpg', 'mv4'].includes(bgExtension)\n  );\n}\n\nexport function getURLPath(string?: string): string {\n  if (!string) return '';\n\n  if (string?.startsWith('http')) return string;\n\n  if (isVideo(string)) return `/videos/${string}`;\n\n  return `/images/${string}`;\n}\n\nexport function getSiteName(urlString: string): string {\n  return new URL(urlString).hostname\n    .replace('www.', '')\n    .replace('.com', '')\n    .replace('.net', '')\n    .replace('.gg', '');\n}\n\nexport function isValidURL(url: string): boolean {\n  if (!url || typeof url !== 'string') {\n    return false;\n  }\n\n  try {\n    const trimmed = url.trim();\n    if (!trimmed) return false;\n    const parsed = new URL(trimmed);\n\n    // Only allow HTTP and HTTPS protocols\n    if (!['http:', 'https:'].includes(parsed.protocol)) {\n      return false;\n    }\n\n    // Check for path traversal attempts - decode pathname to catch encoded sequences\n    let decodedPathname: string;\n    try {\n      decodedPathname = decodeURIComponent(parsed.pathname);\n    } catch {\n      // If decoding fails, reject the URL as potentially malicious\n      return false;\n    }\n\n    if (decodedPathname.includes('../') || decodedPathname.includes('..\\\\')) {\n      return false;\n    }\n\n    // Ensure hostname is not empty and doesn't contain suspicious characters\n    if (!parsed.hostname || parsed.hostname.includes('..')) {\n      return false;\n    }\n\n    // Basic format validation - must have a path or query\n    if (parsed.pathname === '/' && !parsed.search && !parsed.hash) {\n      return false;\n    }\n\n    return true;\n  } catch {\n    return false;\n  }\n}\n"],"names":["getExtension","filename","parts","isVideo","file","bgExtension","getURLPath","string","getSiteName","urlString","isValidURL","url","trimmed","parsed","decodedPathname","e"],"mappings":"CAAA,UAAA,CAAA,IAAA,EAAA,OAAA,QAAA,YAAA,OAAA,OAAA,QAAA,YAAA,OAAA,OAAA,YAAA,YAAA,WAAA,OAAA,MAAA,YAAA,KAAA,CAAA,EAAA,EAAA,eAAA,CAAA,GAAA,0CAAA,CAAA,GAAA,EAAA,GAAA,EAAA,UAAA,CAAA,IAAA,EAAA,OAAA,QAAA,YAAA,OAAA,OAAA,QAAA,YAAA,OAAA,OAAA,YAAA,YAAA,WAAA,OAAA,MAAA,YAAA,KAAA,CAAA,EAAA,EAAA,IAAA,EAAA,QAAA,MAAA,IAAA,EAAA,gBAAA,EAAA,iBAAA,CAAA,EAAA,EAAA,gBAAA,CAAA,EAAA,uCAAA,EAAA,yBAAA,mDAAA,GAAA,CAAA,OAAA,EAAA,CAAA,CAAA,SAASA,EAAaC,EAAmC,CACvD,MAAMC,EAAQD,iBAAU,MAAM,GAAA,EAC9B,MAAI,CAACC,IAASA,GAAA,KAAA,OAAAA,EAAO,QAAS,EAAU,GACjCA,GAAA,KAAA,OAAAA,EAAQA,EAAM,OAAS,CAAA,CAChC,CAEA,SAASC,EAAQC,EAAwB,CACvC,MAAMC,EAAcL,EAAaI,CAAI,EACrC,OACE,OAAOC,GAAgB,UACvB,CAAC,MAAO,OAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAK,EAAE,SAASA,CAAW,CAEzF,CAEO,SAASC,EAAWC,EAAyB,CAClD,OAAKA,EAEDA,GAAA,MAAAA,EAAQ,WAAW,MAAA,EAAgBA,EAEnCJ,EAAQI,CAAM,EAAU,WAAWA,CAAM,GAEtC,WAAWA,CAAM,GANJ,EAOtB,CAEO,SAASC,EAAYC,EAA2B,CACrD,OAAO,IAAI,IAAIA,CAAS,EAAE,SACvB,QAAQ,OAAQ,EAAE,EAClB,QAAQ,OAAQ,EAAE,EAClB,QAAQ,OAAQ,EAAE,EAClB,QAAQ,MAAO,EAAE,CACtB,CAEO,SAASC,EAAWC,EAAsB,CAC/C,GAAI,CAACA,GAAO,OAAOA,GAAQ,SACzB,MAAO,GAGT,GAAI,CACF,MAAMC,EAAUD,EAAI,KAAA,EACpB,GAAI,CAACC,EAAS,MAAO,GACrB,MAAMC,EAAS,IAAI,IAAID,CAAO,EAG9B,GAAI,CAAC,CAAC,QAAS,QAAQ,EAAE,SAASC,EAAO,QAAQ,EAC/C,MAAO,GAIT,IAAIC,EACJ,GAAI,CACFA,EAAkB,mBAAmBD,EAAO,QAAQ,CACtD,OAAQE,EAAA,CAEN,MAAO,EACT,CAYA,MAVI,EAAAD,EAAgB,SAAS,KAAK,GAAKA,EAAgB,SAAS,MAAM,GAKlE,CAACD,EAAO,UAAYA,EAAO,SAAS,SAAS,IAAI,GAKjDA,EAAO,WAAa,KAAO,CAACA,EAAO,QAAU,CAACA,EAAO,KAK3D,OAAQE,EAAA,CACN,MAAO,EACT,CACF"}