{"version":3,"file":"index.tsx-D6k_po7G.js","sources":["../../src/views/ManageGameBoards/ImportExport/index.tsx","../../src/views/ManageGameBoards/index.tsx"],"sourcesContent":["import { Save, Share } from '@mui/icons-material';\nimport { IconButton, TextField, Tooltip } from '@mui/material';\nimport CopyToClipboard from '@/components/CopyToClipboard';\nimport { useEffect, useState, ChangeEvent, FocusEvent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { updateBoard } from '@/stores/gameBoard';\nimport { DBGameBoard, TileExport } from '@/types/gameBoard';\nimport { AlertState } from '@/types';\n\ninterface ImportExportProps {\n  open: boolean;\n  close: () => void;\n  setAlert: (alert: AlertState) => void;\n  board: DBGameBoard;\n}\n\nexport default function ImportExport({\n  open,\n  close,\n  setAlert,\n  board,\n}: ImportExportProps): JSX.Element {\n  const { t } = useTranslation();\n  const [textValue, setTextField] = useState<string>('');\n  const [boardTitle, setBoardTitle] = useState<string>(board.title || '');\n\n  function getGameTiles(entries: string[]): TileExport[] | null {\n    try {\n      if (!boardTitle.length) {\n        setAlert({\n          message: t('importTitleRequired'),\n        });\n        return null;\n      }\n      return entries.map((entry, index) => {\n        const [title, ...description] = entry.split('\\n').filter((e) => e);\n\n        if (title === undefined) {\n          throw setAlert({\n            message: t('importNoEmpty'),\n          });\n        }\n\n        const surroundedInBrackets = /^\\[.+\\]$/;\n        if (!surroundedInBrackets.test(title)) {\n          throw setAlert({\n            message: t('importInvalidTitle', { entry: index + 1 }),\n          });\n        }\n\n        if (!description.length) {\n          throw setAlert({\n            message: t('importMissingDescription', { entry: index + 1 }),\n          });\n        }\n\n        return {\n          title: title?.replace(/\\[|\\]/g, ''),\n          description: description.join('\\n'),\n        };\n      });\n    } catch {\n      // return nothing. Just wait for setAlert to output the error message.\n      return null;\n    }\n  }\n\n  const importBoard = async (): Promise<null> => {\n    const entries = textValue\n      .split(/~+/) // ~~~ separates each tile.\n      .filter((e) => e);\n\n    const gameTiles = getGameTiles(entries);\n\n    // if we got nothing from getGameTiles, then we have an error message and should stop.\n    if (!gameTiles) return null;\n\n    try {\n      if (JSON.stringify(board.tiles) === JSON.stringify(gameTiles)) {\n        setAlert({\n          message: t('importNoChange'),\n        });\n        return null;\n      }\n    } catch {\n      setAlert({\n        message: t('error'),\n        type: 'error',\n      });\n      return null;\n    }\n\n    updateBoard({ ...board, title: boardTitle, tiles: gameTiles });\n\n    setAlert({\n      message: t('saved'),\n      type: 'success',\n    });\n\n    close();\n    return null;\n  };\n\n  const exportBoard = (): void => {\n    // Guard against null/undefined tiles and properties\n    const arrayExport = board?.tiles\n      ?.map((tile) => {\n        if (!tile) return '';\n        const title = tile.title || '';\n        const description = tile.description || '';\n        return `[${title}]\\n${description}`;\n      })\n      .filter(Boolean);\n\n    setTextField(arrayExport?.join('\\n~~\\n') || '');\n  };\n\n  const changeTitle = (event: ChangeEvent<HTMLInputElement>): void => {\n    setBoardTitle(event.target.value);\n  };\n\n  const saveTitle = async (event: FocusEvent<HTMLInputElement>): Promise<null | undefined> => {\n    if (!event.target.value.length) {\n      setAlert({ message: t('importTitleRequired') });\n      return null;\n    }\n    updateBoard({ ...board, title: event.target.value });\n    return undefined;\n  };\n\n  useEffect(() => {\n    if (open) {\n      exportBoard();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open]); // Removed board dependency to avoid circular reference\n\n  // Sync boardTitle state with board.title prop when it changes\n  useEffect(() => {\n    setBoardTitle(board.title || '');\n  }, [board.title]);\n\n  return (\n    <>\n      <TextField\n        fullWidth\n        label={t('title')}\n        value={boardTitle}\n        onChange={changeTitle}\n        onBlur={saveTitle}\n      />\n      <TextField\n        sx={{ mt: 2 }}\n        multiline\n        fullWidth\n        value={textValue}\n        onChange={(event: ChangeEvent<HTMLInputElement>) => setTextField(event.target.value)}\n        InputProps={{\n          endAdornment: (\n            <div\n              style={{\n                display: 'flex',\n                flexDirection: 'column',\n                position: 'sticky',\n                top: 0,\n              }}\n            >\n              <Tooltip title={t('save')}>\n                <IconButton size=\"small\" onClick={importBoard} aria-label={t('save')}>\n                  <Save color=\"success\" />\n                </IconButton>\n              </Tooltip>\n              <CopyToClipboard text={textValue} />\n              <CopyToClipboard\n                text={`${window.location.href}?importBoard=${board.id}`}\n                copiedText={t('copiedLink')}\n                icon={<Share />}\n                tooltip={t('copyShareLink')}\n              />\n            </div>\n          ),\n          sx: { alignItems: 'flex-start' },\n        }}\n      />\n    </>\n  );\n}\n","import {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  IconButton,\n  Switch,\n  Tooltip,\n  Typography,\n} from '@mui/material';\nimport CloseIcon from '@/components/CloseIcon';\nimport { Trans } from 'react-i18next';\nimport ImportExport from './ImportExport';\nimport { useState } from 'react';\nimport ToastAlert from '@/components/ToastAlert';\nimport { activateBoard, deleteBoard, getBoards, upsertBoard } from '@/stores/gameBoard';\nimport { useLiveQuery } from 'dexie-react-hooks';\nimport Accordion from '@/components/Accordion';\nimport AccordionSummary from '@/components/Accordion/Summary';\nimport AccordionDetails from '@/components/Accordion/Details';\nimport { AddCircle, Delete } from '@mui/icons-material';\nimport { t } from 'i18next';\nimport { useSettings } from '@/stores/settingsStore';\nimport useAuth from '@/context/hooks/useAuth';\nimport { getOrCreateBoard, sendMessage } from '@/services/firebase';\nimport { AlertState } from '@/types';\n\ninterface GameBoardProps {\n  open: boolean;\n  close: () => void;\n  isMobile: boolean;\n}\n\nexport default function GameBoard({ open, close, isMobile }: GameBoardProps) {\n  const gameBoards = useLiveQuery(getBoards);\n  const [alert, setAlert] = useState<AlertState | null>(null);\n  const [confirmDialog, setConfirmDialog] = useState<number>(0);\n  const [expandedElement, setExpanded] = useState<number>(0);\n  const settings = useSettings()[0];\n  const { user } = useAuth();\n\n  if (!gameBoards) {\n    return null;\n  }\n\n  const getFinishRange = (tiles: any[]) => {\n    if (!tiles || !tiles.length) return null;\n    const lastTile = tiles[tiles.length - 1];\n    if (!lastTile?.description) return null;\n    const percentageValues = lastTile.description.match(/\\d+%/g);\n    return percentageValues;\n  };\n\n  const handleSetAlert = (alert: AlertState) => {\n    setAlert(alert);\n  };\n\n  async function createGameMessage({ title, tiles }: { title: string; tiles: any[] }) {\n    const gameTileTitles = tiles.map(\n      ({ title: tileTitle }: { title: string }) => `* ${tileTitle} \\n`\n    );\n    // remove our start and finish tiles from the list.\n    gameTileTitles.pop();\n    gameTileTitles.shift();\n\n    let message = `### ${t('activated')}: ${title}\\n`;\n    message += '---\\n';\n    message += [...new Set(gameTileTitles)].join(' ');\n    message += '---\\n';\n    // get finishRange from the last tile.\n    const finishRange = getFinishRange(tiles);\n    if (finishRange && finishRange.length === 3) {\n      message += `* ${t('finishSlider')} ${finishRange[0]}  | ${finishRange[1]} | ${finishRange[2]}`;\n    }\n\n    const gameBoard = await getOrCreateBoard({\n      title,\n      gameBoard: JSON.stringify(tiles) as string,\n      settings: JSON.stringify(settings) as string,\n    });\n\n    if (!gameBoard?.id) {\n      return;\n    }\n\n    await sendMessage({\n      room: settings?.room || 'PUBLIC',\n      user,\n      text: message,\n      type: 'settings',\n      gameBoardId: gameBoard.id,\n      boardSize: tiles.length,\n      gameMode: settings?.gameMode,\n    });\n  }\n\n  const addBoard = async () => {\n    const boardId = (await upsertBoard({ isActive: 0 })) || 0;\n    setExpanded(boardId);\n  };\n\n  const enableBoard = (board: any) => {\n    activateBoard(board.id);\n    createGameMessage(board);\n    setAlert({ message: t('boardEnabled'), type: 'success' });\n  };\n\n  const confirmDelete = (boardId: number) => {\n    if (boardId === 0) return;\n    setConfirmDialog(boardId);\n  };\n\n  const deleteGameBoard = () => {\n    if (typeof confirmDialog === 'number') {\n      deleteBoard(confirmDialog);\n    }\n    setConfirmDialog(0);\n  };\n\n  const handleExpand = (panel: number) => (_event: React.SyntheticEvent, newExpanded: boolean) => {\n    setExpanded(newExpanded ? panel : 0);\n  };\n\n  const invalidBoard = (board: any) =>\n    !board.tiles || board.tiles.length !== (settings?.roomTileCount || 40);\n\n  const getSwitchTooltip = (board: any) => {\n    if (invalidBoard(board)) {\n      return t('boardWrongSize', { size: settings?.roomTileCount || 40 });\n    }\n    if (board.isActive) {\n      return t('boardActive');\n    }\n    return t('enableBoard');\n  };\n\n  return (\n    <>\n      <Dialog\n        fullScreen={isMobile}\n        open={open}\n        onClose={close}\n        PaperProps={{\n          sx: {\n            maxHeight: '100%',\n            height: '100%',\n          },\n        }}\n      >\n        <DialogTitle>\n          <Trans i18nKey=\"manageGameBoards\" />\n          <CloseIcon close={close} />\n        </DialogTitle>\n        <DialogContent style={{ overflowY: 'scroll' }}>\n          <Box sx={{ mb: 1 }}>\n            <Button\n              variant=\"outlined\"\n              onClick={addBoard}\n              endIcon={<AddCircle />}\n              sx={{ float: 'right' }}\n            >\n              <Trans i18nKey=\"add\" />\n            </Button>\n            <Typography>\n              <Trans i18nKey=\"gameBoardDescription\" />\n            </Typography>\n          </Box>\n\n          {gameBoards.map((board) => (\n            <Accordion\n              key={board.id}\n              expanded={expandedElement === board.id}\n              onChange={handleExpand(board.id || 0)}\n            >\n              <AccordionSummary>\n                <Box>\n                  <Typography variant=\"body1\">{board.title}</Typography>\n                  <Typography variant=\"body2\">\n                    {t('tilesCount', { count: board.tiles?.length || 0 })}\n                  </Typography>\n                </Box>\n                <Box style={{ marginLeft: 'auto' }} justifyContent=\"flex-end\">\n                  <Tooltip title={getSwitchTooltip(board)}>\n                    <div style={{ display: 'inline-block' }}>\n                      <Switch\n                        checked={!!board.isActive}\n                        disabled={!!board.isActive || invalidBoard(board)}\n                        onChange={() => enableBoard(board)}\n                        size=\"small\"\n                      />\n                    </div>\n                  </Tooltip>\n                  <Tooltip title={t('delete')}>\n                    <span style={{ display: 'inline-block' }}>\n                      <IconButton\n                        onClick={() => confirmDelete(board.id || 0)}\n                        size=\"small\"\n                        component=\"span\"\n                      >\n                        <Delete color=\"error\" />\n                      </IconButton>\n                    </span>\n                  </Tooltip>\n                </Box>\n              </AccordionSummary>\n              <AccordionDetails>\n                <ImportExport\n                  open={open}\n                  close={() => handleExpand(board.id || 0)(null as any, false)}\n                  setAlert={handleSetAlert}\n                  board={board}\n                />\n              </AccordionDetails>\n            </Accordion>\n          ))}\n        </DialogContent>\n      </Dialog>\n      <ToastAlert\n        open={!!alert?.message}\n        type={alert?.type || 'error'}\n        close={() => setAlert(null)}\n      >\n        {alert?.message}\n      </ToastAlert>\n      <Dialog open={!!confirmDialog} onClose={() => setConfirmDialog(0)}>\n        <DialogTitle>\n          {t('deleteBoard')}\n          <CloseIcon close={() => setConfirmDialog(0)} />\n        </DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body1\">\n            {t('confirmDeleteBoard', {\n              title: gameBoards.find((board) => board.id === confirmDialog)?.title,\n            })}\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setConfirmDialog(0)}>{t('cancel')}</Button>\n          <Button onClick={deleteGameBoard}>{t('delete')}</Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n"],"names":["ImportExport","open","close","setAlert","board","t","useTranslation","textValue","setTextField","useState","boardTitle","setBoardTitle","getGameTiles","entries","entry","index","title","description","e","importBoard","gameTiles","updateBoard","exportBoard","_a","arrayExport","tile","changeTitle","event","saveTitle","useEffect","jsxs","Fragment","jsx","TextField","Tooltip","IconButton","Save","CopyToClipboard","Share","GameBoard","isMobile","gameBoards","useLiveQuery","getBoards","alert","confirmDialog","setConfirmDialog","expandedElement","setExpanded","settings","useSettings","user","useAuth","getFinishRange","tiles","lastTile","handleSetAlert","createGameMessage","gameTileTitles","tileTitle","message","finishRange","gameBoard","getOrCreateBoard","sendMessage","addBoard","boardId","upsertBoard","enableBoard","activateBoard","confirmDelete","deleteGameBoard","deleteBoard","handleExpand","panel","_event","newExpanded","invalidBoard","getSwitchTooltip","Dialog","DialogTitle","Trans","CloseIcon","DialogContent","Box","Button","AddCircle","Typography","Accordion","AccordionSummary","Switch","Delete","AccordionDetails","ToastAlert","DialogActions"],"mappings":"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"}