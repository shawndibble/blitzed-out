{"version":3,"mappings":"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","names":["ConfirmationModal","open","onClose","onConfirm","onCancel","title","message","confirmText","cancelText","severity","confirmColor","useTranslation","isMobile","useBreakpoint","handleCancel","handleConfirm","error","jsxs","Dialog","jsx","DialogTitle","DialogContent","Alert","DialogContentText","DialogActions","Button","LanguageChangeModal","onRebuildBoard","onKeepBoard","fromLanguage","toLanguage","_a","_b","t","fromLanguageLabel","languages","toLanguageLabel","handleRebuildBoard","handleKeepBoard","Trans","Fragment","AppSettingsDialog","lazyWithRetry","__vitePreload","GameSettingsDialog","GameGuide","ManageGameBoards","Schedule","CustomTileDialog","MenuDrawer","room","useParams","user","wipeAllData","isAnonymous","useAuth","i18n","menuOpen","setMenu","useState","toggleDrawer","useCallback","isOpen","gameSettings","useSettings","setOpen","toggleDialog","type","prev","handleWipeData","openInNewTab","url","discordIcon","useMemo","SvgIcon","setLocale","updateSettings","useSettingsStore","languageLoading","setLanguageLoading","pendingLanguageChange","setPendingLanguageChange","submitSettings","useSubmitGameSettings","actionsList","useUnifiedActionList","handleLanguageChange","event","newLanguage","currentLanguage","resolve","onLanguageChanged","handleBoardRebuildDecision","shouldRebuildBoard","handleLanguageModalClose","languageMenuItems","key","obj","MenuItem","menuList","items","AppRegistration","ViewModule","Tv","CalendarMonth","InfoIcon","TuneIcon","SettingsIcon","LinkIcon","Logout","icon","onClick","ListItem","ListItemButton","ListItemIcon","ListItemText","renderDialog","Component","dialogKey","props","Suspense","IconButton","MenuIcon","Drawer","Box","List","FormControl","InputLabel","Language","Select","DialogWrapper","AuthDialog"],"ignoreList":[],"sources":["../../src/components/ConfirmationModal/index.tsx","../../src/components/LanguageChangeModal/index.tsx","../../src/views/Navigation/MenuDrawer/index.tsx"],"sourcesContent":["import {\n  Alert,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n} from '@mui/material';\n\nimport { ReactNode } from 'react';\nimport useBreakpoint from '@/hooks/useBreakpoint';\nimport { useTranslation } from 'react-i18next';\n\nexport interface ConfirmationModalProps {\n  open: boolean;\n  onClose: () => void;\n  onConfirm: () => void | Promise<void>;\n  onCancel?: () => void;\n  title: ReactNode;\n  message: ReactNode;\n  confirmText?: string;\n  cancelText?: string;\n  severity?: 'info' | 'warning' | 'error' | 'success';\n  confirmColor?: 'primary' | 'secondary' | 'error' | 'warning' | 'info' | 'success';\n}\n\nexport default function ConfirmationModal({\n  open,\n  onClose,\n  onConfirm,\n  onCancel,\n  title,\n  message,\n  confirmText,\n  cancelText,\n  severity = 'info',\n  confirmColor = 'primary',\n}: ConfirmationModalProps): JSX.Element {\n  const { t } = useTranslation();\n  const isMobile = useBreakpoint();\n\n  const handleCancel = (): void => {\n    if (onCancel) {\n      onCancel();\n    } else {\n      onClose();\n    }\n  };\n\n  const handleConfirm = async (): Promise<void> => {\n    try {\n      await onConfirm();\n      onClose();\n    } catch (error) {\n      console.error('Confirmation action failed:', error);\n      // Modal stays open if confirmation fails\n    }\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      fullScreen={isMobile}\n      maxWidth=\"sm\"\n      fullWidth\n      aria-labelledby=\"confirmation-dialog-title\"\n      aria-describedby=\"confirmation-dialog-description\"\n    >\n      <DialogTitle id=\"confirmation-dialog-title\">{title}</DialogTitle>\n      <DialogContent>\n        {severity !== 'info' && (\n          <Alert severity={severity} sx={{ mb: 2 }}>\n            {severity === 'warning' && t('warning')}\n            {severity === 'error' && t('error')}\n            {severity === 'success' && t('success')}\n          </Alert>\n        )}\n        <DialogContentText id=\"confirmation-dialog-description\">{message}</DialogContentText>\n      </DialogContent>\n      <DialogActions sx={{ p: 2, gap: 1 }}>\n        <Button onClick={handleCancel} variant=\"outlined\" fullWidth={isMobile}>\n          {cancelText || t('cancel')}\n        </Button>\n        <Button\n          onClick={handleConfirm}\n          variant=\"contained\"\n          color={confirmColor}\n          fullWidth={isMobile}\n          autoFocus\n        >\n          {confirmText || t('confirm')}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import { Trans, useTranslation } from 'react-i18next';\nimport ConfirmationModal from '@/components/ConfirmationModal';\nimport { languages } from '@/services/i18nHelpers';\n\ninterface LanguageChangeModalProps {\n  open: boolean;\n  onClose: () => void;\n  onRebuildBoard: () => void;\n  onKeepBoard: () => void;\n  fromLanguage: string;\n  toLanguage: string;\n}\n\nexport default function LanguageChangeModal({\n  open,\n  onClose,\n  onRebuildBoard,\n  onKeepBoard,\n  fromLanguage,\n  toLanguage,\n}: LanguageChangeModalProps): JSX.Element {\n  const { t } = useTranslation();\n\n  const fromLanguageLabel = languages[fromLanguage]?.label || fromLanguage;\n  const toLanguageLabel = languages[toLanguage]?.label || toLanguage;\n\n  const handleRebuildBoard = (): void => {\n    onRebuildBoard();\n    onClose();\n  };\n\n  const handleKeepBoard = (): void => {\n    onKeepBoard();\n    onClose();\n  };\n\n  return (\n    <ConfirmationModal\n      open={open}\n      onClose={onClose}\n      onConfirm={handleRebuildBoard}\n      onCancel={handleKeepBoard}\n      title={<Trans i18nKey=\"languageChangeTitle\" />}\n      message={\n        <>\n          <Trans\n            i18nKey=\"languageChangeMessage\"\n            values={{\n              fromLanguage: fromLanguageLabel,\n              toLanguage: toLanguageLabel,\n            }}\n          />\n          <br />\n          <br />\n          <Trans i18nKey=\"languageChangeExplanation\" />\n        </>\n      }\n      confirmText={t('rebuildBoardAction')}\n      cancelText={t('keepCurrentBoard')}\n      severity=\"info\"\n      confirmColor=\"primary\"\n    />\n  );\n}\n","import {\n  AppRegistration,\n  CalendarMonth,\n  Language,\n  Link as LinkIcon,\n  Logout,\n  Tv,\n  ViewModule,\n} from '@mui/icons-material';\nimport InfoIcon from '@mui/icons-material/Info';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport TuneIcon from '@mui/icons-material/Tune';\nimport {\n  Box,\n  Drawer,\n  FormControl,\n  IconButton,\n  InputLabel,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n  SvgIcon,\n} from '@mui/material';\nimport { useAuth } from '@/hooks/useAuth';\nimport useBreakpoint from '@/hooks/useBreakpoint';\nimport { Suspense, useMemo, useState, ReactNode, useCallback } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport DialogWrapper from '@/components/DialogWrapper';\nimport AuthDialog from '@/components/auth/AuthDialog';\nimport { useSettings, useSettingsStore } from '@/stores/settingsStore';\nimport { languages } from '@/services/i18nHelpers';\nimport LanguageChangeModal from '@/components/LanguageChangeModal';\nimport useSubmitGameSettings from '@/hooks/useSubmitGameSettings';\nimport useUnifiedActionList from '@/hooks/useUnifiedActionList';\nimport { lazyWithRetry } from '@/utils/lazyWithRetry';\n\n// Lazy load dialogs with retry logic\nconst AppSettingsDialog = lazyWithRetry(() => import('@/components/AppSettingsDialog'));\nconst GameSettingsDialog = lazyWithRetry(() => import('@/components/GameSettingsDialog'));\nconst GameGuide = lazyWithRetry(() => import('@/views/GameGuide'));\nconst ManageGameBoards = lazyWithRetry(() => import('@/views/ManageGameBoards'));\nconst Schedule = lazyWithRetry(() => import('@/views/Schedule'));\nconst CustomTileDialog = lazyWithRetry(() => import('@/components/CustomTilesDialog'));\n\ninterface MenuItemType {\n  key: string;\n  title: ReactNode;\n  icon: ReactNode;\n  onClick: () => void;\n}\n\ninterface DialogState {\n  settings: boolean;\n  gameBoard: boolean;\n  about: boolean;\n  schedule: boolean;\n  customTiles: boolean;\n  linkAccount: boolean;\n  appSettings: boolean;\n  languageChange: boolean;\n  [key: string]: boolean;\n}\n\nexport default function MenuDrawer(): JSX.Element {\n  const { id: room } = useParams<{ id: string }>();\n  const { user, wipeAllData, isAnonymous } = useAuth();\n  const isMobile = useBreakpoint();\n  const { i18n } = useTranslation();\n  const [menuOpen, setMenu] = useState<boolean>(false);\n  const toggleDrawer = useCallback((isOpen: boolean): void => setMenu(isOpen), []);\n  const gameSettings = useSettings()[0];\n\n  const [open, setOpen] = useState<DialogState>({\n    settings: false,\n    gameBoard: false,\n    about: false,\n    schedule: false,\n    customTiles: false,\n    linkAccount: false,\n    appSettings: false,\n    languageChange: false,\n  });\n\n  const toggleDialog = useCallback(\n    (type: string, isOpen: boolean): void => setOpen((prev) => ({ ...prev, [type]: isOpen })),\n    []\n  );\n\n  const handleWipeData = useCallback(async (): Promise<void> => {\n    await wipeAllData();\n    toggleDrawer(false);\n  }, [wipeAllData, toggleDrawer]);\n\n  const openInNewTab = (url: string): Window | null => window.open(url, '_blank', 'noreferrer');\n\n  const discordIcon = useMemo(\n    () => (\n      <SvgIcon>\n        <path d=\"M18.942 5.556a16.299 16.299 0 0 0-4.126-1.297c-.178.321-.385.754-.529 1.097a15.175 15.175 0 0 0-4.573 0 11.583 11.583 0 0 0-.535-1.097 16.274 16.274 0 0 0-4.129 1.3c-2.611 3.946-3.319 7.794-2.965 11.587a16.494 16.494 0 0 0 5.061 2.593 12.65 12.65 0 0 0 1.084-1.785 10.689 10.689 0 0 1-1.707-.831c.143-.106.283-.217.418-.331 3.291 1.539 6.866 1.539 10.118 0 .137.114.277.225.418.331-.541.326-1.114.606-1.71.832a12.52 12.52 0 0 0 1.084 1.785 16.46 16.46 0 0 0 5.064-2.595c.415-4.396-.709-8.209-2.973-11.589zM8.678 14.813c-.988 0-1.798-.922-1.798-2.045s.793-2.047 1.798-2.047 1.815.922 1.798 2.047c.001 1.123-.793 2.045-1.798 2.045zm6.644 0c-.988 0-1.798-.922-1.798-2.045s.793-2.047 1.798-2.047 1.815.922 1.798 2.047c0 1.123-.793 2.045-1.798 2.045z\" />\n      </SvgIcon>\n    ),\n    []\n  );\n\n  const { setLocale, updateSettings } = useSettingsStore();\n  const [languageLoading, setLanguageLoading] = useState(false);\n  const [pendingLanguageChange, setPendingLanguageChange] = useState<{\n    from: string;\n    to: string;\n  } | null>(null);\n  const submitSettings = useSubmitGameSettings();\n  const { actionsList } = useUnifiedActionList(gameSettings?.gameMode);\n\n  const handleLanguageChange = useCallback(\n    async (event: SelectChangeEvent<string>): Promise<void> => {\n      const newLanguage = event.target.value;\n      const currentLanguage = i18n.resolvedLanguage || 'en';\n\n      // If same language, do nothing\n      if (currentLanguage === newLanguage) return;\n\n      setLanguageLoading(true);\n\n      try {\n        // Language change will automatically trigger migration via MigrationContext\n        await i18n.changeLanguage(newLanguage);\n        setLocale(newLanguage);\n\n        // Wait for i18n to fully propagate using the languageChanged event\n        await new Promise((resolve) => {\n          const onLanguageChanged = () => {\n            i18n.off('languageChanged', onLanguageChanged);\n            resolve(undefined);\n          };\n          i18n.on('languageChanged', onLanguageChanged);\n          // Fallback timeout in case event doesn't fire\n          setTimeout(() => {\n            i18n.off('languageChanged', onLanguageChanged);\n            resolve(undefined);\n          }, 500);\n        });\n\n        // Set pending change and show modal in new language\n        setPendingLanguageChange({ from: currentLanguage, to: newLanguage });\n        toggleDialog('languageChange', true);\n      } catch (error) {\n        console.error('Error changing language:', error);\n        // Still attempt to change language even if migration fails\n        await i18n.changeLanguage(newLanguage);\n        setLocale(newLanguage);\n\n        // Wait for i18n to fully propagate using the languageChanged event\n        await new Promise((resolve) => {\n          const onLanguageChanged = () => {\n            i18n.off('languageChanged', onLanguageChanged);\n            resolve(undefined);\n          };\n          i18n.on('languageChanged', onLanguageChanged);\n          // Fallback timeout in case event doesn't fire\n          setTimeout(() => {\n            i18n.off('languageChanged', onLanguageChanged);\n            resolve(undefined);\n          }, 500);\n        });\n\n        setPendingLanguageChange({ from: currentLanguage, to: newLanguage });\n        toggleDialog('languageChange', true);\n      } finally {\n        setLanguageLoading(false);\n      }\n    },\n    [i18n, setLocale, toggleDialog]\n  );\n\n  const handleBoardRebuildDecision = useCallback(\n    async (shouldRebuildBoard: boolean): Promise<void> => {\n      // Language has already been changed, handle board rebuild properly\n      if (shouldRebuildBoard && actionsList) {\n        try {\n          // Use the complete settings submission flow to rebuild board and generate message\n          await submitSettings({ ...gameSettings, boardUpdated: true }, actionsList);\n        } catch (error) {\n          console.error('Error rebuilding board:', error);\n          // Fallback to simple board update\n          updateSettings({ boardUpdated: true });\n        }\n      }\n      setPendingLanguageChange(null);\n    },\n    [submitSettings, gameSettings, actionsList, updateSettings]\n  );\n\n  const handleRebuildBoard = useCallback(async (): Promise<void> => {\n    await handleBoardRebuildDecision(true);\n  }, [handleBoardRebuildDecision]);\n\n  const handleKeepBoard = useCallback(async (): Promise<void> => {\n    await handleBoardRebuildDecision(false);\n  }, [handleBoardRebuildDecision]);\n\n  const handleLanguageModalClose = useCallback((): void => {\n    setPendingLanguageChange(null);\n    toggleDialog('languageChange', false);\n  }, [toggleDialog]);\n\n  const languageMenuItems = useMemo(\n    () =>\n      Object.entries(languages).map(([key, obj]) => (\n        <MenuItem value={key} key={key}>\n          {obj.label}\n        </MenuItem>\n      )),\n    []\n  );\n\n  const menuItems = useMemo<MenuItemType[]>(() => {\n    const items: MenuItemType[] = [\n      {\n        key: 'gameBoard',\n        title: <Trans i18nKey=\"gameBoards\" />,\n        icon: <AppRegistration />,\n        onClick: () => toggleDialog('gameBoard', true),\n      },\n      {\n        key: 'customTiles',\n        title: <Trans i18nKey=\"customTilesLabel\" />,\n        icon: <ViewModule />,\n        onClick: () => toggleDialog('customTiles', true),\n      },\n      {\n        key: 'cast',\n        title: <Trans i18nKey=\"tvMode\" />,\n        icon: <Tv />,\n        onClick: () => openInNewTab(`/${room?.toUpperCase()}/cast`),\n      },\n      {\n        key: 'schedule',\n        title: <Trans i18nKey=\"schedule\" />,\n        icon: <CalendarMonth />,\n        onClick: () => toggleDialog('schedule', true),\n      },\n      {\n        key: 'discord',\n        title: 'Discord',\n        icon: discordIcon,\n        onClick: () => openInNewTab('https://discord.gg/mSPBE2hFef'),\n      },\n      {\n        key: 'about',\n        title: <Trans i18nKey=\"about\" />,\n        icon: <InfoIcon />,\n        onClick: () => toggleDialog('about', true),\n      },\n    ];\n\n    if (user) {\n      items.unshift({\n        key: 'appSettings',\n        title: <Trans i18nKey=\"appSettings\" />,\n        icon: <TuneIcon />,\n        onClick: () => toggleDialog('appSettings', true),\n      });\n      items.unshift({\n        key: 'settings',\n        title: <Trans i18nKey={gameSettings.advancedSettings ? 'settings' : 'setupWizard'} />,\n        icon: <SettingsIcon />,\n        onClick: () => toggleDialog('settings', true),\n      });\n      if (isAnonymous) {\n        items.push({\n          key: 'linkAccount',\n          title: <Trans i18nKey=\"linkAccount\" />,\n          icon: <LinkIcon />,\n          onClick: () => toggleDialog('linkAccount', true),\n        });\n      }\n      items.push({\n        key: 'resetApp',\n        title: <Trans i18nKey=\"resetApp\" />,\n        icon: <Logout />,\n        onClick: () => handleWipeData(),\n      });\n    }\n    return items;\n  }, [\n    user,\n    room,\n    isAnonymous,\n    gameSettings.advancedSettings,\n    discordIcon,\n    handleWipeData,\n    toggleDialog,\n  ]);\n\n  const menuList = menuItems.map(({ key, title, icon, onClick }) => (\n    <ListItem key={key} disablePadding onClick={onClick}>\n      <ListItemButton>\n        <ListItemIcon>{icon}</ListItemIcon>\n        <ListItemText primary={title} />\n      </ListItemButton>\n    </ListItem>\n  ));\n\n  const renderDialog = <T,>(\n    Component: React.ComponentType<T & { open: boolean; close: () => void; isMobile: boolean }>,\n    dialogKey: keyof DialogState,\n    props: Partial<T> = {} as any\n  ): JSX.Element => (\n    <Suspense fallback={null}>\n      <Component\n        open={open[dialogKey]}\n        close={() => toggleDialog(dialogKey.toString(), false)}\n        isMobile={isMobile}\n        {...(props as any)}\n      />\n    </Suspense>\n  );\n\n  return (\n    <>\n      <IconButton onClick={() => toggleDrawer(true)} aria-label=\"open menu\">\n        <MenuIcon />\n      </IconButton>\n      <Drawer anchor=\"right\" open={menuOpen} onClose={() => toggleDrawer(false)}>\n        <Box\n          role=\"presentation\"\n          onClick={() => toggleDrawer(false)}\n          sx={{\n            width: 250,\n            display: 'flex',\n            flexDirection: 'column',\n            height: '100%',\n          }}\n        >\n          <List sx={{ flexGrow: 1 }}>{menuList}</List>\n          <Box\n            sx={{\n              borderTop: '1px solid rgba(0, 0, 0, 0.12)',\n              p: 2,\n            }}\n          >\n            <FormControl fullWidth size=\"small\" sx={{ maxWidth: 200 }}>\n              <InputLabel\n                id=\"drawer-language-label\"\n                sx={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  '& .MuiInputLabel-root': {\n                    fontSize: '0.875rem',\n                  },\n                }}\n              >\n                <Language sx={{ mr: 0.5, fontSize: '1rem' }} />\n                <Trans i18nKey=\"language\" />\n              </InputLabel>\n              <Select\n                labelId=\"drawer-language-label\"\n                id=\"drawer-language-select\"\n                value={i18n.resolvedLanguage || 'en'}\n                disabled={languageLoading}\n                label={\n                  <>\n                    <Language sx={{ fontSize: '1rem' }} />\n                    <Trans i18nKey=\"language\" />\n                  </>\n                }\n                onChange={handleLanguageChange}\n                size=\"small\"\n                MenuProps={{\n                  anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'left',\n                  },\n                  transformOrigin: {\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                  },\n                }}\n              >\n                {languageMenuItems}\n              </Select>\n            </FormControl>\n          </Box>\n        </Box>\n      </Drawer>\n      {open.settings && renderDialog(GameSettingsDialog, 'settings')}\n      {open.appSettings && renderDialog(AppSettingsDialog, 'appSettings')}\n      {open.about && (\n        <Suspense fallback={null}>\n          <DialogWrapper open={open.about} close={() => toggleDialog('about', false)}>\n            <GameGuide />\n          </DialogWrapper>\n        </Suspense>\n      )}\n      {open.gameBoard && renderDialog(ManageGameBoards, 'gameBoard')}\n      {open.schedule && renderDialog(Schedule, 'schedule')}\n      {open.customTiles && renderDialog(CustomTileDialog, 'customTiles')}\n      {open.linkAccount && renderDialog(AuthDialog, 'linkAccount')}\n      {pendingLanguageChange && (\n        <LanguageChangeModal\n          open={open.languageChange}\n          onClose={handleLanguageModalClose}\n          onRebuildBoard={handleRebuildBoard}\n          onKeepBoard={handleKeepBoard}\n          fromLanguage={pendingLanguageChange.from}\n          toLanguage={pendingLanguageChange.to}\n        />\n      )}\n    </>\n  );\n}\n"],"file":"js/index.tsx-DSS2PfIm.js"}