{"version":3,"file":"getUniqueImportRecords.ts-DhRxBImL.js","sources":["../../src/views/CustomTileDialog/ImportExport/getUniqueImportRecords.ts"],"sourcesContent":["import groupActionsFolder from '@/helpers/actionsFolder';\nimport { CustomTile, GetUniqueImportRecordsResult, AllGameModeActions } from '@/types/customTiles';\n\n/**\n * Validates the group match within each entry.\n * @param {string} entry - The entry to validate.\n * @throws Will throw an error if the entry does not contain exactly two brackets.\n */\nfunction validateGroupMatch(entry: string): void {\n  const groupMatch = entry.match(/\\[|\\]/g)?.length;\n  if (groupMatch !== 2) {\n    throw new Error('ctSeparatorError');\n  }\n}\n\n/**\n * Compares two arrays of tags to determine if they are equal.\n * @param {Array} tags1 - The first array of tags.\n * @param {Array} tags2 - The second array of tags.\n * @returns {boolean} - True if the arrays contain the same tags, false otherwise.\n */\nfunction areTagsEqual(tags1: string[] | undefined, tags2: string[] | undefined): boolean {\n  const sortedTags1 = tags1?.sort() || [];\n  const sortedTags2 = tags2?.sort() || [];\n  return JSON.stringify(sortedTags1) === JSON.stringify(sortedTags2);\n}\n\n/**\n * Parses and transforms a single tile entry into a structured object.\n * @param {string} tile - The tile entry to parse.\n * @param {Object} mappedGroups - The object of mapped groups by game mode.\n * @returns {Object} - The parsed tile as an object.\n * @throws Will throw an error if the tile cannot be parsed correctly.\n */\nfunction parseTile(tile: string, mappedGroups: AllGameModeActions): CustomTile {\n  const lines = tile.split('\\n').filter(Boolean);\n  const preGrouping = lines[0];\n  const action = lines[1];\n\n  // Extract tags if present\n  const tagLine = lines.find((line) => line.startsWith('Tags:'));\n  const tags = tagLine?.replace('Tags:', '')?.trim()?.split(', ')?.filter(Boolean) || [];\n\n  // Extract game mode if present\n  const gameModeLine = lines.find((line) => line.startsWith('GameMode:'));\n  const gameMode = gameModeLine?.replace('GameMode:', '')?.trim() || 'online';\n\n  const withoutBrackets = preGrouping.replace(/\\[|\\]/g, '');\n  const [group, intensity] = withoutBrackets.split(' - ');\n\n  // Get the appropriate groups for this game mode\n  const gameModeGroups = groupActionsFolder(\n    mappedGroups[gameMode as keyof AllGameModeActions] || {}\n  );\n\n  const appGroup = gameModeGroups.find(\n    (mapped) => mapped.translatedIntensity === intensity && mapped.group === group\n  );\n\n  if (!appGroup) {\n    throw new Error('ctGroupError');\n  }\n  if (!action) {\n    throw new Error('ctActionError');\n  }\n\n  return {\n    group: appGroup.value,\n    intensity: appGroup.intensity,\n    action,\n    tags,\n    gameMode,\n    isCustom: 1,\n  };\n}\n\n/**\n * Processes import data to identify new unique records and existing records with changed tags.\n * @param {string} importData - The import data to process.\n * @param {Array} customTiles - The array of existing custom tiles.\n * @param {Object} mappedGroups - The object of mapped groups by game mode.\n * @returns {Object} - An object containing new unique records and existing records with changed tags.\n */\nexport default function getUniqueImportRecords(\n  importData: string,\n  customTiles: CustomTile[],\n  mappedGroups: AllGameModeActions\n): GetUniqueImportRecordsResult {\n  const preArray = importData?.split('---') || [];\n  preArray.forEach(validateGroupMatch);\n\n  const result = preArray.map((tile) => parseTile(tile, mappedGroups)).filter(Boolean);\n\n  const newUniqueRecords: CustomTile[] = [];\n  const changedTagRecords: CustomTile[] = [];\n\n  result.forEach((entry) => {\n    const existingRecord = customTiles.find(\n      (existing) =>\n        existing.group === entry.group &&\n        existing.intensity === entry.intensity &&\n        existing.action === entry.action &&\n        existing.gameMode === entry.gameMode\n    );\n\n    if (!existingRecord) {\n      newUniqueRecords.push(entry);\n    } else if (existingRecord && !areTagsEqual(existingRecord.tags, entry.tags)) {\n      changedTagRecords.push({ ...existingRecord, tags: entry.tags });\n    }\n  });\n\n  return { newUniqueRecords, changedTagRecords };\n}\n"],"names":["validateGroupMatch","entry","areTagsEqual","tags1","tags2","sortedTags1","sortedTags2","parseTile","tile","mappedGroups","lines","preGrouping","action","tags","line","gameMode","withoutBrackets","group","intensity","appGroup","groupActionsFolder","mapped","getUniqueImportRecords","importData","customTiles","preArray","result","newUniqueRecords","changedTagRecords","existingRecord","existing"],"mappings":"kqCAQA,SAASA,EAAmBC,EAAqB,CAE/C,GADmBA,EAAM,MAAM,QAAQ,GAAG,SACvB,EACjB,MAAM,IAAI,MAAM,kBAAkB,CAEtC,CAQA,SAASC,EAAaC,EAA6BC,EAAsC,CACvF,MAAMC,EAAcF,GAAO,KAAA,GAAU,CAAA,EAC/BG,EAAcF,GAAO,KAAA,GAAU,CAAA,EACrC,OAAO,KAAK,UAAUC,CAAW,IAAM,KAAK,UAAUC,CAAW,CACnE,CASA,SAASC,EAAUC,EAAcC,EAA8C,CAC7E,MAAMC,EAAQF,EAAK,MAAM;AAAA,CAAI,EAAE,OAAO,OAAO,EACvCG,EAAcD,EAAM,CAAC,EACrBE,EAASF,EAAM,CAAC,EAIhBG,EADUH,EAAM,KAAMI,GAASA,EAAK,WAAW,OAAO,CAAC,GACvC,QAAQ,QAAS,EAAE,GAAG,KAAA,GAAQ,MAAM,IAAI,GAAG,OAAO,OAAO,GAAK,CAAA,EAI9EC,EADeL,EAAM,KAAMI,GAASA,EAAK,WAAW,WAAW,CAAC,GACvC,QAAQ,YAAa,EAAE,GAAG,QAAU,SAE7DE,EAAkBL,EAAY,QAAQ,SAAU,EAAE,EAClD,CAACM,EAAOC,CAAS,EAAIF,EAAgB,MAAM,KAAK,EAOhDG,EAJiBC,EACrBX,EAAaM,CAAoC,GAAK,CAAA,CAAC,EAGzB,KAC7BM,GAAWA,EAAO,sBAAwBH,GAAaG,EAAO,QAAUJ,CAAA,EAG3E,GAAI,CAACE,EACH,MAAM,IAAI,MAAM,cAAc,EAEhC,GAAI,CAACP,EACH,MAAM,IAAI,MAAM,eAAe,EAGjC,MAAO,CACL,MAAOO,EAAS,MAChB,UAAWA,EAAS,UACpB,OAAAP,EACA,KAAAC,EACA,SAAAE,EACA,SAAU,CAAA,CAEd,CASA,SAAwBO,EACtBC,EACAC,EACAf,EAC8B,CAC9B,MAAMgB,EAAWF,GAAY,MAAM,KAAK,GAAK,CAAA,EAC7CE,EAAS,QAAQzB,CAAkB,EAEnC,MAAM0B,EAASD,EAAS,IAAKjB,GAASD,EAAUC,EAAMC,CAAY,CAAC,EAAE,OAAO,OAAO,EAE7EkB,EAAiC,CAAA,EACjCC,EAAkC,CAAA,EAExC,OAAAF,EAAO,QAASzB,GAAU,CACxB,MAAM4B,EAAiBL,EAAY,KAChCM,GACCA,EAAS,QAAU7B,EAAM,OACzB6B,EAAS,YAAc7B,EAAM,WAC7B6B,EAAS,SAAW7B,EAAM,QAC1B6B,EAAS,WAAa7B,EAAM,QAAA,EAG3B4B,EAEMA,GAAkB,CAAC3B,EAAa2B,EAAe,KAAM5B,EAAM,IAAI,GACxE2B,EAAkB,KAAK,CAAE,GAAGC,EAAgB,KAAM5B,EAAM,KAAM,EAF9D0B,EAAiB,KAAK1B,CAAK,CAI/B,CAAC,EAEM,CAAE,iBAAA0B,EAAkB,kBAAAC,CAAA,CAC7B"}