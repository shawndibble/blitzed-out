{"version":3,"file":"index.tsx-CBR0V8Ko.js","sources":["../../src/components/ButtonRow/index.tsx","../../src/views/GameSettingsWizard/components/ValueProposition.tsx","../../src/views/GameSettingsWizard/RoomStep/index.tsx","../../src/views/GameSettingsWizard/LocalPlayersStep/index.tsx","../../src/views/GameSettingsWizard/GameModeStep/index.tsx","../../src/views/GameSettingsWizard/ActionsStep/helpers.ts","../../src/views/GameSettingsWizard/ActionsStep/IntensityTitle/index.tsx","../../src/components/MultiSelect/index.tsx","../../src/views/GameSettingsWizard/ActionsStep/PickActions/index.tsx","../../src/views/GameSettingsWizard/ActionsStep/PickConsumptions/index.tsx","../../src/views/GameSettingsWizard/ActionsStep/PresetSelector.tsx","../../src/views/GameSettingsWizard/ActionsStep/index.tsx","../../src/views/GameSettingsWizard/FinishStep/index.tsx","../../src/views/GameSettingsWizard/components/DynamicStepper.tsx","../../src/views/GameSettingsWizard/index.tsx","../../src/components/GameSettingsDialog/index.tsx"],"sourcesContent":["import { Box } from '@mui/material';\nimport { ButtonRowProps } from '@/types';\n\nexport default function ButtonRow({ children, justifyContent = 'space-evenly' }: ButtonRowProps) {\n  return (\n    <Box\n      sx={{\n        mt: 3,\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent,\n        alignItems: 'center',\n      }}\n    >\n      {children}\n    </Box>\n  );\n}\n","import { Card, CardContent, Stack, Typography, Box, Chip } from '@mui/material';\nimport { Public, Lock } from '@mui/icons-material';\nimport { Trans, useTranslation } from 'react-i18next';\n\ninterface ValuePropositionProps {\n  isPublic: boolean;\n  onClick: () => void;\n  isSelected: boolean;\n}\n\nexport default function ValueProposition({\n  isPublic,\n  onClick,\n  isSelected,\n}: ValuePropositionProps): JSX.Element {\n  const { t } = useTranslation();\n\n  return (\n    <Card\n      sx={{\n        cursor: 'pointer',\n        border: isSelected ? '3px solid' : '1px solid',\n        borderColor: isSelected ? 'primary.main' : 'grey.300',\n        backgroundColor: isSelected ? 'primary.50' : 'background.paper',\n        transform: isSelected ? 'scale(1.02)' : 'scale(1)',\n        transition: 'all 0.2s ease-in-out',\n        '&:hover': {\n          borderColor: 'primary.main',\n          boxShadow: isSelected ? 4 : 2,\n          transform: 'scale(1.02)',\n        },\n      }}\n      onClick={onClick}\n    >\n      <CardContent sx={{ p: 3 }}>\n        <Stack direction=\"row\" spacing={3} alignItems=\"center\">\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              width: 56,\n              height: 56,\n              borderRadius: '50%',\n              backgroundColor: isSelected ? 'primary.main' : 'primary.50',\n              color: isSelected ? 'primary.contrastText' : 'primary.main',\n              transition: 'all 0.2s ease-in-out',\n            }}\n          >\n            {isPublic ? (\n              <Public sx={{ fontSize: 28 }} aria-label=\"Public\" />\n            ) : (\n              <Lock sx={{ fontSize: 28 }} aria-label=\"Private\" />\n            )}\n          </Box>\n\n          <Stack spacing={0.5} flex={1}>\n            <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n              <Typography variant=\"h6\" component=\"h3\" sx={{ fontWeight: 600 }}>\n                <Trans i18nKey={isPublic ? 'public' : 'private'} />\n              </Typography>\n              {isSelected && (\n                <Chip\n                  label={t('selected')}\n                  size=\"small\"\n                  color=\"primary\"\n                  sx={{\n                    fontSize: '0.75rem',\n                    fontWeight: 500,\n                    height: 20,\n                  }}\n                />\n              )}\n            </Stack>\n            <Typography variant=\"body1\" color=\"text.secondary\" sx={{ fontSize: '0.95rem' }}>\n              <Trans i18nKey={isPublic ? 'publicRoomBenefit' : 'privateRoomBenefit'} />\n            </Typography>\n          </Stack>\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n}\n","import { Box, Button, Typography, Stack, TextField } from '@mui/material';\nimport { Trans, useTranslation } from 'react-i18next';\nimport ButtonRow from '@/components/ButtonRow';\nimport ValueProposition from '../components/ValueProposition';\nimport { isPublicRoom } from '@/helpers/strings';\nimport { customAlphabet } from 'nanoid';\nimport { useState, useCallback, ChangeEvent, KeyboardEvent, useEffect } from 'react';\nimport { Settings } from '@/types/Settings';\nimport { getDatabase, ref, get } from 'firebase/database';\nimport { useParams } from 'react-router-dom';\n\ninterface RoomStepProps {\n  formData: Settings;\n  setFormData: (data: Settings) => void;\n  nextStep: (step: number) => void;\n}\n\nexport default function RoomStep({ formData, setFormData, nextStep }: RoomStepProps): JSX.Element {\n  const { t } = useTranslation();\n  const { id: urlRoom } = useParams<{ id: string }>();\n  const [showPrivateRoomField, setShowPrivateRoomField] = useState(\n    !isPublicRoom(formData.room || urlRoom)\n  );\n  const [roomInputValue, setRoomInputValue] = useState(formData.room?.toUpperCase() || '');\n\n  // Update UI state when URL or formData.room changes\n  useEffect(() => {\n    // Use formData.room as the source of truth for the current room state\n    // Only fall back to urlRoom if formData.room is not set\n    const currentRoom = formData.room || urlRoom;\n    const shouldShowPrivateField = !isPublicRoom(currentRoom);\n    setShowPrivateRoomField(shouldShowPrivateField);\n    setRoomInputValue(currentRoom?.toUpperCase() || '');\n  }, [urlRoom, formData.room, showPrivateRoomField]);\n\n  const checkRoomExists = async (roomId: string): Promise<boolean> => {\n    try {\n      const database = getDatabase();\n      const roomRef = ref(database, `rooms/${roomId}/uids`);\n      const snapshot = await get(roomRef);\n      return snapshot.exists();\n    } catch {\n      return false;\n    }\n  };\n\n  const generateUniqueRoomId = useCallback(async (): Promise<string> => {\n    const nanoid = customAlphabet('123456789ABCDEFGHJKLMNPQRSTUVWXYZ', 5);\n    let roomId: string;\n    let attempts = 0;\n    const maxAttempts = 10;\n\n    do {\n      roomId = nanoid();\n      attempts++;\n\n      if (attempts >= maxAttempts) {\n        break;\n      }\n    } while (await checkRoomExists(roomId));\n\n    return roomId;\n  }, []);\n\n  const handlePublicRoomSelect = useCallback(() => {\n    setFormData({\n      ...formData,\n      room: 'PUBLIC',\n      gameMode: 'online',\n      roomRealtime: true,\n    });\n    setShowPrivateRoomField(false);\n  }, [formData, setFormData]);\n\n  const handlePrivateRoomSelect = useCallback(async () => {\n    const roomId = await generateUniqueRoomId();\n    setFormData({\n      ...formData,\n      room: roomId,\n      gameMode: 'online',\n      roomRealtime: false,\n    });\n    setRoomInputValue(roomId.toUpperCase());\n    setShowPrivateRoomField(true);\n  }, [formData, setFormData, generateUniqueRoomId]);\n\n  const updateRoomData = useCallback(\n    (newRoomValue: string) => {\n      setFormData({\n        ...formData,\n        room: newRoomValue,\n        boardUpdated: true,\n      });\n    },\n    [formData, setFormData]\n  );\n\n  const handleRoomChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const upperCaseValue = event.target.value.toUpperCase();\n    setRoomInputValue(upperCaseValue);\n  }, []);\n\n  const handleRoomBlur = useCallback(() => {\n    updateRoomData(roomInputValue);\n  }, [updateRoomData, roomInputValue]);\n\n  const handleRoomKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Enter') {\n        updateRoomData(roomInputValue);\n      }\n    },\n    [updateRoomData, roomInputValue]\n  );\n\n  const isPublic = isPublicRoom(formData.room || urlRoom);\n\n  function handleNext(): void {\n    nextStep(isPublic ? 3 : 1);\n  }\n\n  return (\n    <Box sx={{ m: 1 }}>\n      <Typography variant=\"h5\" gutterBottom textAlign=\"center\">\n        <Trans i18nKey=\"chooseRoomType\" />\n      </Typography>\n\n      <Typography variant=\"body1\" color=\"text.secondary\" textAlign=\"center\" sx={{ mb: 3 }}>\n        <Trans i18nKey=\"roomTypeDescription\" />\n      </Typography>\n\n      <Stack spacing={2} sx={{ mb: 3 }}>\n        <ValueProposition isPublic={true} onClick={handlePublicRoomSelect} isSelected={isPublic} />\n        <ValueProposition\n          isPublic={false}\n          onClick={handlePrivateRoomSelect}\n          isSelected={!isPublic}\n        />\n      </Stack>\n\n      {showPrivateRoomField && (\n        <Box\n          sx={{\n            p: 3,\n            borderRadius: 2,\n            backgroundColor: 'primary.50',\n            mb: 2,\n          }}\n        >\n          <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 600, mb: 2 }}>\n            {t('privateRoomCode')}\n          </Typography>\n          <TextField\n            fullWidth\n            id=\"privateRoom\"\n            value={roomInputValue}\n            onBlur={handleRoomBlur}\n            onKeyDown={handleRoomKeyDown}\n            onChange={handleRoomChange}\n            inputProps={{\n              style: {\n                textTransform: 'uppercase',\n                fontFamily: 'monospace',\n                fontSize: '1.25rem',\n                fontWeight: 'bold',\n                textAlign: 'center',\n                letterSpacing: '0.2em',\n              },\n            }}\n            sx={{\n              '& .MuiOutlinedInput-root': {\n                backgroundColor: 'background.paper',\n                '& fieldset': {\n                  borderColor: 'divider',\n                  borderWidth: 2,\n                },\n                '&:hover fieldset': {\n                  borderColor: 'primary.main',\n                },\n                '&.Mui-focused fieldset': {\n                  borderColor: 'primary.main',\n                  borderWidth: 2,\n                },\n              },\n            }}\n          />\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1.5, textAlign: 'center' }}>\n            {t('privateRoomCodeHelp')}\n          </Typography>\n        </Box>\n      )}\n\n      <ButtonRow>\n        <Button variant=\"contained\" onClick={handleNext} size=\"large\">\n          <Trans i18nKey=\"next\" />\n        </Button>\n      </ButtonRow>\n    </Box>\n  );\n}\n","import { useState, useCallback, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Card,\n  CardContent,\n  Button,\n  Alert,\n  Fade,\n  Grid,\n  Stack,\n} from '@mui/material';\nimport { Trans, useTranslation } from 'react-i18next';\nimport ButtonRow from '@/components/ButtonRow';\nimport LocalPlayerSetup from '@/components/LocalPlayerSetup';\nimport { useLocalPlayers } from '@/hooks/useLocalPlayers';\nimport type { LocalPlayer, LocalSessionSettings } from '@/types';\n\ninterface LocalPlayersStepProps {\n  formData: any; // Using any to avoid type conflicts with Settings intersection\n  setFormData: (data: any) => void; // Using any to avoid type conflicts\n  nextStep: () => void;\n  prevStep: () => void;\n}\n\n/**\n * LocalPlayersStep allows users to optionally set up local players for single-device multiplayer\n * Only appears in private rooms and provides option to skip\n */\nexport default function LocalPlayersStep({\n  formData,\n  setFormData,\n  nextStep,\n  prevStep,\n}: LocalPlayersStepProps): JSX.Element {\n  const { t } = useTranslation();\n  const { hasLocalPlayers: hasLocalPlayersValue, clearLocalSession } = useLocalPlayers();\n\n  const [isSetupOpen, setIsSetupOpen] = useState(false);\n  const [setupError, setSetupError] = useState<string | null>(null);\n\n  // Check if this is a private room\n  const isPrivateRoom = formData.room !== 'PUBLIC';\n\n  const handleStartLocalSetup = useCallback(() => {\n    setIsSetupOpen(true);\n    setSetupError(null);\n  }, []);\n\n  const handleSkipLocalPlayers = useCallback(() => {\n    // Clear any existing local session\n    if (hasLocalPlayersValue) {\n      clearLocalSession();\n    }\n\n    // Explicitly clear all local player configuration to ensure single-player flow\n    setFormData((prev: any) => ({\n      ...prev,\n      hasLocalPlayers: false,\n      localPlayersData: undefined,\n      localPlayerSessionSettings: undefined,\n      // Also ensure we don't have any lingering local mode settings that would skip questions\n      gameMode: prev.gameMode === 'local' ? 'online' : prev.gameMode,\n    }));\n\n    nextStep();\n  }, [hasLocalPlayersValue, clearLocalSession, nextStep, setFormData]);\n\n  const handleLocalSetupComplete = useCallback(\n    async (players: LocalPlayer[], settings: LocalSessionSettings) => {\n      try {\n        // Store local player configuration in form data for later use\n        setFormData({\n          ...formData,\n          localPlayersData: players,\n          localPlayerSessionSettings: settings,\n          hasLocalPlayers: true,\n        });\n\n        setIsSetupOpen(false);\n        nextStep();\n      } catch (error) {\n        setSetupError(\n          error instanceof Error ? error.message : 'Failed to save local player configuration'\n        );\n      }\n    },\n    [formData, setFormData, nextStep]\n  );\n\n  const handleLocalSetupCancel = useCallback(() => {\n    setIsSetupOpen(false);\n    setSetupError(null);\n  }, []);\n\n  // Auto-advance for non-private rooms, but with a delay to prevent navigation conflicts\n  useEffect(() => {\n    if (!isPrivateRoom) {\n      const timer = setTimeout(() => {\n        nextStep();\n      }, 100); // Small delay to prevent render conflicts\n\n      return () => clearTimeout(timer);\n    }\n  }, [isPrivateRoom, nextStep]);\n\n  // If not a private room, show a loading message\n  if (!isPrivateRoom) {\n    return (\n      <Box\n        sx={{\n          minHeight: '200px',\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <Typography variant=\"h6\" color=\"text.secondary\">\n          {t(\n            'localPlayersStep.publicRoomMessage',\n            'Local players are not available for public rooms. Continuing...'\n          )}\n        </Typography>\n      </Box>\n    );\n  }\n\n  // Show the local player setup component when open\n  if (isSetupOpen) {\n    return (\n      <Fade in={true}>\n        <Box>\n          {setupError && (\n            <Alert severity=\"error\" sx={{ mb: 2 }}>\n              {setupError}\n            </Alert>\n          )}\n\n          <LocalPlayerSetup\n            roomId={formData.room || 'PRIVATE'}\n            isPrivateRoom={isPrivateRoom}\n            onComplete={handleLocalSetupComplete}\n            onCancel={handleLocalSetupCancel}\n            initialPlayers={(formData as any).localPlayersData}\n            initialSettings={(formData as any).localPlayerSessionSettings}\n          />\n        </Box>\n      </Fade>\n    );\n  }\n\n  // Show the choice screen\n  return (\n    <Box sx={{ minHeight: '200px', display: 'flex', flexDirection: 'column' }}>\n      <Typography variant=\"h5\" gutterBottom sx={{ fontWeight: 600, mb: 3 }}>\n        <Trans i18nKey=\"localPlayersStep.title\" />\n      </Typography>\n\n      <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\n        <Trans i18nKey=\"localPlayersStep.subtitle\" />\n      </Typography>\n\n      <Grid container spacing={2} sx={{ mb: 3 }}>\n        {/* Option 1: Set up local players - Now deselected by default */}\n        <Grid size={{ xs: 12, sm: 6 }}>\n          <Card\n            sx={{\n              cursor: 'pointer',\n              border: '1px solid',\n              borderColor: 'divider',\n              backgroundColor: 'background.paper',\n              transition: 'all 0.2s ease-in-out',\n              height: '100%',\n              '&:hover': {\n                borderColor: 'primary.main',\n                transform: 'translateY(-2px)',\n                boxShadow: 2,\n              },\n            }}\n            onClick={handleStartLocalSetup}\n          >\n            <CardContent sx={{ p: 3 }}>\n              <Stack spacing={1} alignItems=\"center\" textAlign=\"center\">\n                <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                  <Trans i18nKey=\"localPlayersStep.setupOption.title\" />\n                </Typography>\n                <Typography\n                  variant=\"body2\"\n                  color=\"text.secondary\"\n                  sx={{\n                    whiteSpace: 'pre-line',\n                    textAlign: 'left',\n                    width: '100%',\n                    lineHeight: 1.8,\n                    mb: 2,\n                  }}\n                >\n                  <Trans i18nKey=\"localPlayersStep.setupOption.description\" />\n                </Typography>\n\n                <Button\n                  variant=\"outlined\"\n                  fullWidth\n                  size=\"large\"\n                  sx={{ mt: 2 }}\n                  data-testid=\"localPlayersStep.setupOption.button\"\n                  onClick={handleStartLocalSetup}\n                >\n                  {t('localPlayersStep.setupOption.button')}\n                </Button>\n              </Stack>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Option 2: Skip local players - Remove \"selected\" status but keep it as an option */}\n        <Grid size={{ xs: 12, sm: 6 }}>\n          <Card\n            sx={{\n              cursor: 'pointer',\n              border: '1px solid',\n              borderColor: 'divider',\n              backgroundColor: 'background.paper',\n              transition: 'all 0.2s ease-in-out',\n              height: '100%',\n              '&:hover': {\n                borderColor: 'primary.main',\n                transform: 'translateY(-2px)',\n                boxShadow: 2,\n              },\n            }}\n            onClick={handleSkipLocalPlayers}\n          >\n            <CardContent sx={{ p: 3 }}>\n              <Stack spacing={1} alignItems=\"center\" textAlign=\"center\">\n                <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                  <Trans i18nKey=\"localPlayersStep.skipOption.title\" />\n                </Typography>\n                <Typography\n                  variant=\"body2\"\n                  color=\"text.secondary\"\n                  sx={{\n                    whiteSpace: 'pre-line',\n                    textAlign: 'left',\n                    width: '100%',\n                    lineHeight: 1.8,\n                    mb: 2,\n                  }}\n                >\n                  <Trans i18nKey=\"localPlayersStep.skipOption.description\" />\n                </Typography>\n\n                <Button\n                  variant=\"outlined\"\n                  fullWidth\n                  size=\"large\"\n                  sx={{ mt: 2 }}\n                  data-testid=\"localPlayersStep.skipOption.button\"\n                  onClick={handleSkipLocalPlayers}\n                >\n                  {t('localPlayersStep.skipOption.button')}\n                </Button>\n              </Stack>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Current local player status */}\n      {hasLocalPlayersValue && (\n        <Alert severity=\"info\" sx={{ mb: 3 }}>\n          <Typography variant=\"body2\">\n            <Trans i18nKey=\"localPlayersStep.currentStatus.hasPlayers\" />\n          </Typography>\n        </Alert>\n      )}\n\n      <Box sx={{ flexGrow: 1 }} />\n      <ButtonRow>\n        <Button onClick={prevStep}>\n          <Trans i18nKey=\"previous\" />\n        </Button>\n        <Button variant=\"contained\" onClick={handleSkipLocalPlayers}>\n          <Trans i18nKey=\"skip\" />\n        </Button>\n      </ButtonRow>\n    </Box>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { Box, Button, Typography, Card, CardContent, Grid, Stack, Chip } from '@mui/material';\nimport { Trans, useTranslation } from 'react-i18next';\nimport ButtonRow from '@/components/ButtonRow';\nimport { isOnlineMode } from '@/helpers/strings';\nimport { FormData } from '@/types';\nimport { PlayerRole, Settings } from '@/types/Settings';\n\ninterface GameModeStepProps {\n  formData: FormData & Partial<Settings>;\n  setFormData: React.Dispatch<React.SetStateAction<FormData & Partial<Settings>>>;\n  nextStep: () => void;\n  prevStep: () => void;\n}\n\nexport default function GameModeStep({\n  formData,\n  setFormData,\n  nextStep,\n  prevStep,\n}: GameModeStepProps): JSX.Element {\n  const { t } = useTranslation();\n\n  // Check if user has local players configured (single-device multiplayer)\n  const hasLocalPlayers = Boolean((formData as any).hasLocalPlayers);\n\n  // If local players are configured, force local mode and disable realtime\n  useEffect(() => {\n    if (hasLocalPlayers) {\n      setFormData((prev) => ({\n        ...prev,\n        gameMode: 'local',\n        roomRealtime: false, // All players on same device, no need for real-time sync\n      }));\n    }\n  }, [hasLocalPlayers, setFormData]);\n\n  // Show role/intensity options only if in local mode without local players\n  // When local players are configured, we skip to intensity (clothed/naked) only\n  const [showRoleSelection, setShowRoleSelection] = useState(\n    !isOnlineMode(formData?.gameMode) && !hasLocalPlayers\n  );\n\n  // Update role selection visibility when game mode or local players change\n  useEffect(() => {\n    setShowRoleSelection(!isOnlineMode(formData?.gameMode) && !hasLocalPlayers);\n  }, [formData?.gameMode, hasLocalPlayers]);\n\n  const interactionModes = [\n    {\n      id: 'local',\n      title: 'yesInteracting',\n      description: t('physicalInteractionDesc'),\n      isSelected: !isOnlineMode(formData?.gameMode),\n    },\n    {\n      id: 'online',\n      title: 'noInteracting',\n      description: t('soloOnlinePlayDesc'),\n      isSelected: isOnlineMode(formData?.gameMode),\n    },\n  ];\n\n  const roleOptions = [\n    { value: 'dom', label: 'Dominant', description: t('dominantRoleDesc') },\n    { value: 'vers', label: 'Switch', description: t('switchRoleDesc') },\n    { value: 'sub', label: 'Submissive', description: t('submissiveRoleDesc') },\n  ];\n\n  const intensityModes = [\n    {\n      id: 'clothed',\n      title: 'noNaked',\n      description: t('foreplayClothedDesc'),\n      isSelected: !formData.isNaked,\n    },\n    {\n      id: 'naked',\n      title: 'yesNaked',\n      description: t('intimateNudityDesc'),\n      isSelected: formData.isNaked,\n    },\n  ];\n\n  return (\n    <Box sx={{ minHeight: '200px', display: 'flex', flexDirection: 'column' }}>\n      {/* Show the interaction question only if local players are NOT configured */}\n      {!hasLocalPlayers && (\n        <>\n          <Typography variant=\"h5\" gutterBottom sx={{ fontWeight: 600, mb: 3 }}>\n            <Trans i18nKey=\"playingWithPeople\" />\n          </Typography>\n\n          <Grid container spacing={2} sx={{ mb: 3 }}>\n            {interactionModes.map((mode) => (\n              <Grid size={{ xs: 12, sm: 6 }} key={mode.id}>\n                <Card\n                  role=\"button\"\n                  tabIndex={0}\n                  sx={{\n                    cursor: 'pointer',\n                    border: mode.isSelected ? '3px solid' : '1px solid',\n                    borderColor: mode.isSelected ? 'primary.main' : 'divider',\n                    backgroundColor: mode.isSelected ? 'primary.50' : 'background.paper',\n                    transition: 'all 0.2s ease-in-out',\n                    height: '100%',\n                    '&:hover': {\n                      borderColor: 'primary.main',\n                      transform: 'translateY(-2px)',\n                      boxShadow: 2,\n                    },\n                  }}\n                  onClick={() =>\n                    setFormData({\n                      ...formData,\n                      gameMode: mode.id === 'local' ? 'local' : 'online',\n                      roomRealtime: mode.id !== 'local',\n                    })\n                  }\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter' || e.key === ' ') {\n                      e.preventDefault();\n                      setFormData({\n                        ...formData,\n                        gameMode: mode.id === 'local' ? 'local' : 'online',\n                        roomRealtime: mode.id !== 'local',\n                      });\n                    }\n                  }}\n                >\n                  <CardContent sx={{ p: 3 }}>\n                    <Stack spacing={1} alignItems=\"center\" textAlign=\"center\">\n                      <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                        {t(mode.title)}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        {mode.description}\n                      </Typography>\n                      {mode.isSelected && (\n                        <Chip label={t('selected')} color=\"primary\" size=\"small\" sx={{ mt: 1 }} />\n                      )}\n                    </Stack>\n                  </CardContent>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </>\n      )}\n\n      {/* When local players are configured, show a title indicating game mode selection */}\n      {hasLocalPlayers && (\n        <Typography variant=\"h5\" gutterBottom sx={{ fontWeight: 600, mb: 3 }}>\n          <Trans i18nKey=\"gameModeSelection\" />\n        </Typography>\n      )}\n\n      {/* Show role selection only for solo local mode (no local players) */}\n      {showRoleSelection && (\n        <Box sx={{ mb: 3 }}>\n          <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 600, mb: 2 }}>\n            <Trans i18nKey=\"yourRole\" />\n          </Typography>\n\n          <Grid container spacing={2} sx={{ mb: 3 }}>\n            {roleOptions.map((role) => (\n              <Grid size={{ xs: 12, sm: 4 }} key={role.value}>\n                <Card\n                  role=\"button\"\n                  tabIndex={0}\n                  sx={{\n                    cursor: 'pointer',\n                    border: formData.role === role.value ? '2px solid' : '1px solid',\n                    borderColor: formData.role === role.value ? 'primary.main' : 'divider',\n                    backgroundColor:\n                      formData.role === role.value ? 'primary.50' : 'background.paper',\n                    transition: 'all 0.2s ease-in-out',\n                    height: '100%',\n                    '&:hover': {\n                      borderColor: 'primary.main',\n                      transform: 'translateY(-2px)',\n                      boxShadow: 2,\n                    },\n                  }}\n                  onClick={() =>\n                    setFormData({\n                      ...formData,\n                      role: role.value as PlayerRole,\n                    })\n                  }\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter' || e.key === ' ') {\n                      e.preventDefault();\n                      setFormData({\n                        ...formData,\n                        role: role.value as PlayerRole,\n                      });\n                    }\n                  }}\n                >\n                  <CardContent sx={{ p: 2.5 }}>\n                    <Stack spacing={1} alignItems=\"center\" textAlign=\"center\">\n                      <Typography variant=\"subtitle1\" sx={{ fontWeight: 600 }}>\n                        {t(role.value)}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        {role.description}\n                      </Typography>\n                      {formData.role === role.value && (\n                        <Chip label={t('selected')} color=\"primary\" size=\"small\" sx={{ mt: 1 }} />\n                      )}\n                    </Stack>\n                  </CardContent>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </Box>\n      )}\n\n      {/* Show intensity selection for local mode (both solo and local players) */}\n      {!isOnlineMode(formData?.gameMode) && (\n        <Box sx={{ mb: 3 }}>\n          <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 600, mb: 2 }}>\n            <Trans i18nKey=\"areYouNaked\" />\n          </Typography>\n\n          <Grid container spacing={2}>\n            {intensityModes.map((mode) => (\n              <Grid size={{ xs: 12, sm: 6 }} key={mode.id}>\n                <Card\n                  role=\"button\"\n                  tabIndex={0}\n                  sx={{\n                    cursor: 'pointer',\n                    border: mode.isSelected ? '2px solid' : '1px solid',\n                    borderColor: mode.isSelected ? 'primary.main' : 'divider',\n                    backgroundColor: mode.isSelected ? 'primary.50' : 'background.paper',\n                    transition: 'all 0.2s ease-in-out',\n                    height: '100%',\n                    '&:hover': {\n                      borderColor: 'primary.main',\n                      transform: 'translateY(-2px)',\n                      boxShadow: 2,\n                    },\n                  }}\n                  onClick={() =>\n                    setFormData({\n                      ...formData,\n                      isNaked: mode.id === 'naked',\n                    })\n                  }\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter' || e.key === ' ') {\n                      e.preventDefault();\n                      setFormData({\n                        ...formData,\n                        isNaked: mode.id === 'naked',\n                      });\n                    }\n                  }}\n                >\n                  <CardContent sx={{ p: 3 }}>\n                    <Stack spacing={1} alignItems=\"center\" textAlign=\"center\">\n                      <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                        {t(mode.title)}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        {mode.description}\n                      </Typography>\n                      {mode.isSelected && (\n                        <Chip label={t('selected')} color=\"primary\" size=\"small\" sx={{ mt: 1 }} />\n                      )}\n                    </Stack>\n                  </CardContent>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </Box>\n      )}\n\n      <Box sx={{ flexGrow: 1 }} />\n      <ButtonRow>\n        <Button onClick={prevStep}>\n          <Trans i18nKey=\"previous\" />\n        </Button>\n        <Button variant=\"contained\" onClick={nextStep}>\n          <Trans i18nKey=\"next\" />\n        </Button>\n      </ButtonRow>\n    </Box>\n  );\n}\n","import { isOnlineMode } from '@/helpers/strings';\nimport { FormData, ActionEntry, Option } from '@/types';\nimport { Settings } from '@/types/Settings';\nimport { ChangeEvent } from 'react';\n\ntype SetFormDataFunction = React.Dispatch<React.SetStateAction<FormData>>;\ntype SetSelectedItemsFunction = React.Dispatch<React.SetStateAction<string[]>>;\n\nconst shouldPurgeAction = (formData: FormData, entry: ActionEntry): boolean => {\n  const { gameMode, isNaked } = formData;\n  const isSolo = isOnlineMode(gameMode);\n  return (\n    (isSolo && ['foreplay', 'sex'].includes(entry.type)) ||\n    (!isSolo && isNaked && ['solo', 'foreplay'].includes(entry.type)) ||\n    (!isSolo && !isNaked && ['solo', 'sex'].includes(entry.type))\n  );\n};\n\nexport const purgedFormData = (formData: FormData): FormData => {\n  const newFormData = { ...formData };\n  const selectedActions = formData.selectedActions || {};\n  const purgedSelectedActions: Record<string, ActionEntry> = {};\n\n  // Purge selectedActions instead of root-level entries\n  Object.entries(selectedActions).forEach(([key, entry]) => {\n    if (!shouldPurgeAction(formData, entry as ActionEntry)) {\n      purgedSelectedActions[key] = entry as ActionEntry;\n    }\n  });\n\n  newFormData.selectedActions = purgedSelectedActions;\n  return newFormData;\n};\n\nexport const populateSelections = (\n  formData: FormData,\n  optionList: Option[],\n  type: string\n): string[] => {\n  const selectedActions = formData.selectedActions || {};\n  return Object.entries(selectedActions)\n    .map(([key, entry]) => {\n      const found = optionList.find((x) => x.value === key);\n      if ((entry as ActionEntry).type !== type || !found) return null;\n      return key;\n    })\n    .filter((x): x is string => !!x);\n};\n\n// if prevData has a type of action that isn't in the value array, delete it.\nconst removeUnselectedActions = (\n  prevData: FormData,\n  action: 'sex' | 'foreplay' | 'consumption' | 'solo',\n  value: string[]\n): FormData => {\n  const newFormData = { ...prevData };\n  const newSelectedActions = { ...(newFormData.selectedActions as Record<string, ActionEntry>) };\n\n  Object.keys(newSelectedActions).forEach((key) => {\n    if ((newSelectedActions[key] as ActionEntry).type === action && !value.includes(key)) {\n      delete newSelectedActions[key];\n    }\n  });\n\n  newFormData.selectedActions = newSelectedActions;\n  return newFormData;\n};\n\nexport const updateFormDataWithDefaults = (\n  value: string[],\n  action: 'sex' | 'foreplay' | 'consumption' | 'solo',\n  setFormData: React.Dispatch<React.SetStateAction<Settings>>\n): void => {\n  setFormData((prevData) => {\n    const newFormData = removeUnselectedActions(prevData, action, value);\n    const newSelectedActions = { ...(newFormData.selectedActions as Record<string, ActionEntry>) };\n\n    value.forEach((option) => {\n      if (newSelectedActions[option]) {\n        return;\n      }\n\n      let data: ActionEntry = { type: action, levels: [1] };\n      if (action === 'consumption') {\n        data = {\n          ...data,\n          variation: newFormData.isAppend ? 'appendMost' : 'standalone',\n        };\n      }\n      newSelectedActions[option] = data;\n    });\n\n    return { ...newFormData, selectedActions: newSelectedActions };\n  });\n};\n\nexport const handleChange = (\n  event: ChangeEvent<HTMLInputElement> | { target: { value: number } } | null,\n  key: string,\n  action: 'sex' | 'foreplay' | 'consumption',\n  setFormData: SetFormDataFunction,\n  setSelectedItems: SetSelectedItemsFunction,\n  variation: string | null = null\n): void => {\n  const value = event?.target?.value;\n\n  if (value === 0) {\n    setSelectedItems((prev) => prev.filter((x) => x !== key));\n    return setFormData((prevData) => {\n      const newSelectedActions = { ...(prevData.selectedActions || {}) } as Record<\n        string,\n        ActionEntry\n      >;\n      delete newSelectedActions[key];\n      return { ...prevData, selectedActions: newSelectedActions };\n    });\n  }\n\n  setFormData((prevData) => {\n    const newSelectedActions = { ...(prevData.selectedActions || {}) } as Record<\n      string,\n      ActionEntry\n    >;\n    let numValue: number;\n    if (typeof value === 'number') {\n      numValue = value;\n    } else if (isNaN(Number(value))) {\n      numValue = 0;\n    } else {\n      numValue = Number(value);\n    }\n    // Convert single level to levels array for backward compatibility\n    const levels = numValue > 0 ? Array.from({ length: numValue }, (_, i) => i + 1) : [];\n\n    newSelectedActions[key] = {\n      ...(newSelectedActions[key] || {}),\n      type: action,\n      levels,\n      ...(!!variation && { variation }),\n    };\n    return { ...prevData, selectedActions: newSelectedActions };\n  });\n};\n\nexport const handleLevelsChange = (\n  levels: number[],\n  key: string,\n  action: 'sex' | 'foreplay' | 'consumption' | 'solo',\n  setFormData: SetFormDataFunction,\n  variation: string | null = null\n): void => {\n  setFormData((prevData) => {\n    const newSelectedActions = { ...(prevData.selectedActions || {}) } as Record<\n      string,\n      ActionEntry\n    >;\n\n    if (levels.length === 0) {\n      // Remove action if no levels selected\n      delete newSelectedActions[key];\n    } else {\n      newSelectedActions[key] = {\n        ...(newSelectedActions[key] || {}),\n        type: action,\n        levels,\n        ...(!!variation && { variation }),\n      };\n    }\n\n    return { ...prevData, selectedActions: newSelectedActions };\n  });\n};\n\n/**\n * Checks if the user has made valid selections for actions\n * @param selectedActions - The selected actions object from form data\n * @returns boolean indicating if there are valid selections\n */\nexport const hasValidSelections = (selectedActions?: Record<string, any>): boolean => {\n  return Boolean(\n    selectedActions &&\n      Object.keys(selectedActions).some((key) => {\n        const action = selectedActions[key];\n        const hasLevels = action?.levels && action.levels.length > 0;\n        return hasLevels && action?.variation !== 'appendMost';\n      })\n  );\n};\n\nexport const handleSelectionChange = (\n  event: { target: { value: string[] } },\n  maxItems: number,\n  action: 'sex' | 'foreplay' | 'consumption',\n  setSelectedItems: SetSelectedItemsFunction,\n  setFormData: SetFormDataFunction\n): void => {\n  const { value } = event.target;\n\n  if (value.length <= maxItems) {\n    setSelectedItems(value);\n    updateFormDataWithDefaults(value, action, setFormData);\n  }\n};\n","import { Help } from '@mui/icons-material';\nimport { Tooltip, Typography } from '@mui/material';\nimport { Trans } from 'react-i18next';\n\nexport default function IntensityTitle(): JSX.Element {\n  return (\n    <Typography variant=\"h6\" sx={{ mt: 2 }}>\n      <Trans i18nKey=\"setIntensityLevel\" />\n      <Tooltip\n        title={\n          <Typography variant=\"body1\">\n            <Trans i18nKey=\"intensityTooltip\" />\n          </Typography>\n        }\n        arrow\n        sx={{ ml: 1 }}\n      >\n        <Help sx={{ ml: 0.5, fontSize: 15 }} />\n      </Tooltip>\n    </Typography>\n  );\n}\n","import {\n  Box,\n  Checkbox,\n  Chip,\n  FormControl,\n  InputLabel,\n  ListItemText,\n  MenuItem,\n  OutlinedInput,\n  Select,\n  SelectChangeEvent,\n} from '@mui/material';\nimport { Trans } from 'react-i18next';\nimport { ReactNode, useCallback } from 'react';\n\ninterface Option {\n  value: string;\n  label: ReactNode;\n}\n\ninterface MultiSelectProps {\n  onChange: (event: SelectChangeEvent<string[]>) => void;\n  values: string[];\n  options: Option[];\n  label: string;\n}\n\nexport default function MultiSelect({\n  onChange,\n  values,\n  options,\n  label,\n}: MultiSelectProps): JSX.Element {\n  // Memoize the label lookup function for better performance\n  const getLabel = useCallback(\n    (value: string): ReactNode => {\n      return options?.find((option) => option.value === value)?.label;\n    },\n    [options]\n  );\n\n  // Memoize the renderValue function to prevent unnecessary re-renders\n  const renderValue = useCallback(\n    (selected: string[] | unknown) => (\n      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n        {(selected as string[])?.map((value) => (\n          <Chip key={value} label={getLabel(value)} />\n        ))}\n      </Box>\n    ),\n    [getLabel]\n  );\n\n  return (\n    <FormControl fullWidth>\n      <InputLabel id={`${label}-label`}>{label}</InputLabel>\n      <Select\n        labelId={`${label}-label`}\n        id={`${label}`}\n        multiple\n        value={values}\n        onChange={onChange}\n        fullWidth\n        input={<OutlinedInput label={<Trans i18nKey=\"actionsLabel\" />} />}\n        renderValue={renderValue}\n      >\n        {options?.map(({ label, value }) => (\n          <MenuItem key={value} value={value}>\n            <Checkbox checked={values.includes(value)} />\n            <ListItemText primary={label} />\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n","import { Typography, SelectChangeEvent } from '@mui/material';\nimport { Trans } from 'react-i18next';\nimport IntensityTitle from '../IntensityTitle';\nimport { isOnlineMode } from '@/helpers/strings';\nimport MultiSelect from '@/components/MultiSelect';\nimport MultiSelectIntensity from '@/components/MultiSelectIntensity';\nimport { handleLevelsChange, populateSelections, updateFormDataWithDefaults } from '../helpers';\nimport { Settings } from '@/types/Settings';\nimport { Option } from '@/types/index';\nimport { t } from 'i18next';\n\nconst MAX_ACTIONS = 4;\n\ninterface ActionData {\n  label?: string;\n  intensities?: Record<number, string>;\n  actions?: Record<string, any>;\n}\n\ninterface PickActionsProps {\n  formData: Settings;\n  setFormData: React.Dispatch<React.SetStateAction<Settings>>;\n  options: (action: string) => Option[];\n  actionsList: Record<string, ActionData>;\n}\n\nconst getAction = (formData: Settings): 'sex' | 'foreplay' | 'consumption' | 'solo' => {\n  if (isOnlineMode(formData?.gameMode)) {\n    return 'solo';\n  }\n\n  if (formData.isNaked) {\n    return 'sex';\n  }\n\n  return 'foreplay';\n};\n\nexport default function PickActions({\n  formData,\n  setFormData,\n  options,\n  actionsList,\n}: PickActionsProps): JSX.Element {\n  const action = getAction(formData);\n  const actionOptions = options(action);\n\n  // Get current selections from formData\n  const currentSelections = populateSelections(formData, actionOptions, action);\n  const selectedActions = currentSelections || [];\n\n  const handleActionChange = (event: SelectChangeEvent<string[]>): void => {\n    const { value } = event.target;\n    const selectedValues = typeof value === 'string' ? value.split(',') : value;\n\n    if (selectedValues.length <= MAX_ACTIONS) {\n      updateFormDataWithDefaults(selectedValues, action, setFormData);\n    }\n  };\n\n  return (\n    <>\n      <Typography variant=\"h6\" sx={{ my: 2 }}>\n        <Trans i18nKey=\"pickActions\" />\n      </Typography>\n\n      <MultiSelect\n        onChange={handleActionChange}\n        values={selectedActions}\n        options={actionOptions}\n        label={t('actionsLabel')}\n      />\n\n      {selectedActions.length > 0 && (\n        <>\n          <IntensityTitle />\n\n          {/* All Actions Intensity Controls (now includes custom groups seamlessly) */}\n          {selectedActions.map((option) => {\n            const actionData = actionsList[option];\n            // Get available levels from the intensities mapping, excluding 0 (None)\n            const availableLevels = actionData?.intensities\n              ? Object.keys(actionData.intensities)\n                  .map(Number)\n                  .filter((level) => level > 0)\n                  .sort((a, b) => a - b)\n              : [1, 2, 3, 4]; // Default levels if no specific intensities defined\n\n            const currentLevels = formData.selectedActions?.[option]?.levels || [];\n\n            return (\n              <MultiSelectIntensity\n                key={option}\n                actionName={option}\n                actionLabel={actionData?.label || option}\n                selectedLevels={currentLevels}\n                availableLevels={availableLevels}\n                intensityNames={actionData?.intensities || {}}\n                onChange={(levels) => handleLevelsChange(levels, option, action, setFormData)}\n              />\n            );\n          })}\n        </>\n      )}\n    </>\n  );\n}\n","import { handleLevelsChange, populateSelections, updateFormDataWithDefaults } from '../helpers';\n\nimport { ChangeEvent } from 'react';\nimport { FormData } from '@/types';\nimport IntensityTitle from '../IntensityTitle';\nimport MultiSelect from '@/components/MultiSelect';\nimport MultiSelectIntensity from '@/components/MultiSelectIntensity';\nimport { SelectChangeEvent } from '@mui/material/Select';\nimport { Trans } from 'react-i18next';\nimport { Typography } from '@mui/material';\nimport YesNoSwitch from '@/components/GameForm/YesNoSwitch';\nimport { t } from 'i18next';\n\ninterface ActionData {\n  label?: string;\n  intensities?: Record<number, string>;\n  actions?: Record<string, any>;\n}\n\ninterface PickConsumptionsProps {\n  formData: FormData;\n  setFormData: React.Dispatch<React.SetStateAction<FormData>>;\n  options: (actionType: string) => Array<{ value: string; label: string }>;\n  actionsList: Record<string, ActionData>;\n}\n\nconst MAX_CONSUME = 2;\n\nexport default function PickConsumptions({\n  formData,\n  setFormData,\n  options,\n  actionsList,\n}: PickConsumptionsProps): JSX.Element {\n  const action = 'consumption';\n  const optionList = options(action);\n\n  // Always get current selections from formData instead of maintaining separate state\n  const currentSelections = populateSelections(formData, optionList, action);\n  const selectedConsumptions = currentSelections || [];\n\n  const handleConsumptionChange = (event: SelectChangeEvent<string[]>) => {\n    const { value } = event.target;\n    const valueArray = typeof value === 'string' ? value.split(',') : value;\n\n    if (valueArray.length <= MAX_CONSUME) {\n      updateFormDataWithDefaults(valueArray, action, setFormData);\n    }\n  };\n\n  const variationChange = (event: ChangeEvent<HTMLInputElement>, selectedItems: string[]) => {\n    const newVariation = event.target.checked ? 'appendMost' : 'standalone';\n    const newIsAppend = event.target.checked;\n\n    // Update selectedActions for each consumption item\n    const updatedSelectedActions = { ...(formData.selectedActions as Record<string, any>) };\n    selectedItems.forEach((option) => {\n      if (updatedSelectedActions[option]) {\n        updatedSelectedActions[option] = {\n          ...updatedSelectedActions[option],\n          variation: newVariation,\n        };\n      }\n    });\n\n    const updatedFormData = {\n      ...formData,\n      isAppend: newIsAppend,\n      selectedActions: updatedSelectedActions,\n    };\n\n    setFormData(updatedFormData);\n  };\n\n  return (\n    <>\n      <Typography variant=\"h6\" sx={{ my: 2 }}>\n        <Trans i18nKey=\"pickConsumptions\" />\n      </Typography>\n\n      <MultiSelect\n        onChange={handleConsumptionChange}\n        values={selectedConsumptions}\n        options={optionList}\n        label={t('consumables')}\n      />\n\n      {!!selectedConsumptions.length && (\n        <>\n          <IntensityTitle />\n\n          {selectedConsumptions.map((option) => {\n            const actionData = actionsList[option];\n            // Get available levels from the intensities mapping, excluding 0 (None)\n            const availableLevels = actionData?.intensities\n              ? Object.keys(actionData.intensities)\n                  .map(Number)\n                  .filter((level) => level > 0)\n                  .sort((a, b) => a - b)\n              : [1, 2, 3, 4]; // Default levels if no specific intensities defined\n\n            const currentLevels = formData.selectedActions?.[option]?.levels || [];\n\n            return (\n              <MultiSelectIntensity\n                key={option}\n                actionName={option}\n                actionLabel={actionData?.label || option}\n                selectedLevels={currentLevels}\n                availableLevels={availableLevels}\n                intensityNames={actionData?.intensities || {}}\n                onChange={(levels) =>\n                  handleLevelsChange(\n                    levels,\n                    option,\n                    action,\n                    setFormData,\n                    formData.isAppend ? 'appendMost' : 'standalone'\n                  )\n                }\n              />\n            );\n          })}\n\n          <Typography variant=\"h6\" sx={{ mt: 2 }}>\n            <Trans i18nKey=\"standaloneOrCombine\" />\n          </Typography>\n\n          <YesNoSwitch\n            trueCondition={formData.isAppend}\n            onChange={(event) => variationChange(event, selectedConsumptions)}\n            yesLabel=\"combineWithActions\"\n          />\n        </>\n      )}\n    </>\n  );\n}\n","import { Box, Card, CardContent, Typography, Grid, Chip } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport { PresetConfig } from '@/types/presets';\n\ninterface PresetSelectorProps {\n  gameMode: string;\n  onPresetSelect: (preset: PresetConfig) => void;\n  selectedPreset?: string;\n  actionsList: Record<string, any>;\n  showTitle?: boolean;\n}\n\nexport default function PresetSelector({\n  gameMode,\n  onPresetSelect,\n  selectedPreset,\n  actionsList,\n  showTitle = true,\n}: PresetSelectorProps) {\n  const { t } = useTranslation();\n\n  const PRESETS: Record<string, PresetConfig[]> = {\n    solo: [\n      {\n        id: 'popperbating',\n        name: t('presetPopperbating'),\n        description: t('presetPopperbatingDesc'),\n        actions: ['bating'],\n        consumptions: ['poppers'],\n        intensities: {\n          bating: 2,\n          poppers: 1,\n        },\n      },\n      {\n        id: 'smoking-tits',\n        name: t('presetSmokingTits'),\n        description: t('presetSmokingTitsDesc'),\n        actions: ['titTorture'],\n        consumptions: ['vaping'],\n        intensities: {\n          titTorture: 2,\n          vaping: 1,\n        },\n      },\n      {\n        id: 'exploration-solo',\n        name: t('presetExplorationSolo'),\n        description: t('presetExplorationSoloDesc'),\n        actions: ['throatTraining', 'buttPlay', 'titTorture', 'ballBusting'],\n        consumptions: [],\n        intensities: {\n          throatTraining: 1,\n          buttPlay: 1,\n          titTorture: 1,\n          ballBusting: 1,\n        },\n      },\n      {\n        id: 'ball-busting',\n        name: t('presetBallBusting'),\n        description: t('presetBallBustingDesc'),\n        actions: ['ballBusting', 'bating'],\n        consumptions: ['poppers'],\n        intensities: {\n          ballBusting: 2,\n          bating: 2,\n        },\n      },\n    ],\n    foreplay: [\n      {\n        id: 'romantic-start',\n        name: t('presetRomanticStart'),\n        description: t('presetRomanticStartDesc'),\n        actions: ['kissing', 'stripping'],\n        consumptions: ['alcohol'],\n        intensities: {\n          kissing: 2,\n          stripping: 1,\n          alcohol: 1,\n        },\n      },\n      {\n        id: 'degrading',\n        name: t('presetDegrading'),\n        description: t('presetDegradingDesc'),\n        actions: ['humiliation', 'footPlay', 'breathPlay'],\n        consumptions: ['poppers'],\n        intensities: {\n          humiliation: 2,\n          footPlay: 2,\n          breathPlay: 2,\n          poppers: 2,\n        },\n      },\n      {\n        id: 'sensual-touch',\n        name: t('presetSensualTouch'),\n        description: t('presetSensualTouchDesc'),\n        actions: ['kissing', 'footPlay', 'tickling'],\n        consumptions: [],\n        intensities: {\n          kissing: 2,\n          footPlay: 1,\n          tickling: 1,\n        },\n      },\n      {\n        id: 'electric-play',\n        name: t('presetElectricPlay'),\n        description: t('presetElectricPlayDesc'),\n        actions: ['electric', 'bondage'],\n        consumptions: ['vaping'],\n        intensities: {\n          electric: 1,\n          bondage: 2,\n          vaping: 1,\n        },\n      },\n    ],\n    sex: [\n      {\n        id: 'gentle-sex',\n        name: t('presetGentleSex'),\n        description: t('presetGentleSexDesc'),\n        actions: ['throatTraining', 'bating', 'buttPlay'],\n        consumptions: ['alcohol'],\n        intensities: {\n          throatTraining: 1,\n          bating: 1,\n          buttPlay: 1,\n          alcohol: 1,\n        },\n      },\n      {\n        id: 'fisting',\n        name: t('presetFisting'),\n        description: t('presetFistingDesc'),\n        actions: ['buttPlay'],\n        consumptions: ['poppers'],\n        intensities: {\n          buttPlay: 4,\n          poppers: 4,\n        },\n      },\n      {\n        id: 'bdsm',\n        name: t('presetBdsm'),\n        description: t('presetBdsmDesc'),\n        actions: ['pissPlay', 'throatTraining', 'spanking', 'titTorture'],\n        consumptions: [],\n        intensities: {\n          pissPlay: 2,\n          throatTraining: 2,\n          spanking: 2,\n          titTorture: 2,\n        },\n      },\n      {\n        id: 'breath-control',\n        name: t('presetBreathControl'),\n        description: t('presetBreathControlDesc'),\n        actions: ['bating'],\n        consumptions: ['gasMask'],\n        intensities: {\n          bating: 2,\n          gasMask: 2,\n        },\n      },\n    ],\n  };\n\n  const currentPresets = PRESETS[gameMode] || PRESETS.solo;\n\n  const handlePresetClick = (preset: PresetConfig) => {\n    onPresetSelect(preset);\n  };\n\n  return (\n    <Box>\n      {showTitle && (\n        <Typography variant=\"h6\" gutterBottom>\n          {t('quickStart')}\n        </Typography>\n      )}\n\n      <Grid container spacing={2}>\n        {currentPresets.map((preset) => (\n          <Grid size={{ xs: 12, sm: 6, lg: 3 }} key={preset.id}>\n            <Card\n              sx={{\n                cursor: 'pointer',\n                border: selectedPreset === preset.id ? 2 : 1,\n                borderColor: selectedPreset === preset.id ? 'primary.main' : 'divider',\n                backgroundColor: selectedPreset === preset.id ? 'primary.dark' : 'background.paper',\n                transition: 'all 0.2s ease-in-out',\n                height: '100%',\n                boxShadow: 1,\n                '&:hover': {\n                  borderColor: 'primary.main',\n                  transform: 'translateY(-2px)',\n                  boxShadow: 3,\n                  backgroundColor: selectedPreset === preset.id ? 'primary.dark' : 'action.hover',\n                },\n              }}\n              onClick={() => handlePresetClick(preset)}\n            >\n              <CardContent sx={{ p: 2.5 }}>\n                <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 600 }}>\n                  {preset.name}\n                </Typography>\n\n                <Box>\n                  {preset.actions.map((action, index) => (\n                    <Chip\n                      key={`action-${index}`}\n                      label={actionsList[action]?.label || action}\n                      size=\"small\"\n                      variant=\"outlined\"\n                      sx={{\n                        mr: 0.5,\n                        mb: 0.5,\n                        borderColor: 'primary.main',\n                        color: 'primary.main',\n                        '&:hover': {\n                          backgroundColor: 'primary.50',\n                        },\n                      }}\n                    />\n                  ))}\n                  {preset.consumptions.map((consumption, index) => (\n                    <Chip\n                      key={`consumption-${index}`}\n                      label={actionsList[consumption]?.label || consumption}\n                      size=\"small\"\n                      color=\"secondary\"\n                      variant=\"outlined\"\n                      sx={{\n                        mr: 0.5,\n                        mb: 0.5,\n                        borderColor: 'secondary.main',\n                        color: 'secondary.main',\n                        '&:hover': {\n                          backgroundColor: 'secondary.50',\n                        },\n                      }}\n                    />\n                  ))}\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n    </Box>\n  );\n}\n","import {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Button,\n  CircularProgress,\n  Divider,\n  Stack,\n  Typography,\n} from '@mui/material';\nimport { ActionEntry, FormData } from '@/types';\nimport { ExpandMore, PlayArrow, Tune } from '@mui/icons-material';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { hasValidSelections, purgedFormData } from './helpers';\nimport { useEffect, useState } from 'react';\n\nimport ButtonRow from '@/components/ButtonRow';\nimport PickActions from './PickActions';\nimport PickConsumptions from './PickConsumptions/index';\nimport { PresetConfig } from '@/types/presets';\nimport PresetSelector from './PresetSelector';\nimport { Settings } from '@/types/Settings';\nimport { isPublicRoom } from '@/helpers/strings';\n\ninterface ActionsStepProps {\n  formData: FormData & Partial<Settings>;\n  setFormData: React.Dispatch<React.SetStateAction<FormData & Partial<Settings>>>;\n  nextStep: () => void;\n  prevStep: (count?: number) => void;\n  actionsList: Record<string, any>;\n  isActionsLoading?: boolean;\n}\n\nexport default function ActionsStep({\n  formData,\n  setFormData,\n  nextStep,\n  prevStep,\n  actionsList,\n  isActionsLoading = false,\n}: ActionsStepProps): JSX.Element {\n  const { t } = useTranslation();\n  const [selectedPreset, setSelectedPreset] = useState<string>('');\n  const [showCustomization, setShowCustomization] = useState(false);\n  const [showQuickStart, setShowQuickStart] = useState(true);\n  function settingSelectLists(type: string): string[] {\n    return Object.keys(actionsList).filter((option) => actionsList[option]?.type === type);\n  }\n\n  // on load, purge invalid actions.\n  useEffect(() => {\n    // purge actions that we shouldn't be able to access.\n    const newFormData = purgedFormData(formData);\n    setFormData(newFormData);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- This should only run once on mount to clean initial data\n  }, []);\n\n  // Auto-open accordion if there are selected actions on mount\n  useEffect(() => {\n    const hasSelectedActions =\n      formData.selectedActions && Object.keys(formData.selectedActions).length > 0;\n    if (hasSelectedActions) {\n      setShowCustomization(true);\n      setShowQuickStart(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- Only run on mount\n  }, []);\n\n  const options = (key: string) =>\n    settingSelectLists(key).map((option) => ({\n      value: option,\n      label: actionsList[option]?.label,\n    }));\n\n  // Determine game mode for preset selection\n  let gameMode: string;\n  if (formData.gameMode === 'online') {\n    gameMode = 'solo';\n  } else if (formData.gameMode === 'local' && !formData.isNaked) {\n    gameMode = 'foreplay';\n  } else {\n    gameMode = 'sex';\n  }\n\n  // Extract common logic for mapping preset items to selected actions\n  const mapPresetItems = (\n    items: string[],\n    defaultIntensity: number,\n    preset: PresetConfig,\n    targetActions: Record<string, ActionEntry>\n  ) => {\n    items.forEach((item) => {\n      if (actionsList[item]) {\n        // Use preset intensity if available, otherwise use default\n        const presetIntensity = preset.intensities?.[item] || defaultIntensity;\n        // Get max available intensity level (exclude 'None' option)\n        const availableIntensities = Object.keys(actionsList[item].intensities || {}).filter(\n          (key) => key !== 'None'\n        );\n        const maxLevel = availableIntensities.length;\n        targetActions[item] = {\n          type: actionsList[item].type,\n          levels: Array.from({ length: Math.min(presetIntensity, maxLevel) }, (_, i) => i + 1),\n        };\n      }\n    });\n  };\n\n  // Handle preset selection\n  const handlePresetSelect = (preset: PresetConfig) => {\n    setSelectedPreset(preset.id);\n\n    // Apply preset to form data\n    const newSelectedActions: Record<string, ActionEntry> = {};\n\n    // Map preset actions to form data structure (default intensity: 2)\n    mapPresetItems(preset.actions, 2, preset, newSelectedActions);\n\n    // Handle consumptions - merge with actions since consumptions are also actions (default intensity: 1)\n    mapPresetItems(preset.consumptions, 1, preset, newSelectedActions);\n\n    setFormData({\n      ...formData,\n      selectedActions: newSelectedActions,\n    });\n\n    // After selecting a preset, switch to customization view\n    setShowQuickStart(false);\n    setShowCustomization(true);\n  };\n\n  // Handle accordion mutual exclusivity\n  const handleQuickStartChange = (_: React.SyntheticEvent, isExpanded: boolean) => {\n    setShowQuickStart(isExpanded);\n    if (isExpanded) {\n      setShowCustomization(false);\n    }\n  };\n\n  const handleCustomizationChange = (_: React.SyntheticEvent, isExpanded: boolean) => {\n    setShowCustomization(isExpanded);\n    if (isExpanded) {\n      setShowQuickStart(false);\n    }\n  };\n\n  // Check if user has made selections\n  const isNextDisabled = !hasValidSelections(formData.selectedActions);\n\n  // Show loading state when actions are still being loaded from migration\n  if (isActionsLoading) {\n    return (\n      <Box>\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center',\n            minHeight: 300,\n            gap: 2,\n          }}\n        >\n          <CircularProgress size={48} />\n          <Typography variant=\"h6\" color=\"text.secondary\">\n            {t('loadingAvailableActions')}\n          </Typography>\n        </Box>\n\n        {/* Navigation buttons - disabled during loading */}\n        <Box sx={{ mt: 4 }}>\n          <ButtonRow>\n            <Button disabled>\n              <Trans i18nKey=\"previous\" />\n            </Button>\n            <Button variant=\"contained\" disabled size=\"large\">\n              <Trans i18nKey=\"next\" />\n            </Button>\n          </ButtonRow>\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      {/* Quick Start Accordion */}\n      <Accordion\n        expanded={showQuickStart}\n        onChange={handleQuickStartChange}\n        sx={{\n          backgroundColor: 'background.default',\n          borderTop: 1,\n          borderBottom: 1,\n          borderColor: 'divider',\n          borderLeft: 'none',\n          borderRight: 'none',\n          borderRadius: 0,\n          '&:before': {\n            display: 'none',\n          },\n          boxShadow: 'none',\n        }}\n      >\n        <AccordionSummary\n          expandIcon={<ExpandMore />}\n          aria-controls=\"quickstart-content\"\n          id=\"quickstart-header\"\n          sx={{\n            backgroundColor: 'background.default',\n          }}\n        >\n          <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n            <PlayArrow />\n            <Typography variant=\"h6\">{t('quickStart')}</Typography>\n          </Stack>\n        </AccordionSummary>\n        <AccordionDetails sx={{ pb: 1 }}>\n          <PresetSelector\n            gameMode={gameMode}\n            onPresetSelect={handlePresetSelect}\n            selectedPreset={selectedPreset}\n            actionsList={actionsList}\n            showTitle={false}\n          />\n        </AccordionDetails>\n      </Accordion>\n\n      {/* Custom Selection Accordion */}\n      <Accordion\n        expanded={showCustomization}\n        onChange={handleCustomizationChange}\n        sx={{\n          backgroundColor: 'background.default',\n          borderTop: showQuickStart ? 'none' : 1,\n          borderBottom: 1,\n          borderColor: 'divider',\n          borderLeft: 'none',\n          borderRight: 'none',\n          borderRadius: 0,\n          marginTop: showQuickStart ? -1 : 0,\n          '&:before': {\n            display: 'none',\n          },\n          boxShadow: 'none',\n        }}\n      >\n        <AccordionSummary\n          expandIcon={<ExpandMore />}\n          aria-controls=\"customization-content\"\n          id=\"customization-header\"\n          sx={{\n            backgroundColor: 'background.default',\n          }}\n        >\n          <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n            <Tune />\n            <Typography variant=\"h6\">{t('customizeActions')}</Typography>\n          </Stack>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n            {t('customizeActionsDesc')}\n          </Typography>\n\n          <PickActions\n            formData={formData}\n            setFormData={setFormData}\n            options={options}\n            actionsList={actionsList}\n          />\n\n          <Divider sx={{ my: 3 }} />\n\n          <PickConsumptions\n            formData={formData}\n            setFormData={setFormData}\n            options={options}\n            actionsList={actionsList}\n          />\n        </AccordionDetails>\n      </Accordion>\n\n      <Box sx={{ mt: 4 }}>\n        <ButtonRow>\n          <Button onClick={() => prevStep(isPublicRoom(formData.room) ? 3 : 1)}>\n            <Trans i18nKey=\"previous\" />\n          </Button>\n          <Button variant=\"contained\" disabled={isNextDisabled} onClick={nextStep} size=\"large\">\n            <Trans i18nKey=\"next\" />\n          </Button>\n        </ButtonRow>\n      </Box>\n    </Box>\n  );\n}\n","import {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Chip,\n  CircularProgress,\n  Grid,\n  Stack,\n  Typography,\n} from '@mui/material';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useEffect, useState } from 'react';\n\nimport ButtonRow from '@/components/ButtonRow';\nimport { Settings } from '@/types/Settings';\nimport { arraysEqual } from '@/helpers/arrays';\nimport useSubmitGameSettings from '@/hooks/useSubmitGameSettings';\n\ninterface FinishStepProps {\n  formData: Settings;\n  setFormData: (data: Settings) => void;\n  prevStep: () => void;\n  actionsList: Record<string, any>;\n  close?: () => void;\n}\n\nexport default function FinishStep({\n  formData,\n  setFormData,\n  prevStep,\n  actionsList,\n  close,\n}: FinishStepProps): JSX.Element {\n  const no: [number, number] = [100, 100];\n  const yes: [number, number] = [0, 0];\n  const [yesFinishRange, setYesFinishRange] = useState<boolean>(\n    arraysEqual(formData?.finishRange || [], yes)\n  );\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const submitSettings = useSubmitGameSettings();\n  const { t } = useTranslation();\n\n  // on load, if don't have a finishRange OR if it is something from advanced settings, replace it.\n  useEffect(() => {\n    let newData = {\n      ...formData,\n      boardUpdated: true,\n    };\n    if (!yesFinishRange || !arraysEqual(formData.finishRange || [], no)) {\n      newData.finishRange = no;\n    }\n    setFormData(newData);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  async function handleSubmit(): Promise<void> {\n    setIsLoading(true);\n    try {\n      await submitSettings(formData, actionsList);\n    } catch (error) {\n      console.error('Error submitting settings:', error);\n    } finally {\n      setIsLoading(false);\n    }\n    if (typeof close === 'function') close();\n  }\n\n  const orgasmOptions = [\n    {\n      id: 'noOrgasm',\n      title: 'noOrgasm',\n      description: t('noOrgasmDesc'),\n      isSelected: !yesFinishRange,\n    },\n    {\n      id: 'yesOrgasm',\n      title: 'yesOrgasm',\n      description: t('yesOrgasmDesc'),\n      isSelected: yesFinishRange,\n    },\n  ];\n\n  return (\n    <Box sx={{ minHeight: '200px', display: 'flex', flexDirection: 'column' }}>\n      <Typography variant=\"h5\" gutterBottom sx={{ fontWeight: 600, mb: 3 }}>\n        <Trans i18nKey=\"WillYouOrgasm\" />\n      </Typography>\n\n      <Grid container spacing={2} sx={{ mb: 4 }}>\n        {orgasmOptions.map((option) => (\n          <Grid size={{ xs: 12, sm: 6 }} key={option.id}>\n            <Card\n              sx={{\n                cursor: 'pointer',\n                border: option.isSelected ? '3px solid' : '1px solid',\n                borderColor: option.isSelected ? 'primary.main' : 'divider',\n                backgroundColor: option.isSelected ? 'primary.50' : 'background.paper',\n                transition: 'all 0.2s ease-in-out',\n                height: '100%',\n                transform: option.isSelected ? 'scale(1.02)' : 'scale(1)',\n                '&:hover': {\n                  borderColor: 'primary.main',\n                  transform: 'scale(1.02)',\n                  boxShadow: 2,\n                },\n              }}\n              onClick={() => {\n                const newValue = option.id === 'yesOrgasm';\n                setFormData({\n                  ...formData,\n                  finishRange: newValue ? yes : no,\n                });\n                setYesFinishRange(newValue);\n              }}\n            >\n              <CardContent sx={{ p: 3 }}>\n                <Stack spacing={1} alignItems=\"center\" textAlign=\"center\">\n                  <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                    {t(option.title)}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {option.description}\n                  </Typography>\n                  {option.isSelected && (\n                    <Chip label={t('selected')} color=\"primary\" size=\"small\" sx={{ mt: 1 }} />\n                  )}\n                </Stack>\n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n\n      <Box sx={{ flexGrow: 1 }} />\n      <ButtonRow>\n        <Button onClick={prevStep} disabled={isLoading}>\n          <Trans i18nKey=\"previous\" />\n        </Button>\n        <Button\n          variant=\"contained\"\n          onClick={handleSubmit}\n          disabled={isLoading}\n          startIcon={isLoading ? <CircularProgress size={20} /> : null}\n          size=\"large\"\n          sx={{ px: 4 }}\n        >\n          <Trans i18nKey=\"buildGame\" />\n        </Button>\n      </ButtonRow>\n    </Box>\n  );\n}\n","import { Step, StepLabel, Stepper, useMediaQuery, useTheme } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\n\ninterface DynamicStepperProps {\n  currentStep: number;\n  isPublicRoom: boolean;\n  onStepClick?: (step: number) => void;\n}\n\nexport default function DynamicStepper({\n  currentStep,\n  isPublicRoom,\n  onStepClick,\n}: DynamicStepperProps) {\n  const { t } = useTranslation();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\n\n  // Public Room: 3 steps (Room → Actions → Finish)\n  // Private Room: 5 steps (Room → Local Players → Game Mode → Actions → Finish)\n  const steps = isPublicRoom\n    ? [\n        { label: String(t('roomSelection', 'Room Selection')), wizardStep: 1 },\n        { label: String(t('actionsSelection', 'Actions Selection')), wizardStep: 4 },\n        { label: String(t('finishSetup', 'Finish Setup')), wizardStep: 5 },\n      ]\n    : [\n        { label: String(t('roomSelection', 'Room Selection')), wizardStep: 1 },\n        { label: String(t('localPlayersStep.title', 'Local Players')), wizardStep: 2 },\n        { label: String(t('gameModeSelection', 'Game Mode Selection')), wizardStep: 3 },\n        { label: String(t('actionsSelection', 'Actions Selection')), wizardStep: 4 },\n        { label: String(t('finishSetup', 'Finish Setup')), wizardStep: 5 },\n      ];\n\n  // Find which stepper step corresponds to current wizard step\n  const activeStep = steps.findIndex((step) => step.wizardStep === currentStep);\n\n  const handleStepClick = (stepperIndex: number) => {\n    if (onStepClick) {\n      const wizardStep = steps[stepperIndex].wizardStep;\n      onStepClick(wizardStep);\n    }\n  };\n\n  return (\n    <Stepper\n      activeStep={activeStep}\n      alternativeLabel={!isMobile}\n      orientation=\"horizontal\"\n      sx={{\n        ...(isMobile && {\n          '& .MuiStepLabel-label': {\n            display: 'none',\n          },\n        }),\n      }}\n    >\n      {steps.map((step, index) => (\n        <Step key={index}>\n          <StepLabel\n            onClick={() => handleStepClick(index)}\n            sx={{\n              cursor: onStepClick ? 'pointer' : 'default',\n              '&:hover': onStepClick\n                ? {\n                    '& .MuiStepLabel-label': {\n                      color: 'primary.main',\n                    },\n                  }\n                : {},\n            }}\n          >\n            {!isMobile ? step.label : null}\n          </StepLabel>\n        </Step>\n      ))}\n    </Stepper>\n  );\n}\n","import { useState } from 'react';\nimport { Box, Button, Divider } from '@mui/material';\nimport { Trans } from 'react-i18next';\nimport RoomStep from './RoomStep';\nimport LocalPlayersStep from './LocalPlayersStep';\nimport GameModeStep from './GameModeStep';\nimport ActionsStep from './ActionsStep';\nimport FinishStep from './FinishStep';\nimport DynamicStepper from './components/DynamicStepper';\nimport GameSettings from '@/views/GameSettings';\nimport { useParams } from 'react-router-dom';\nimport useSettingsToFormData from '@/hooks/useSettingsToFormData';\nimport { isPublicRoom } from '@/helpers/strings';\nimport useUnifiedActionList from '@/hooks/useUnifiedActionList';\nimport { FormData } from '@/types';\nimport { Settings } from '@/types/Settings';\n\ninterface GameSettingsWizardProps {\n  close?: () => void;\n}\n\nexport default function GameSettingsWizard({ close }: GameSettingsWizardProps) {\n  const { id: room } = useParams<{ id: string }>();\n  const [step, setStep] = useState<number>(1);\n\n  const overrideSettings: Record<string, any> = { room: room || 'PUBLIC' };\n\n  const [formData, setFormData] = useSettingsToFormData<FormData & Partial<Settings>>(\n    {\n      gameMode: 'online',\n      roomRealtime: true,\n      actions: [],\n      consumption: [],\n      role: 'sub',\n      boardUpdated: false,\n      room: room || 'PUBLIC',\n      selectedActions: {},\n    },\n    overrideSettings\n  );\n\n  const { actionsList, isLoading: isActionsLoading } = useUnifiedActionList(formData.gameMode);\n\n  // Note: Removed the useEffect that was syncing URL to formData as it was interfering\n  // with wizard selections. The wizard should be independent until form submission.\n\n  const nextStep = (count?: number): void => {\n    if (!Number.isInteger(count)) return setStep(step + 1);\n    setStep(step + (count || 1));\n  };\n\n  const prevStep = (count?: number): void => {\n    if (!Number.isInteger(count)) return setStep(step - 1);\n    setStep(step - (count || 1));\n  };\n\n  const goToAdvanced = (): void => setStep(0);\n\n  const goToSetupWizard = (): void => {\n    if (isPublicRoom(formData.room)) {\n      setStep(4);\n    } else if (formData.gameMode === 'online') {\n      setStep(4);\n    } else {\n      setStep(1);\n    }\n  };\n\n  const renderStep = (): JSX.Element | null => {\n    switch (step) {\n      case 1:\n        return <RoomStep formData={formData} setFormData={setFormData} nextStep={nextStep} />;\n      case 2:\n        if (isPublicRoom(formData.room)) {\n          setStep(4);\n          return null;\n        }\n        return (\n          <LocalPlayersStep\n            formData={formData}\n            setFormData={setFormData}\n            nextStep={nextStep}\n            prevStep={prevStep}\n          />\n        );\n      case 3:\n        if (isPublicRoom(formData.room)) {\n          setStep(4);\n          return null;\n        }\n        return (\n          <GameModeStep\n            formData={formData}\n            setFormData={setFormData}\n            nextStep={nextStep}\n            prevStep={prevStep}\n          />\n        );\n      case 4:\n        return (\n          <ActionsStep\n            formData={formData}\n            setFormData={setFormData}\n            nextStep={nextStep}\n            prevStep={prevStep}\n            actionsList={actionsList}\n            isActionsLoading={isActionsLoading}\n          />\n        );\n      case 5:\n        return (\n          <FinishStep\n            formData={formData}\n            setFormData={setFormData}\n            prevStep={prevStep}\n            actionsList={actionsList}\n            close={close}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  if (step === 0) return <GameSettings closeDialog={close} onOpenSetupWizard={goToSetupWizard} />;\n\n  return (\n    <Box>\n      <Box sx={{ width: '100%', mt: 2, mb: 4 }}>\n        <DynamicStepper\n          currentStep={step}\n          isPublicRoom={isPublicRoom(formData.room)}\n          onStepClick={setStep}\n        />\n      </Box>\n      {renderStep()}\n\n      <Divider sx={{ mt: 3 }} />\n\n      <Button onClick={goToAdvanced}>\n        <Trans i18nKey=\"advancedSetup\" />\n      </Button>\n    </Box>\n  );\n}\n","import { Dialog, DialogContent, DialogTitle } from '@mui/material';\nimport { Trans } from 'react-i18next';\nimport CloseIcon from '@/components/CloseIcon';\nimport useBreakpoint from '@/hooks/useBreakpoint';\nimport { useSearchParams } from 'react-router-dom';\nimport GameSettingsWizard from '@/views/GameSettingsWizard';\n\ninterface GameSettingsDialogProps {\n  open: boolean;\n  close?: (() => void) | null;\n}\n\nexport default function GameSettingsDialog({\n  open,\n  close,\n}: GameSettingsDialogProps): JSX.Element | null {\n  const isMobile = useBreakpoint();\n  const [queryParams] = useSearchParams();\n  const hasImport = !!queryParams.get('importBoard');\n\n  if (hasImport) {\n    return null;\n  }\n\n  return (\n    <Dialog fullScreen={isMobile} open={open} maxWidth=\"md\">\n      <DialogTitle>\n        <Trans i18nKey=\"gameSettingsHeading\" />\n        {typeof close === 'function' && <CloseIcon close={close} />}\n      </DialogTitle>\n      <DialogContent>\n        <GameSettingsWizard close={typeof close === 'function' ? close : undefined} />\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":["ButtonRow","children","justifyContent","jsx","Box","ValueProposition","isPublic","onClick","isSelected","t","useTranslation","Card","CardContent","jsxs","Stack","Public","Lock","Typography","Trans","Chip","RoomStep","formData","setFormData","nextStep","urlRoom","useParams","showPrivateRoomField","setShowPrivateRoomField","useState","isPublicRoom","roomInputValue","setRoomInputValue","useEffect","currentRoom","shouldShowPrivateField","checkRoomExists","roomId","database","getDatabase","roomRef","ref","get","generateUniqueRoomId","useCallback","nanoid","customAlphabet","attempts","maxAttempts","handlePublicRoomSelect","handlePrivateRoomSelect","updateRoomData","newRoomValue","handleRoomChange","event","upperCaseValue","handleRoomBlur","handleRoomKeyDown","handleNext","TextField","Button","LocalPlayersStep","prevStep","hasLocalPlayersValue","clearLocalSession","useLocalPlayers","isSetupOpen","setIsSetupOpen","setupError","setSetupError","isPrivateRoom","handleStartLocalSetup","handleSkipLocalPlayers","prev","handleLocalSetupComplete","players","settings","error","handleLocalSetupCancel","timer","Fade","Alert","LocalPlayerSetup","Grid","GameModeStep","hasLocalPlayers","showRoleSelection","setShowRoleSelection","isOnlineMode","interactionModes","roleOptions","intensityModes","Fragment","mode","e","role","shouldPurgeAction","entry","gameMode","isNaked","isSolo","purgedFormData","newFormData","selectedActions","purgedSelectedActions","key","populateSelections","optionList","type","found","x","removeUnselectedActions","prevData","action","value","newSelectedActions","updateFormDataWithDefaults","option","data","handleLevelsChange","levels","variation","hasValidSelections","IntensityTitle","Tooltip","Help","MultiSelect","onChange","values","options","label","getLabel","renderValue","selected","FormControl","InputLabel","Select","OutlinedInput","MenuItem","Checkbox","ListItemText","MAX_ACTIONS","getAction","PickActions","actionsList","actionOptions","handleActionChange","selectedValues","actionData","availableLevels","level","a","b","currentLevels","MultiSelectIntensity","MAX_CONSUME","PickConsumptions","selectedConsumptions","handleConsumptionChange","valueArray","variationChange","selectedItems","newVariation","newIsAppend","updatedSelectedActions","updatedFormData","YesNoSwitch","PresetSelector","onPresetSelect","selectedPreset","showTitle","PRESETS","currentPresets","handlePresetClick","preset","index","consumption","ActionsStep","isActionsLoading","setSelectedPreset","showCustomization","setShowCustomization","showQuickStart","setShowQuickStart","settingSelectLists","mapPresetItems","items","defaultIntensity","targetActions","item","presetIntensity","maxLevel","_","i","handlePresetSelect","handleQuickStartChange","isExpanded","handleCustomizationChange","isNextDisabled","CircularProgress","Accordion","AccordionSummary","ExpandMore","PlayArrow","AccordionDetails","Tune","Divider","FinishStep","close","no","yes","yesFinishRange","setYesFinishRange","arraysEqual","isLoading","setIsLoading","submitSettings","useSubmitGameSettings","newData","handleSubmit","orgasmOptions","newValue","DynamicStepper","currentStep","onStepClick","theme","useTheme","isMobile","useMediaQuery","steps","activeStep","step","handleStepClick","stepperIndex","wizardStep","Stepper","Step","StepLabel","GameSettingsWizard","room","setStep","overrideSettings","useSettingsToFormData","useUnifiedActionList","count","goToAdvanced","goToSetupWizard","renderStep","GameSettings","GameSettingsDialog","open","useBreakpoint","queryParams","useSearchParams","Dialog","DialogTitle","CloseIcon","DialogContent"],"mappings":"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"}