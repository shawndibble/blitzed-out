{"version":3,"file":"userList.tsx-zasqzma4.js","sources":["../../src/context/userList.tsx"],"sourcesContent":["import React, { useMemo, useEffect, useCallback, ReactNode, useRef } from 'react';\nimport { Params, useParams } from 'react-router-dom';\nimport { getUserList } from '@/services/firebase';\nimport { useUserListStore } from '@/stores/userListStore';\n\nexport interface OnlineUser {\n  displayName: string;\n  uid: string;\n  lastSeen: Date;\n  [key: string]: any;\n}\n\n// Runtime validation function for OnlineUser objects\nfunction isValidOnlineUser(obj: unknown): obj is OnlineUser {\n  if (!obj || typeof obj !== 'object') {\n    return false;\n  }\n\n  const user = obj as Record<string, unknown>;\n\n  return (\n    typeof user.displayName === 'string' &&\n    typeof user.uid === 'string' &&\n    (user.lastSeen instanceof Date ||\n      typeof user.lastSeen === 'number' ||\n      typeof user.lastSeen === 'string')\n  );\n}\n\nexport interface UserListContextType {\n  onlineUsers: Record<string, OnlineUser>;\n}\n\n// eslint-disable-next-line react-refresh/only-export-components\nexport const UserListContext = React.createContext<UserListContextType | undefined>(undefined);\n\ninterface UserListProviderProps {\n  children: ReactNode;\n  [key: string]: any;\n}\n\nfunction UserListProvider(props: UserListProviderProps): JSX.Element {\n  const { id: room } = useParams<Params>();\n  const { onlineUsers, setUsers, setRoom, clearUsers, flushPendingUpdates } = useUserListStore();\n  const unsubscribeRef = useRef<(() => void) | null>(null);\n  const prevRoomRef = useRef<string | undefined>(room);\n\n  // Optimized user update handler with batching\n  const handleUserUpdate = useCallback(\n    (newUsers: Record<string, unknown> | null) => {\n      if (newUsers === null) {\n        clearUsers();\n      } else {\n        // Validate and transform the users data\n        const validatedUsers: Record<string, OnlineUser> = {};\n\n        Object.entries(newUsers).forEach(([uid, userData]) => {\n          if (isValidOnlineUser(userData)) {\n            // Ensure lastSeen is a Date object\n            const user: OnlineUser = {\n              ...userData,\n              lastSeen:\n                userData.lastSeen instanceof Date\n                  ? userData.lastSeen\n                  : new Date(userData.lastSeen as string | number),\n            };\n            validatedUsers[uid] = user;\n          } else {\n            console.warn(`Invalid user data for uid ${uid}:`, userData);\n          }\n        });\n\n        setUsers(validatedUsers);\n      }\n    },\n    [setUsers, clearUsers]\n  );\n\n  // Cleanup function for Firebase listener\n  const cleanup = useCallback(() => {\n    if (unsubscribeRef.current) {\n      unsubscribeRef.current();\n      unsubscribeRef.current = null;\n    }\n    // Flush any pending updates before cleanup\n    flushPendingUpdates();\n  }, [flushPendingUpdates]);\n\n  useEffect(() => {\n    // Only update room if it actually changed\n    if (prevRoomRef.current !== room) {\n      setRoom(room || null);\n      prevRoomRef.current = room;\n    }\n\n    if (!room) {\n      cleanup();\n      clearUsers();\n      return;\n    }\n\n    // Clean up previous listener\n    cleanup();\n\n    // Set up new listener\n    getUserList(room, handleUserUpdate);\n    unsubscribeRef.current = null; // TODO: getUserList should return unsubscribe function\n\n    // Cleanup on unmount or room change\n    return cleanup;\n  }, [room, setRoom, clearUsers, handleUserUpdate, cleanup]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return cleanup;\n  }, [cleanup]);\n\n  // Memoized context value with stable reference\n  const value = useMemo(() => ({ onlineUsers }), [onlineUsers]);\n\n  return <UserListContext.Provider value={value} {...props} />;\n}\n\nexport { UserListProvider };\n"],"names":["isValidOnlineUser","obj","user","UserListContext","React","UserListProvider","props","room","useParams","onlineUsers","setUsers","setRoom","clearUsers","flushPendingUpdates","useUserListStore","unsubscribeRef","useRef","prevRoomRef","handleUserUpdate","useCallback","newUsers","validatedUsers","uid","userData","cleanup","useEffect","getUserList","value","useMemo"],"mappings":"m0BAaA,SAASA,EAAkBC,EAAiC,CAC1D,GAAI,CAACA,GAAO,OAAOA,GAAQ,SACzB,MAAO,GAGT,MAAMC,EAAOD,EAEb,OACE,OAAOC,EAAK,aAAgB,UAC5B,OAAOA,EAAK,KAAQ,WACnBA,EAAK,oBAAoB,MACxB,OAAOA,EAAK,UAAa,UACzB,OAAOA,EAAK,UAAa,SAE/B,CAOO,MAAMC,EAAkBC,EAAM,cAA+C,MAAS,EAO7F,SAASC,EAAiBC,EAA2C,CACnE,KAAM,CAAE,GAAIC,CAAA,EAASC,EAAA,EACf,CAAE,YAAAC,EAAa,SAAAC,EAAU,QAAAC,EAAS,WAAAC,EAAY,oBAAAC,CAAA,EAAwBC,EAAA,EACtEC,EAAiBC,EAAAA,OAA4B,IAAI,EACjDC,EAAcD,EAAAA,OAA2BT,CAAI,EAG7CW,EAAmBC,EAAAA,YACtBC,GAA6C,CAC5C,GAAIA,IAAa,KACfR,EAAA,MACK,CAEL,MAAMS,EAA6C,CAAA,EAEnD,OAAO,QAAQD,CAAQ,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAQ,IAAM,CACpD,GAAIvB,EAAkBuB,CAAQ,EAAG,CAE/B,MAAMrB,EAAmB,CACvB,GAAGqB,EACH,SACEA,EAAS,oBAAoB,KACzBA,EAAS,SACT,IAAI,KAAKA,EAAS,QAA2B,CAAA,EAErDF,EAAeC,CAAG,EAAIpB,CACxB,MACE,QAAQ,KAAK,6BAA6BoB,CAAG,IAAKC,CAAQ,CAE9D,CAAC,EAEDb,EAASW,CAAc,CACzB,CACF,EACA,CAACX,EAAUE,CAAU,CAAA,EAIjBY,EAAUL,EAAAA,YAAY,IAAM,CAC5BJ,EAAe,UACjBA,EAAe,QAAA,EACfA,EAAe,QAAU,MAG3BF,EAAA,CACF,EAAG,CAACA,CAAmB,CAAC,EAExBY,EAAAA,UAAU,IAAM,CAOd,GALIR,EAAY,UAAYV,IAC1BI,EAAQJ,GAAQ,IAAI,EACpBU,EAAY,QAAUV,GAGpB,CAACA,EAAM,CACTiB,EAAA,EACAZ,EAAA,EACA,MACF,CAGA,OAAAY,EAAA,EAGAE,EAAYnB,EAAMW,CAAgB,EAClCH,EAAe,QAAU,KAGlBS,CACT,EAAG,CAACjB,EAAMI,EAASC,EAAYM,EAAkBM,CAAO,CAAC,EAGzDC,EAAAA,UAAU,IACDD,EACN,CAACA,CAAO,CAAC,EAGZ,MAAMG,EAAQC,EAAAA,QAAQ,KAAO,CAAE,YAAAnB,IAAgB,CAACA,CAAW,CAAC,EAE5D,aAAQN,EAAgB,SAAhB,CAAyB,MAAAwB,EAAe,GAAGrB,EAAO,CAC5D"}