{"version":3,"mappings":";w8BAWO,MAAMA,EAA2BC,MACtCC,EACAC,EAAmB,YAEnB,MAAMC,QAAeC,EACnBJ,UAEE,MAAMK,EAAuBC,EAAoCL,GAEjE,IAAKI,EAEH,OAAO,EAIT,MAAME,sBAAEA,SAA0BC,EAAAR,UAAA,MAAAO,+BAAME,OAAO,uBAAuBC,KAAA,SAAAC,GAAA,OAAAA,EAAAC,EAAA,UAAAL,0BAAAM,8BAChEC,QAAeP,EAAsBN,EAAQC,GAGnD,OAAIG,GAA0C,IAAlBS,EAAOC,QAMrC,4BAA4Bd,KAAUC,KACtC,GAGF,OAAkB,OAAXC,GAAkBA,GAMda,EAA+B,KAC1C,IACEC,GACF,OAASC,GACPC,EAAS,QAAS,+BAAgCD,EACpD","names":["verifyMigrationIntegrity","async","locale","gameMode","result","withErrorHandling","localStorageComplete","isCurrentLanguageMigrationCompleted","getAllAvailableGroups","__vitePreload","import","then","n","a2","__VITE_PRELOAD__","groups","length","fixMigrationStatusCorruption","resetMigrationStatus","error","logError"],"ignoreList":[],"sources":["../../src/services/migration/validationUtils.ts"],"sourcesContent":["/**\n * Validation utilities for integrity checks and corruption detection\n */\n\nimport { isCurrentLanguageMigrationCompleted, resetMigrationStatus } from './statusManager';\nimport { withErrorHandling, logError } from './errorHandling';\n\n/**\n * Verify that migration status matches actual database content\n * This detects corrupted migration status where localStorage says complete but Dexie is empty\n */\nexport const verifyMigrationIntegrity = async (\n  locale: string,\n  gameMode: string = 'online'\n): Promise<boolean> => {\n  const result = await withErrorHandling(\n    async () => {\n      // Check if localStorage claims migration is complete\n      const localStorageComplete = isCurrentLanguageMigrationCompleted(locale);\n\n      if (!localStorageComplete) {\n        // If localStorage says not complete, that's fine - migration will run\n        return true;\n      }\n\n      // If localStorage says complete, verify database actually has data\n      const { getAllAvailableGroups } = await import('@/stores/customGroups');\n      const groups = await getAllAvailableGroups(locale, gameMode);\n\n      // If localStorage says complete but database is empty, we have corruption\n      if (localStorageComplete && groups.length === 0) {\n        return false;\n      }\n\n      return true;\n    },\n    `verifyMigrationIntegrity:${locale}:${gameMode}`,\n    false\n  );\n\n  return result !== null ? result : false;\n};\n\n/**\n * Fix corrupted migration status by clearing localStorage\n */\nexport const fixMigrationStatusCorruption = (): void => {\n  try {\n    resetMigrationStatus();\n  } catch (error) {\n    logError('error', 'fixMigrationStatusCorruption', error);\n  }\n};\n\n/**\n * Validate that required dependencies are available\n */\nexport const validateDependencies = async (): Promise<{ isValid: boolean; missing: string[] }> => {\n  const missing: string[] = [];\n\n  try {\n    // Check if we can import required stores\n    await import('@/stores/customGroups');\n  } catch {\n    missing.push('customGroups store');\n  }\n\n  try {\n    await import('@/stores/customTiles');\n  } catch {\n    missing.push('customTiles store');\n  }\n\n  try {\n    await import('@/stores/store');\n  } catch {\n    missing.push('main store');\n  }\n\n  return { isValid: missing.length === 0, missing };\n};\n\n/**\n * Validate that a locale and game mode combination is supported\n */\nexport const validateLocaleGameMode = async (\n  locale: string,\n  _gameMode: string\n): Promise<boolean> => {\n  try {\n    // Try to import a known file for this combination\n    await import(`@/locales/${locale}/translation.json`);\n    // Basic validation passed, assume game mode is valid\n    return true;\n  } catch {\n    return false;\n  }\n};\n"],"file":"js/migrationService.ts-DI2GIcDW.js"}