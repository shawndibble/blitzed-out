{"version":3,"file":"chunk-D4HAf_Fz.js","sources":["../../src/utils/gameSounds.ts","../../src/components/LocalPlayerSetup/PlayerCard/index.tsx","../../src/components/SoundSelector/index.tsx","../../src/components/LocalPlayerSetup/PlayerForm/index.tsx","../../src/components/LocalPlayerSetup/index.tsx","../../src/components/MultiSelectIntensity/index.tsx","../../src/components/GameForm/YesNoSwitch/index.tsx","../../src/utils/backgroundUtils.ts","../../src/components/BackgroundSelect/index.tsx","../../src/services/tts.ts","../../src/hooks/useTTS.ts","../../src/components/VoiceSelect/index.tsx","../../src/views/GameSettings/AppSettings/LanguageSelect/index.tsx","../../src/views/GameSettings/AppSettings/AppBoolSwitch/index.tsx","../../src/views/GameSettings/AppSettings/index.tsx","../../src/views/GameSettings/BoardSettings/FinishSlider/index.tsx","../../src/components/GridItem/index.tsx","../../src/components/InvisibleAccordionGrid/index.tsx","../../src/components/SettingsSelect/index.tsx","../../src/views/GameSettings/BoardSettings/SelectBoardSetting/index.tsx","../../src/views/GameSettings/BoardSettings/SoloSwitch/index.tsx","../../src/views/GameSettings/BoardSettings/WarningAlert/index.tsx","../../src/views/GameSettings/BoardSettings/index.tsx","../../src/components/RoomBackgroundInput/index.tsx","../../src/views/GameSettings/RoomSettings/GameSpeed/index.tsx","../../src/views/GameSettings/RoomSettings/PlayerListOption/index.tsx","../../src/components/GameForm/RoomSwitch/index.tsx","../../src/views/GameSettings/LocalPlayerSettings.tsx","../../src/views/GameSettings/RoomSettings/index.tsx","../../src/components/TabPanel/index.tsx","../../src/views/GameSettings/validateForm.ts","../../src/views/GameSettings/index.tsx"],"sourcesContent":["// Simple game sound utilities following VoiceSelect pattern\nexport interface GameSound {\n  id: string;\n  name: string;\n  frequency: number;\n  type: OscillatorType;\n  duration: number;\n  category: string;\n  frequencies?: number[]; // For melodies with multiple notes\n}\n\nexport interface SoundCategory {\n  id: string;\n  name: string;\n  sounds: GameSound[];\n}\n\n// Classic System Alerts - inspired by iOS, Android, Windows, macOS\nconst CLASSIC_ALERTS: GameSound[] = [\n  {\n    id: 'tritone',\n    name: 'Tri-tone',\n    frequency: 1318,\n    type: 'sine',\n    duration: 400,\n    category: 'classic',\n    frequencies: [1318, 1568, 1175],\n  },\n  {\n    id: 'rebound',\n    name: 'Rebound',\n    frequency: 800,\n    type: 'triangle',\n    duration: 350,\n    category: 'classic',\n  },\n  {\n    id: 'chime',\n    name: 'Chime',\n    frequency: 1000,\n    type: 'sine',\n    duration: 500,\n    category: 'classic',\n    frequencies: [1000, 1200, 1400],\n  },\n  { id: 'boop', name: 'Boop', frequency: 600, type: 'sine', duration: 150, category: 'classic' },\n  {\n    id: 'breeze',\n    name: 'Breeze',\n    frequency: 400,\n    type: 'triangle',\n    duration: 600,\n    category: 'classic',\n    frequencies: [400, 500, 600, 500],\n  },\n  { id: 'pong', name: 'Pong', frequency: 1100, type: 'square', duration: 200, category: 'classic' },\n  {\n    id: 'glass',\n    name: 'Glass',\n    frequency: 1800,\n    type: 'sine',\n    duration: 300,\n    category: 'classic',\n    frequencies: [1800, 1600, 1400],\n  },\n  {\n    id: 'funk',\n    name: 'Funk',\n    frequency: 220,\n    type: 'sawtooth',\n    duration: 400,\n    category: 'classic',\n  },\n];\n\n// Musical Notes and Melodies\nconst MUSICAL_NOTES: GameSound[] = [\n  { id: 'c4', name: 'C Note', frequency: 261.63, type: 'sine', duration: 300, category: 'musical' },\n  { id: 'd4', name: 'D Note', frequency: 293.66, type: 'sine', duration: 300, category: 'musical' },\n  { id: 'e4', name: 'E Note', frequency: 329.63, type: 'sine', duration: 300, category: 'musical' },\n  { id: 'f4', name: 'F Note', frequency: 349.23, type: 'sine', duration: 300, category: 'musical' },\n  { id: 'g4', name: 'G Note', frequency: 392.0, type: 'sine', duration: 300, category: 'musical' },\n  {\n    id: 'ascending',\n    name: 'Ascending',\n    frequency: 261.63,\n    type: 'triangle',\n    duration: 800,\n    category: 'musical',\n    frequencies: [261.63, 293.66, 329.63, 349.23],\n  },\n  {\n    id: 'descending',\n    name: 'Descending',\n    frequency: 523.25,\n    type: 'triangle',\n    duration: 800,\n    category: 'musical',\n    frequencies: [523.25, 466.16, 415.3, 369.99],\n  },\n  {\n    id: 'chord',\n    name: 'Major Chord',\n    frequency: 261.63,\n    type: 'sine',\n    duration: 600,\n    category: 'musical',\n    frequencies: [261.63, 329.63, 392.0],\n  },\n  {\n    id: 'arpeggio',\n    name: 'Arpeggio',\n    frequency: 261.63,\n    type: 'triangle',\n    duration: 1000,\n    category: 'musical',\n    frequencies: [261.63, 329.63, 392.0, 523.25],\n  },\n];\n\n// Notification Alerts - modern app-style sounds\nconst NOTIFICATION_ALERTS: GameSound[] = [\n  {\n    id: 'bell',\n    name: 'Bell',\n    frequency: 800,\n    type: 'sine',\n    duration: 200,\n    category: 'notification',\n  },\n  {\n    id: 'ding',\n    name: 'Ding',\n    frequency: 1200,\n    type: 'square',\n    duration: 150,\n    category: 'notification',\n  },\n  {\n    id: 'chirp',\n    name: 'Chirp',\n    frequency: 1500,\n    type: 'sine',\n    duration: 80,\n    category: 'notification',\n  },\n  {\n    id: 'beep',\n    name: 'Beep',\n    frequency: 600,\n    type: 'sine',\n    duration: 100,\n    category: 'notification',\n  },\n  {\n    id: 'tick',\n    name: 'Tick',\n    frequency: 2000,\n    type: 'square',\n    duration: 50,\n    category: 'notification',\n  },\n  {\n    id: 'ping',\n    name: 'Ping',\n    frequency: 1800,\n    type: 'triangle',\n    duration: 120,\n    category: 'notification',\n  },\n  {\n    id: 'bubble',\n    name: 'Bubble',\n    frequency: 800,\n    type: 'sine',\n    duration: 200,\n    category: 'notification',\n    frequencies: [800, 1200],\n  },\n  {\n    id: 'pop',\n    name: 'Pop',\n    frequency: 1000,\n    type: 'square',\n    duration: 80,\n    category: 'notification',\n  },\n];\n\n// Game & Action Sounds - energetic and playful\nconst GAME_SOUNDS: GameSound[] = [\n  { id: 'buzz', name: 'Buzz', frequency: 400, type: 'sawtooth', duration: 250, category: 'game' },\n  {\n    id: 'whoosh',\n    name: 'Whoosh',\n    frequency: 200,\n    type: 'sawtooth',\n    duration: 500,\n    category: 'game',\n    frequencies: [200, 150, 100],\n  },\n  {\n    id: 'bloop',\n    name: 'Bloop',\n    frequency: 300,\n    type: 'sine',\n    duration: 400,\n    category: 'game',\n    frequencies: [300, 400, 350],\n  },\n  {\n    id: 'zap',\n    name: 'Zap',\n    frequency: 1500,\n    type: 'square',\n    duration: 120,\n    category: 'game',\n    frequencies: [1500, 1000, 500],\n  },\n  {\n    id: 'bounce',\n    name: 'Bounce',\n    frequency: 500,\n    type: 'triangle',\n    duration: 300,\n    category: 'game',\n    frequencies: [500, 700, 600, 800],\n  },\n  {\n    id: 'powerup',\n    name: 'Power Up',\n    frequency: 440,\n    type: 'square',\n    duration: 600,\n    category: 'game',\n    frequencies: [440, 523, 659, 784],\n  },\n  {\n    id: 'coin',\n    name: 'Coin',\n    frequency: 1046,\n    type: 'square',\n    duration: 300,\n    category: 'game',\n    frequencies: [1046, 1318],\n  },\n  {\n    id: 'fanfare',\n    name: 'Fanfare',\n    frequency: 523,\n    type: 'triangle',\n    duration: 1200,\n    category: 'game',\n    frequencies: [523, 659, 784, 1046],\n  },\n];\n\nexport const SOUND_CATEGORIES: SoundCategory[] = [\n  { id: 'classic', name: 'Classic System Alerts', sounds: CLASSIC_ALERTS },\n  { id: 'musical', name: 'Musical Notes & Melodies', sounds: MUSICAL_NOTES },\n  { id: 'notification', name: 'Notification Alerts', sounds: NOTIFICATION_ALERTS },\n  { id: 'game', name: 'Game & Action Sounds', sounds: GAME_SOUNDS },\n];\n\nexport const AVAILABLE_SOUNDS: GameSound[] = [\n  ...CLASSIC_ALERTS,\n  ...MUSICAL_NOTES,\n  ...NOTIFICATION_ALERTS,\n  ...GAME_SOUNDS,\n];\n\n// Enhanced sound playback with melody support\nexport async function playSound(sound: GameSound): Promise<boolean> {\n  try {\n    // Check if sound is valid\n    if (!sound || !sound.frequency || !sound.type || !sound.duration) {\n      return false;\n    }\n\n    const AudioContextClass = window.AudioContext || (window as any).webkitAudioContext;\n    if (!AudioContextClass) {\n      return false;\n    }\n\n    const audioContext = new AudioContextClass();\n\n    // If sound has multiple frequencies (melody), play them sequentially\n    if (sound.frequencies && sound.frequencies.length > 1) {\n      return playMelody(audioContext, sound);\n    }\n\n    // Single note playback\n    const oscillator = audioContext.createOscillator();\n    const gainNode = audioContext.createGain();\n\n    oscillator.connect(gainNode);\n    gainNode.connect(audioContext.destination);\n\n    oscillator.frequency.value = sound.frequency;\n    oscillator.type = sound.type;\n\n    // Handle both real AudioContext and mock\n    if (gainNode.gain.setValueAtTime) {\n      gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);\n      gainNode.gain.exponentialRampToValueAtTime(\n        0.01,\n        audioContext.currentTime + sound.duration / 1000\n      );\n    } else {\n      // Fallback for testing environment\n      gainNode.gain.value = 0.3;\n    }\n\n    oscillator.start();\n    oscillator.stop(audioContext.currentTime + sound.duration / 1000);\n\n    // Clean up after sound finishes\n    setTimeout(() => {\n      audioContext.close();\n    }, sound.duration + 100);\n\n    return true;\n  } catch (error) {\n    console.warn('Sound playback failed:', error);\n    return false;\n  }\n}\n\n// Play melody with multiple frequencies\nasync function playMelody(audioContext: AudioContext, sound: GameSound): Promise<boolean> {\n  try {\n    const frequencies = sound.frequencies!;\n    const noteDuration = sound.duration / frequencies.length;\n    const masterGain = audioContext.createGain();\n    masterGain.connect(audioContext.destination);\n\n    // Handle both real AudioContext and mock\n    if (masterGain.gain.setValueAtTime) {\n      masterGain.gain.setValueAtTime(0.3, audioContext.currentTime);\n    } else {\n      masterGain.gain.value = 0.3;\n    }\n\n    frequencies.forEach((frequency, index) => {\n      const oscillator = audioContext.createOscillator();\n      const noteGain = audioContext.createGain();\n\n      oscillator.connect(noteGain);\n      noteGain.connect(masterGain);\n\n      oscillator.frequency.value = frequency;\n      oscillator.type = sound.type;\n\n      const startTime = audioContext.currentTime + (index * noteDuration) / 1000;\n      const endTime = startTime + noteDuration / 1000;\n\n      // Handle both real AudioContext and mock\n      if (noteGain.gain.setValueAtTime) {\n        noteGain.gain.setValueAtTime(1, startTime);\n        noteGain.gain.exponentialRampToValueAtTime(0.01, endTime);\n      } else {\n        noteGain.gain.value = 1;\n      }\n\n      oscillator.start(startTime);\n      oscillator.stop(endTime);\n    });\n\n    // Clean up after melody finishes\n    setTimeout(() => {\n      audioContext.close();\n    }, sound.duration + 100);\n\n    return true;\n  } catch (error) {\n    console.warn('Melody playback failed:', error);\n    return false;\n  }\n}\n\nexport function getRandomSound(): GameSound {\n  return AVAILABLE_SOUNDS[Math.floor(Math.random() * AVAILABLE_SOUNDS.length)];\n}\n\nexport function getSoundById(id: string): GameSound | null {\n  if (!id) {\n    return null;\n  }\n  return AVAILABLE_SOUNDS.find((sound) => sound.id === id) || null;\n}\n","import { useState } from 'react';\nimport {\n  Card,\n  CardContent,\n  Box,\n  Typography,\n  IconButton,\n  Chip,\n  Avatar,\n  Menu,\n  MenuItem,\n  ListItemIcon,\n  ListItemText,\n} from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport {\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  MoreVert as MoreVertIcon,\n  Person as PersonIcon,\n} from '@mui/icons-material';\nimport { useTranslation } from 'react-i18next';\nimport type { LocalPlayer } from '@/types';\nimport type { PlayerRole } from '@/types/Settings';\n\ninterface PlayerCardProps {\n  /** The player data to display */\n  player: LocalPlayer;\n  /** Index of the player (0-based) */\n  index: number;\n  /** Whether this player is currently active */\n  isActive: boolean;\n  /** Whether editing is enabled */\n  canEdit?: boolean;\n  /** Whether deletion is enabled */\n  canDelete?: boolean;\n  /** Callback when player edit is requested */\n  onEdit?: (player: LocalPlayer) => void;\n  /** Callback when player deletion is requested */\n  onDelete?: (playerId: string) => void;\n  /** Callback when player role is changed */\n  onRoleChange?: (playerId: string, role: PlayerRole) => void;\n}\n\nconst CardContentPadding = styled(CardContent)(`\n  &:last-child {\n    padding-bottom: 8px;\n  }\n`);\n\n/**\n * PlayerCard component displays individual player information with edit/delete actions\n * Used in LocalPlayerSetup for managing players in single-device multiplayer mode\n */\nexport default function PlayerCard({\n  player,\n  index,\n  isActive,\n  canEdit = true,\n  canDelete = true,\n  onEdit,\n  onDelete,\n  onRoleChange,\n}: PlayerCardProps): JSX.Element {\n  const { t } = useTranslation();\n  const [menuAnchor, setMenuAnchor] = useState<HTMLElement | null>(null);\n  const [roleMenuAnchor, setRoleMenuAnchor] = useState<HTMLElement | null>(null);\n\n  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n    setMenuAnchor(event.currentTarget);\n  };\n\n  const handleMenuClose = () => {\n    setMenuAnchor(null);\n  };\n\n  const handleRoleMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation();\n    setRoleMenuAnchor(event.currentTarget);\n  };\n\n  const handleRoleMenuClose = () => {\n    setRoleMenuAnchor(null);\n  };\n\n  const handleEdit = () => {\n    handleMenuClose();\n    onEdit?.(player);\n  };\n\n  const handleDelete = () => {\n    handleMenuClose();\n    onDelete?.(player.id);\n  };\n\n  const handleRoleChange = (newRole: PlayerRole) => {\n    handleRoleMenuClose();\n    onRoleChange?.(player.id, newRole);\n  };\n\n  const getPlayerInitials = (name: string): string => {\n    return (\n      name\n        .split(' ')\n        .map((word) => word.charAt(0))\n        .join('')\n        .toUpperCase()\n        .slice(0, 2) || 'P'\n    );\n  };\n\n  const getRoleColor = (role: PlayerRole): 'primary' | 'secondary' | 'default' => {\n    switch (role) {\n      case 'dom':\n        return 'primary';\n      case 'sub':\n        return 'secondary';\n      case 'vers':\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n\n  return (\n    <Card\n      sx={{\n        border: isActive ? '2px solid' : '1px solid',\n        borderColor: isActive ? 'primary.main' : 'divider',\n        bgcolor: isActive ? 'action.selected' : 'background.paper',\n        transition: 'all 0.2s ease-in-out',\n        '&:hover': {\n          borderColor: 'primary.main',\n          elevation: 2,\n        },\n      }}\n    >\n      <CardContentPadding>\n        <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 2 }}>\n          {/* Player Avatar */}\n          <Avatar\n            sx={{\n              bgcolor: isActive ? 'primary.main' : 'grey.500',\n              marginTop: 0.5,\n              width: 24,\n              height: 24,\n              fontWeight: 'bold',\n            }}\n          >\n            {getPlayerInitials(player.name)}\n          </Avatar>\n\n          {/* Player Info */}\n          <Box sx={{ flexGrow: 1, minWidth: 0 }}>\n            {/* Name and Current Player Badge */}\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n              <Typography\n                variant=\"h6\"\n                component=\"h3\"\n                sx={{\n                  fontWeight: isActive ? 600 : 500,\n                  color: isActive ? 'primary.main' : 'text.primary',\n                  overflow: 'hidden',\n                  textOverflow: 'ellipsis',\n                  whiteSpace: 'nowrap',\n                  flexGrow: 1,\n                }}\n              >\n                {player.name || t('localPlayers.defaultPlayerName', { number: index + 1 })}\n              </Typography>\n              <Chip\n                label={t(`roles.${player.role}`)}\n                size=\"small\"\n                variant=\"outlined\"\n                color={getRoleColor(player.role)}\n                onClick={canEdit ? handleRoleMenuOpen : undefined}\n                sx={{\n                  cursor: canEdit ? 'pointer' : 'default',\n                  '&:hover': canEdit\n                    ? {\n                        bgcolor: 'action.hover',\n                      }\n                    : {},\n                }}\n              />\n\n              {isActive && (\n                <Chip\n                  label={t('localPlayers.currentPlayer')}\n                  size=\"small\"\n                  color=\"primary\"\n                  icon={<PersonIcon />}\n                />\n              )}\n            </Box>\n          </Box>\n\n          {/* Actions Menu */}\n          {(canEdit || canDelete) && (\n            <IconButton\n              size=\"small\"\n              onClick={handleMenuOpen}\n              aria-label={t('localPlayers.playerActions', { name: player.name })}\n            >\n              <MoreVertIcon />\n            </IconButton>\n          )}\n        </Box>\n      </CardContentPadding>\n\n      {/* Actions Menu */}\n      <Menu\n        anchorEl={menuAnchor}\n        open={Boolean(menuAnchor)}\n        onClose={handleMenuClose}\n        transformOrigin={{ horizontal: 'right', vertical: 'top' }}\n        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\n      >\n        {canEdit && (\n          <MenuItem onClick={handleEdit}>\n            <ListItemIcon>\n              <EditIcon fontSize=\"small\" />\n            </ListItemIcon>\n            <ListItemText>{t('localPlayers.editPlayer')}</ListItemText>\n          </MenuItem>\n        )}\n        {canDelete && (\n          <MenuItem onClick={handleDelete} sx={{ color: 'error.main' }}>\n            <ListItemIcon>\n              <DeleteIcon fontSize=\"small\" sx={{ color: 'error.main' }} />\n            </ListItemIcon>\n            <ListItemText>{t('localPlayers.deletePlayer')}</ListItemText>\n          </MenuItem>\n        )}\n      </Menu>\n\n      {/* Role Selection Menu */}\n      <Menu\n        anchorEl={roleMenuAnchor}\n        open={Boolean(roleMenuAnchor)}\n        onClose={handleRoleMenuClose}\n        transformOrigin={{ horizontal: 'left', vertical: 'top' }}\n        anchorOrigin={{ horizontal: 'left', vertical: 'bottom' }}\n      >\n        {(['dom', 'sub', 'vers'] as const).map((role) => (\n          <MenuItem\n            key={role}\n            onClick={() => handleRoleChange(role)}\n            selected={player.role === role}\n          >\n            <Chip\n              label={t(`roles.${role}`)}\n              size=\"small\"\n              variant={player.role === role ? 'filled' : 'outlined'}\n              color={getRoleColor(role)}\n            />\n          </MenuItem>\n        ))}\n      </Menu>\n    </Card>\n  );\n}\n","import {\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  IconButton,\n  Box,\n  Tooltip,\n  ListSubheader,\n  SelectChangeEvent,\n} from '@mui/material';\nimport { PlayArrow, VolumeOff } from '@mui/icons-material';\nimport { SOUND_CATEGORIES, playSound, getSoundById } from '@/utils/gameSounds';\n\ninterface SoundSelectorProps {\n  selectedSoundId?: string;\n  onSoundChange: (soundId: string) => void;\n  label?: string;\n}\n\nexport default function SoundSelector({\n  selectedSoundId,\n  onSoundChange,\n  label = 'Turn Sound',\n}: SoundSelectorProps): JSX.Element {\n  const handlePlaySample = async () => {\n    if (!selectedSoundId) return;\n\n    const sound = getSoundById(selectedSoundId);\n    if (sound) {\n      try {\n        const success = await playSound(sound);\n        if (!success) {\n          console.error('Failed to play sound');\n        }\n      } catch (error) {\n        console.error('Failed to play sound:', error);\n      }\n    }\n  };\n\n  const handleSelectChange = (event: SelectChangeEvent) => {\n    onSoundChange(event.target.value as string);\n  };\n\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, py: 1 }}>\n      <FormControl fullWidth size=\"small\">\n        <InputLabel id=\"sound-select-label\">{label}</InputLabel>\n        <Select\n          labelId=\"sound-select-label\"\n          value={selectedSoundId || ''}\n          label={label}\n          onChange={handleSelectChange}\n        >\n          <MenuItem value=\"\">\n            <Box display=\"flex\" alignItems=\"center\" gap={1}>\n              <VolumeOff fontSize=\"small\" />\n              No sound\n            </Box>\n          </MenuItem>\n\n          {SOUND_CATEGORIES.map((category) => [\n            <ListSubheader key={`header-${category.id}`} sx={{ fontWeight: 'bold' }}>\n              {category.name}\n            </ListSubheader>,\n            ...category.sounds.map((sound) => (\n              <MenuItem key={sound.id} value={sound.id} sx={{ pl: 3 }}>\n                {sound.name}\n              </MenuItem>\n            )),\n          ])}\n        </Select>\n      </FormControl>\n\n      <Tooltip title=\"Play sample\">\n        <IconButton\n          onClick={handlePlaySample}\n          color=\"primary\"\n          disabled={!selectedSoundId}\n          size=\"small\"\n        >\n          <PlayArrow />\n        </IconButton>\n      </Tooltip>\n    </Box>\n  );\n}\n","import { useState, useCallback, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Button,\n  Box,\n  Typography,\n  Alert,\n  Avatar,\n  Chip,\n} from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport type { LocalPlayer } from '@/types';\nimport type { PlayerRole } from '@/types/Settings';\nimport SoundSelector from '@/components/SoundSelector';\nimport { getRandomSound } from '@/utils/gameSounds';\n\ninterface PlayerFormProps {\n  /** Whether the dialog is open */\n  open: boolean;\n  /** Player to edit (null for new player) */\n  player: LocalPlayer | null;\n  /** Existing players (for name validation) */\n  existingPlayers: LocalPlayer[];\n  /** Callback when form is submitted */\n  onSubmit: (playerData: Partial<LocalPlayer>) => void;\n  /** Callback when form is cancelled */\n  onCancel: () => void;\n}\n\ninterface FormData {\n  name: string;\n  role: PlayerRole;\n  sound: string;\n}\n\ninterface FormErrors {\n  name?: string;\n  role?: string;\n}\n\n/**\n * PlayerForm component for creating/editing player information\n * Provides validation and a clean form interface\n */\nexport default function PlayerForm({\n  open,\n  player,\n  existingPlayers,\n  onSubmit,\n  onCancel,\n}: PlayerFormProps): JSX.Element {\n  const { t } = useTranslation();\n\n  // Form state\n  const [formData, setFormData] = useState<FormData>({\n    name: '',\n    role: 'vers',\n    sound: getRandomSound().id,\n  });\n\n  const [errors, setErrors] = useState<FormErrors>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Initialize form data when player changes\n  useEffect(() => {\n    if (player) {\n      setFormData({\n        name: player.name,\n        role: player.role,\n        sound: player.sound || getRandomSound().id,\n      });\n    } else {\n      setFormData({\n        name: '',\n        role: 'vers',\n        sound: getRandomSound().id,\n      });\n    }\n    setErrors({});\n  }, [player, open]);\n\n  // Form validation\n  const validateForm = useCallback((): boolean => {\n    const newErrors: FormErrors = {};\n\n    // Name validation\n    const trimmedName = formData.name.trim();\n    if (!trimmedName) {\n      newErrors.name = t('localPlayers.form.errors.nameRequired');\n    } else if (trimmedName.length < 2) {\n      newErrors.name = t('localPlayers.form.errors.nameTooShort');\n    } else if (trimmedName.length > 20) {\n      newErrors.name = t('localPlayers.form.errors.nameTooLong');\n    } else {\n      // Check for duplicate names (excluding current player)\n      const isDuplicate = existingPlayers.some(\n        (p) => p.id !== player?.id && p.name.toLowerCase() === trimmedName.toLowerCase()\n      );\n      if (isDuplicate) {\n        newErrors.name = t('localPlayers.form.errors.nameDuplicate');\n      }\n    }\n\n    // Role validation\n    if (!formData.role || !['dom', 'sub', 'vers'].includes(formData.role)) {\n      newErrors.role = t('localPlayers.form.errors.roleRequired');\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  }, [formData, existingPlayers, player, t]);\n\n  // Handle input changes\n  const handleNameChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const value = event.target.value;\n      setFormData((prev) => ({ ...prev, name: value }));\n\n      // Clear name error when user starts typing\n      if (errors.name) {\n        setErrors((prev) => ({ ...prev, name: undefined }));\n      }\n    },\n    [errors.name]\n  );\n\n  const handleRoleChange = useCallback(\n    (event: any) => {\n      const value = event.target.value as PlayerRole;\n      setFormData((prev) => ({ ...prev, role: value }));\n\n      // Clear role error when user selects\n      if (errors.role) {\n        setErrors((prev) => ({ ...prev, role: undefined }));\n      }\n    },\n    [errors.role]\n  );\n\n  const handleSoundChange = useCallback((soundId: string) => {\n    setFormData((prev) => ({ ...prev, sound: soundId }));\n  }, []);\n\n  // Handle form submission\n  const handleSubmit = useCallback(async () => {\n    if (!validateForm()) {\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      const playerData: Partial<LocalPlayer> = {\n        name: formData.name.trim(),\n        role: formData.role,\n        sound: formData.sound,\n      };\n\n      await onSubmit(playerData);\n    } catch (error) {\n      console.error('Error submitting player form:', error);\n      // Keep form open on error\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [formData, validateForm, onSubmit]);\n\n  // Handle cancel\n  const handleCancel = useCallback(() => {\n    setFormData({\n      name: '',\n      role: 'vers',\n      sound: getRandomSound().id,\n    });\n    setErrors({});\n    onCancel();\n  }, [onCancel]);\n\n  // Helper functions\n  const getPlayerInitials = useCallback((name: string): string => {\n    return (\n      name\n        .split(' ')\n        .map((word) => word.charAt(0))\n        .join('')\n        .toUpperCase()\n        .slice(0, 2) || 'P'\n    );\n  }, []);\n\n  const getRoleColor = (role: PlayerRole): 'primary' | 'secondary' | 'default' => {\n    switch (role) {\n      case 'dom':\n        return 'primary';\n      case 'sub':\n        return 'secondary';\n      case 'vers':\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n\n  const isEditMode = Boolean(player);\n\n  return (\n    <Dialog\n      open={open}\n      onClose={handleCancel}\n      maxWidth=\"sm\"\n      fullWidth\n      PaperProps={{\n        sx: { borderRadius: 2 },\n      }}\n    >\n      <DialogTitle>\n        {isEditMode\n          ? t('localPlayers.form.editPlayerTitle')\n          : t('localPlayers.form.addPlayerTitle')}\n      </DialogTitle>\n\n      <DialogContent>\n        {/* Player Preview */}\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            gap: 2,\n            mb: 3,\n            p: 2,\n            bgcolor: 'action.hover',\n            borderRadius: 1,\n          }}\n        >\n          <Avatar\n            sx={{\n              bgcolor: 'primary.main',\n              width: 56,\n              height: 56,\n              fontSize: '1.5rem',\n              fontWeight: 'bold',\n            }}\n          >\n            {getPlayerInitials(formData.name || 'P')}\n          </Avatar>\n          <Box sx={{ direction: 'row' }}>\n            <Typography variant=\"h6\">\n              {formData.name || t('localPlayers.form.previewName')}\n            </Typography>\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mt: 0.5 }}>\n              <Chip\n                label={t(`roles.${formData.role}`)}\n                size=\"small\"\n                color={getRoleColor(formData.role)}\n                variant=\"outlined\"\n              />\n            </Box>\n          </Box>\n        </Box>\n\n        {/* Form Fields */}\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>\n          {/* Name Field */}\n          <TextField\n            label={t('localPlayers.form.nameLabel')}\n            value={formData.name}\n            onChange={handleNameChange}\n            error={Boolean(errors.name)}\n            helperText={errors.name || t('localPlayers.form.nameHelper')}\n            placeholder={t('localPlayers.form.namePlaceholder')}\n            fullWidth\n            autoFocus={!isEditMode}\n            inputProps={{\n              maxLength: 20,\n            }}\n          />\n\n          {/* Role Field */}\n          <FormControl fullWidth error={Boolean(errors.role)}>\n            <InputLabel>{t('localPlayers.form.roleLabel')}</InputLabel>\n            <Select\n              value={formData.role}\n              onChange={handleRoleChange}\n              label={t('localPlayers.form.roleLabel')}\n            >\n              <MenuItem value=\"dom\">\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                  <Chip label={t('roles.dom')} size=\"small\" color=\"primary\" variant=\"outlined\" />\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {t('localPlayers.form.roleDescriptions.dom')}\n                  </Typography>\n                </Box>\n              </MenuItem>\n              <MenuItem value=\"sub\">\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                  <Chip label={t('roles.sub')} size=\"small\" color=\"secondary\" variant=\"outlined\" />\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {t('localPlayers.form.roleDescriptions.sub')}\n                  </Typography>\n                </Box>\n              </MenuItem>\n              <MenuItem value=\"vers\">\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                  <Chip label={t('roles.vers')} size=\"small\" color=\"default\" variant=\"outlined\" />\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {t('localPlayers.form.roleDescriptions.vers')}\n                  </Typography>\n                </Box>\n              </MenuItem>\n            </Select>\n            {errors.role && (\n              <Typography variant=\"caption\" color=\"error\" sx={{ mt: 1, ml: 1.5 }}>\n                {errors.role}\n              </Typography>\n            )}\n          </FormControl>\n\n          {/* Sound Selection */}\n          <SoundSelector\n            selectedSoundId={formData.sound}\n            onSoundChange={handleSoundChange}\n            label={t('localPlayers.form.soundLabel', 'Turn Sound')}\n          />\n\n          {/* Help Text */}\n          <Alert severity=\"info\" sx={{ mt: 1 }}>\n            <Typography variant=\"body2\">{t('localPlayers.form.helpText')}</Typography>\n          </Alert>\n        </Box>\n      </DialogContent>\n\n      <DialogActions sx={{ p: 3, pt: 1 }}>\n        <Button onClick={handleCancel} disabled={isSubmitting}>\n          {t('cancel')}\n        </Button>\n        <Button\n          onClick={handleSubmit}\n          variant=\"contained\"\n          disabled={isSubmitting || !formData.name.trim()}\n        >\n          {isSubmitting\n            ? t('localPlayers.form.saving')\n            : isEditMode\n              ? t('localPlayers.form.saveChanges')\n              : t('localPlayers.form.addPlayer')}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import { useState, useCallback, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, Typography, Box, Button, Alert, Fab } from '@mui/material';\nimport { Add as AddIcon } from '@mui/icons-material';\nimport { Trans, useTranslation } from 'react-i18next';\nimport type { LocalPlayer, LocalSessionSettings } from '@/types';\nimport type { PlayerRole } from '@/types/Settings';\nimport PlayerCard from './PlayerCard';\nimport PlayerForm from './PlayerForm';\n\ninterface LocalPlayerSetupProps {\n  /** Room ID for the session */\n  roomId: string;\n  /** Whether this is a private room (required for local players) */\n  isPrivateRoom: boolean;\n  /** Callback when setup is completed successfully */\n  onComplete: (players: LocalPlayer[], settings: LocalSessionSettings) => void;\n  /** Callback when setup is cancelled */\n  onCancel: () => void;\n  /** Initial players data to restore from previous setup */\n  initialPlayers?: LocalPlayer[];\n  /** Initial session settings to restore from previous setup */\n  initialSettings?: LocalSessionSettings;\n}\n\n/**\n * Setup wizard for configuring local players in single-device multiplayer mode\n * Only available in private rooms to maintain social nature of local play\n */\nexport default function LocalPlayerSetup({\n  roomId,\n  isPrivateRoom,\n  onComplete,\n  onCancel,\n  initialPlayers = [],\n  initialSettings,\n}: LocalPlayerSetupProps): JSX.Element {\n  const { t } = useTranslation();\n\n  // roomId will be used in Phase 2 for session creation - stored for future use\n  console.debug('Setting up local players for room:', roomId);\n\n  // Component state for player management\n  const [players, setPlayers] = useState<LocalPlayer[]>(initialPlayers);\n  const [isValid, setIsValid] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Player form state\n  const [isPlayerFormOpen, setIsPlayerFormOpen] = useState(false);\n  const [editingPlayer, setEditingPlayer] = useState<LocalPlayer | null>(null);\n\n  // Session settings state (setSessionSettings will be used in advanced settings)\n  const [sessionSettings] = useState<LocalSessionSettings>(\n    initialSettings || {\n      showTurnTransitions: true,\n      enableTurnSounds: true,\n      showPlayerAvatars: true,\n    }\n  );\n\n  // Validation logic\n  const validateSetup = useCallback(() => {\n    const isValidPlayerCount = players.length >= 2 && players.length <= 4;\n    const hasAllNames = players.every((player) => player.name.trim().length > 0);\n    const hasUniqueNames =\n      new Set(players.map((p) => p.name.toLowerCase())).size === players.length;\n\n    const valid = isValidPlayerCount && hasAllNames && hasUniqueNames;\n    setIsValid(valid);\n\n    // Set appropriate error message\n    if (players.length < 2) {\n      setError(t('localPlayers.errors.minimumPlayers'));\n    } else if (players.length > 4) {\n      setError(t('localPlayers.errors.maximumPlayers'));\n    } else if (!hasAllNames) {\n      setError(t('localPlayers.errors.emptyNames'));\n    } else if (!hasUniqueNames) {\n      setError(t('localPlayers.errors.duplicateNames'));\n    } else {\n      setError(null);\n    }\n\n    return valid;\n  }, [players, t]);\n\n  // Initialize players state only once when component mounts\n  useEffect(() => {\n    if (initialPlayers.length > 0) {\n      setPlayers(initialPlayers);\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Update validation when players change\n  useEffect(() => {\n    validateSetup();\n  }, [validateSetup]);\n\n  // Helper functions for player management\n  const generatePlayerId = useCallback(() => {\n    return `local_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }, []);\n\n  const generateDefaultName = useCallback(() => {\n    return t('localPlayers.defaultPlayerName', { number: players.length + 1 });\n  }, [players.length, t]);\n\n  const addPlayer = useCallback(() => {\n    if (players.length >= 4) return;\n\n    // Open form for new player\n    setEditingPlayer(null);\n    setIsPlayerFormOpen(true);\n  }, [players.length]);\n\n  const removePlayer = useCallback((playerId: string) => {\n    setPlayers((prev) => {\n      const filtered = prev.filter((p) => p.id !== playerId);\n      // Reorder remaining players\n      return filtered.map((player, index) => ({\n        ...player,\n        order: index,\n        isActive: index === 0, // First player is active\n      }));\n    });\n  }, []);\n\n  const updatePlayer = useCallback((playerId: string, updates: Partial<LocalPlayer>) => {\n    setPlayers((prev) =>\n      prev.map((player) => (player.id === playerId ? { ...player, ...updates } : player))\n    );\n  }, []);\n\n  const handlePlayerRoleChange = useCallback(\n    (playerId: string, role: PlayerRole) => {\n      updatePlayer(playerId, { role });\n    },\n    [updatePlayer]\n  );\n\n  const handlePlayerEdit = useCallback((player: LocalPlayer) => {\n    setEditingPlayer(player);\n    setIsPlayerFormOpen(true);\n  }, []);\n\n  // Handle form submission\n  const handlePlayerFormSubmit = useCallback(\n    async (playerData: Partial<LocalPlayer>) => {\n      if (editingPlayer) {\n        // Update existing player\n        updatePlayer(editingPlayer.id, playerData);\n      } else {\n        // Create new player\n        const newPlayer: LocalPlayer = {\n          id: generatePlayerId(),\n          name: playerData.name || generateDefaultName(),\n          role: playerData.role || 'vers',\n          order: players.length,\n          isActive: players.length === 0, // First player is active\n          deviceId: 'current_device',\n          location: 0, // Start at beginning of board\n          isFinished: false, // Not finished yet\n          sound: playerData.sound, // Include the sound property\n        };\n        setPlayers((prev) => [...prev, newPlayer]);\n      }\n\n      // Close form\n      setIsPlayerFormOpen(false);\n      setEditingPlayer(null);\n    },\n    [editingPlayer, updatePlayer, generatePlayerId, generateDefaultName, players.length]\n  );\n\n  // Handle form cancellation\n  const handlePlayerFormCancel = useCallback(() => {\n    setIsPlayerFormOpen(false);\n    setEditingPlayer(null);\n  }, []);\n\n  // Handle completion\n  const handleComplete = useCallback(async () => {\n    if (!validateSetup()) return;\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Call parent completion handler with players and settings\n      await onComplete(players, sessionSettings);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : t('localPlayers.errors.sessionCreation'));\n    } finally {\n      setIsLoading(false);\n    }\n  }, [players, sessionSettings, validateSetup, onComplete, t]);\n\n  // Handle cancellation\n  const handleCancel = useCallback(() => {\n    onCancel();\n  }, [onCancel]);\n\n  // If not a private room, show error message\n  if (!isPrivateRoom) {\n    return (\n      <Card>\n        <CardContent>\n          <Alert severity=\"warning\">\n            <Typography>\n              <Trans i18nKey=\"localPlayers.privateRoomRequired\" />\n            </Typography>\n          </Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader\n        title={\n          <Typography variant=\"h5\" component=\"h2\">\n            <Trans i18nKey=\"localPlayers.setupTitle\" />\n          </Typography>\n        }\n        subheader={\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            <Trans i18nKey=\"localPlayers.setupSubtitle\" />\n          </Typography>\n        }\n      />\n      <CardContent>\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        {/* Player list */}\n        <Box sx={{ mb: 3 }}>\n          <Box\n            sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}\n          >\n            <Typography variant=\"h6\">\n              <Trans i18nKey=\"localPlayers.playersTitle\" />\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {t('localPlayers.playersCount', { count: players.length })}\n            </Typography>\n          </Box>\n\n          {players.length === 0 ? (\n            <Box\n              sx={{\n                textAlign: 'center',\n                py: 4,\n                border: '2px dashed',\n                borderColor: 'divider',\n                borderRadius: 1,\n                bgcolor: 'action.hover',\n              }}\n            >\n              <Typography variant=\"body1\" color=\"text.secondary\" gutterBottom>\n                <Trans i18nKey=\"localPlayers.noPlayersYet\" />\n              </Typography>\n              <Button variant=\"contained\" startIcon={<AddIcon />} onClick={addPlayer}>\n                <Trans i18nKey=\"localPlayers.addFirstPlayer\" />\n              </Button>\n            </Box>\n          ) : (\n            <>\n              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n                {players.map((player, index) => (\n                  <PlayerCard\n                    key={player.id}\n                    player={player}\n                    index={index}\n                    isActive={player.isActive}\n                    canEdit={true}\n                    canDelete={players.length > 1}\n                    onEdit={handlePlayerEdit}\n                    onDelete={removePlayer}\n                    onRoleChange={handlePlayerRoleChange}\n                  />\n                ))}\n              </Box>\n\n              {players.length < 4 && (\n                <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2 }}>\n                  <Fab size=\"small\" color=\"primary\" onClick={addPlayer} aria-label=\"Add player\">\n                    <AddIcon />\n                  </Fab>\n                </Box>\n              )}\n            </>\n          )}\n        </Box>\n\n        {/* Action buttons */}\n        <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>\n          <Button variant=\"outlined\" onClick={handleCancel} disabled={isLoading}>\n            <Trans i18nKey=\"cancel\" />\n          </Button>\n          <Button variant=\"contained\" onClick={handleComplete} disabled={!isValid || isLoading}>\n            {isLoading ? (\n              <Trans i18nKey=\"localPlayers.creatingSession\" />\n            ) : (\n              <Trans i18nKey=\"localPlayers.startSession\" />\n            )}\n          </Button>\n        </Box>\n      </CardContent>\n\n      {/* Player Form Dialog */}\n      <PlayerForm\n        open={isPlayerFormOpen}\n        player={editingPlayer}\n        existingPlayers={players}\n        onSubmit={handlePlayerFormSubmit}\n        onCancel={handlePlayerFormCancel}\n      />\n    </Card>\n  );\n}\n","import {\n  Checkbox,\n  FormControl,\n  IconButton,\n  InputLabel,\n  ListItemText,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n} from '@mui/material';\nimport { Clear } from '@mui/icons-material';\nimport { useTheme } from '@mui/material/styles';\nimport { useTranslation } from 'react-i18next';\n\ninterface MultiSelectIntensityProps {\n  actionName: string;\n  actionLabel: string;\n  selectedLevels: number[];\n  availableLevels: number[];\n  intensityNames?: Record<number, string>; // Map level numbers to their display names\n  onChange: (levels: number[]) => void;\n  disabled?: boolean;\n  showValueGlow?: boolean; // Whether to show glow effect when values are selected\n}\n\nexport default function MultiSelectIntensity({\n  actionName,\n  actionLabel,\n  selectedLevels,\n  availableLevels,\n  intensityNames = {},\n  onChange,\n  disabled = false,\n  showValueGlow = false,\n}: MultiSelectIntensityProps): JSX.Element {\n  const { t } = useTranslation();\n  const theme = useTheme();\n\n  const labelId = `${actionName}-intensity-label`;\n\n  // Create glow styling when showValueGlow is true and there are selected levels\n  const shouldShowGlow = showValueGlow && selectedLevels.length > 0;\n  const glowSx = shouldShowGlow\n    ? {\n        boxShadow: `0 0 8px ${theme.palette.primary.main}`,\n      }\n    : {};\n\n  // Add background to label when glowing for better readability\n  const labelSx = shouldShowGlow\n    ? {\n        backgroundColor: 'var(--color-surface)',\n        borderRadius: '8px',\n        padding: '0 8px',\n      }\n    : {};\n\n  const handleChange = (event: SelectChangeEvent<number[]>) => {\n    const value = event.target.value;\n    // value should always be an array when multiple={true}\n    const levels = (value as number[]).filter((n) => !isNaN(n)).sort((a, b) => a - b);\n\n    onChange(levels);\n  };\n\n  const handleClear = (event: React.MouseEvent) => {\n    event.stopPropagation(); // Prevent opening the select dropdown\n    onChange([]);\n  };\n\n  // Custom render function to display selected intensity level names\n  const renderValue = (selected: number[]) => {\n    if (selected.length === 0) {\n      return t('none');\n    }\n    return selected.map((level) => intensityNames[level] || `${t('level')} ${level}`).join(', ');\n  };\n\n  if (availableLevels.length === 0) {\n    return <></>;\n  }\n\n  return (\n    <FormControl margin=\"normal\" fullWidth disabled={disabled}>\n      <InputLabel id={labelId} sx={labelSx}>\n        {actionLabel}\n      </InputLabel>\n      <Select\n        labelId={labelId}\n        id={actionName}\n        label={actionLabel}\n        multiple\n        value={selectedLevels}\n        onChange={handleChange}\n        renderValue={renderValue}\n        sx={glowSx}\n        endAdornment={\n          selectedLevels.length > 0 && (\n            <IconButton\n              size=\"small\"\n              onClick={handleClear}\n              sx={{\n                position: 'absolute',\n                right: 24, // Position to the left of the dropdown arrow\n                top: '50%',\n                transform: 'translateY(-50%)',\n                zIndex: 1,\n                '&:hover': {\n                  backgroundColor: 'rgba(0, 0, 0, 0.04)',\n                },\n              }}\n            >\n              <Clear fontSize=\"small\" />\n            </IconButton>\n          )\n        }\n      >\n        {availableLevels.map((level) => (\n          <MenuItem key={level} value={level}>\n            <Checkbox checked={selectedLevels.includes(level)} />\n            <ListItemText primary={intensityNames[level] || `${t('level')} ${level}`} />\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n","import { Box, FormControlLabel, Switch, SxProps, Theme } from '@mui/material';\nimport { ChangeEvent } from 'react';\nimport { t } from 'i18next';\n\ninterface YesNoSwitchProps {\n  trueCondition?: boolean;\n  onChange: (event: ChangeEvent<HTMLInputElement>, checked: boolean) => void;\n  yesLabel: string;\n  noLabel?: string | null;\n  sx?: SxProps<Theme>;\n}\n\nexport default function YesNoSwitch({\n  trueCondition,\n  onChange,\n  yesLabel,\n  noLabel = null,\n  sx = {},\n}: YesNoSwitchProps): JSX.Element {\n  // if we were not provided a noLabel, use the same label as the yesLabel\n  const actuallyNoLabel = noLabel ?? yesLabel;\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        justifyContent: 'center',\n        my: 1,\n        ...sx,\n      }}\n    >\n      <FormControlLabel\n        control={<Switch checked={trueCondition || false} onChange={onChange} />}\n        label={t(trueCondition ? yesLabel : actuallyNoLabel)}\n      />\n    </Box>\n  );\n}\n","/**\n * Utility functions for background filtering and management\n */\n\n/**\n * Filters available background options based on context\n * @param backgrounds - All available background options\n * @param isRoom - Whether this is for room background selection\n * @param isPrivateRoom - Whether the current context is a private room\n * @returns Filtered background options appropriate for the context\n */\nexport function filterBackgroundOptions(\n  backgrounds: Record<string, string>,\n  isRoom: boolean = false,\n  isPrivateRoom: boolean = false\n): Record<string, string> {\n  if (isRoom) {\n    // Room backgrounds - return all options\n    return backgrounds;\n  }\n\n  // App backgrounds - filter based on room type\n  const filtered = { ...backgrounds };\n\n  if (!isPrivateRoom) {\n    // Public room - remove \"Use Room Background\" option since it's not available\n    delete filtered['useRoomBackground'];\n  }\n\n  return filtered;\n}\n\n/**\n * Gets the appropriate background key based on context\n * @param isRoom - Whether this is for room background selection\n * @returns The settings key to use for background selection\n */\nexport function getBackgroundKey(isRoom: boolean): string {\n  return isRoom ? 'roomBackground' : 'background';\n}\n\n/**\n * Gets the appropriate background URL key based on context\n * @param isRoom - Whether this is for room background selection\n * @returns The settings key to use for background URL\n */\nexport function getBackgroundURLKey(isRoom: boolean): string {\n  return isRoom ? 'roomBackgroundURL' : 'backgroundURL';\n}\n","import { ChangeEvent, useEffect, useMemo, useState } from 'react';\nimport {\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n  TextField,\n} from '@mui/material';\nimport { useTranslation } from 'react-i18next';\n\nimport { Settings } from '@/types/Settings';\nimport {\n  filterBackgroundOptions,\n  getBackgroundKey,\n  getBackgroundURLKey,\n} from '@/utils/backgroundUtils';\n\ninterface BackgroundSelectProps {\n  formData: Settings;\n  setFormData: (data: Settings) => void;\n  backgrounds: Record<string, string>;\n  isRoom?: boolean;\n  isPrivateRoom?: boolean;\n}\n\nexport default function BackgroundSelect({\n  formData,\n  setFormData,\n  backgrounds,\n  isRoom = false,\n  isPrivateRoom = false,\n}: BackgroundSelectProps): JSX.Element {\n  const { t } = useTranslation();\n  const backgroundKey = getBackgroundKey(isRoom);\n  const backgroundURLKey = getBackgroundURLKey(isRoom);\n\n  // Memoized background filtering to prevent unnecessary re-renders\n  const filteredBackgrounds = useMemo(\n    () => filterBackgroundOptions(backgrounds, isRoom, isPrivateRoom),\n    [backgrounds, isRoom, isPrivateRoom]\n  );\n\n  // No defaults - let background be undefined/null if not set\n  const currentBackground = formData?.[backgroundKey];\n  const [background, setBackground] = useState<string>(currentBackground || '');\n\n  const options = () => {\n    const menuItems = [\n      // Placeholder option for empty value\n      <MenuItem value=\"\" key=\"empty\">\n        {isPrivateRoom ? t('useRoomBackground') : t('customTiles.color')}\n      </MenuItem>,\n      ...Object.entries(filteredBackgrounds).map(([file, label]) => (\n        <MenuItem value={file} key={file}>\n          {label}\n        </MenuItem>\n      )),\n    ];\n    return menuItems;\n  };\n\n  const backgroundSelection = (event: SelectChangeEvent<string>) => {\n    const value = event.target.value as string;\n    const data = { ...formData, [backgroundKey]: value } as Settings;\n\n    // Clear stale URL when switching away from custom\n    if (value !== 'custom') {\n      // Type-safe property assignment using computed property syntax\n      const updatedData = {\n        ...data,\n        [backgroundURLKey]: '',\n      } as Settings;\n\n      if (isRoom) {\n        updatedData.roomUpdated = true;\n      }\n\n      setFormData(updatedData);\n      setBackground(value);\n      return;\n    }\n\n    if (isRoom) {\n      data.roomUpdated = true;\n    }\n    setFormData(data);\n    setBackground(value);\n  };\n\n  useEffect(() => {\n    const validBackground =\n      currentBackground && filteredBackgrounds[currentBackground] ? currentBackground : '';\n\n    if (background !== validBackground) {\n      setBackground(validBackground);\n    }\n  }, [background, currentBackground, filteredBackgrounds]);\n\n  const handleURLChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const data = {\n      ...formData,\n      [backgroundKey]: 'custom',\n      [backgroundURLKey]: event.target.value,\n    } as Settings;\n\n    if (isRoom) {\n      data.roomUpdated = true;\n    }\n    setFormData(data);\n  };\n\n  return (\n    <>\n      <FormControl fullWidth margin=\"normal\">\n        <InputLabel id=\"background-label\">{t('background')}</InputLabel>\n        <Select\n          labelId=\"background-label\"\n          id=\"background\"\n          label={t('background')}\n          value={background}\n          onChange={backgroundSelection}\n          displayEmpty\n        >\n          {options()}\n        </Select>\n      </FormControl>\n      {background === 'custom' && (\n        <TextField\n          sx={{ mt: 2 }}\n          label={t('url')}\n          value={formData?.[backgroundURLKey] || ''}\n          fullWidth\n          onChange={handleURLChange}\n          helperText={\n            <>\n              {t('supportedSites')}\n              <br />\n              {t('requiresEmbeddedUrl')}\n            </>\n          }\n        />\n      )}\n    </>\n  );\n}\n","// Simple Text-to-Speech service using browser voices only\nexport interface VoiceOption {\n  name: string;\n  displayName: string;\n}\n\nexport class TTSService {\n  private voiceLoadPromise?: Promise<SpeechSynthesisVoice[]>;\n\n  // Wait for voices to be loaded\n  private async waitForVoices(): Promise<SpeechSynthesisVoice[]> {\n    if (this.voiceLoadPromise) {\n      return this.voiceLoadPromise;\n    }\n\n    this.voiceLoadPromise = new Promise((resolve) => {\n      let voices = window.speechSynthesis.getVoices();\n\n      // If voices are already loaded, return them immediately\n      if (voices.length > 0) {\n        resolve(voices);\n        return;\n      }\n\n      // Otherwise, wait for the voiceschanged event\n      const handleVoicesChanged = () => {\n        voices = window.speechSynthesis.getVoices();\n        if (voices.length > 0) {\n          window.speechSynthesis.removeEventListener('voiceschanged', handleVoicesChanged);\n          resolve(voices);\n        }\n      };\n\n      window.speechSynthesis.addEventListener('voiceschanged', handleVoicesChanged);\n\n      // Fallback timeout - resolve with whatever we have after 3 seconds\n      setTimeout(() => {\n        window.speechSynthesis.removeEventListener('voiceschanged', handleVoicesChanged);\n        resolve(window.speechSynthesis.getVoices());\n      }, 3000);\n    });\n\n    return this.voiceLoadPromise;\n  }\n\n  // Get all available voices (simplified to show all browser voices)\n  async getAvailableVoicesAsync(): Promise<VoiceOption[]> {\n    const browserVoices = await this.waitForVoices();\n\n    return browserVoices.map((voice) => ({\n      name: voice.name,\n      displayName: `${voice.name} (${voice.lang})`,\n    }));\n  }\n\n  // Get the first available voice (async version)\n  async getPreferredVoiceAsync(): Promise<string | null> {\n    const voices = await this.getAvailableVoicesAsync();\n    return voices.length > 0 ? voices[0].name : null;\n  }\n\n  // Speak text with specified voice\n  async speak(text: string, voiceName?: string, pitch: number = 0): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (!('speechSynthesis' in window)) {\n        reject(new Error('Speech synthesis not supported'));\n        return;\n      }\n\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.pitch = pitch;\n\n      // Set voice if specified\n      if (voiceName) {\n        const voices = window.speechSynthesis.getVoices();\n        const voice = voices.find((v) => v.name === voiceName);\n        if (voice) utterance.voice = voice;\n      }\n\n      utterance.onend = () => resolve();\n      utterance.onerror = (event) => reject(new Error(`Speech failed: ${event.error}`));\n\n      window.speechSynthesis.speak(utterance);\n    });\n  }\n\n  // Stop current speech\n  stop(): void {\n    if (window.speechSynthesis?.speaking) {\n      window.speechSynthesis.cancel();\n    }\n  }\n\n  // Check if TTS is available\n  isAvailable(): boolean {\n    return 'speechSynthesis' in window;\n  }\n}\n\n// Singleton instance\nexport const tts = new TTSService();\n","import { useState, useCallback, useEffect } from 'react';\nimport { tts } from '@/services/tts';\n\ninterface TTSOptions {\n  voice?: string;\n  pitch?: number;\n}\n\ninterface UseTTSReturn {\n  speak: (text: string, options?: TTSOptions) => Promise<void>;\n  stop: () => void;\n  isPlaying: boolean;\n  error: string | null;\n  isLoading: boolean;\n}\n\nexport const useTTS = (): UseTTSReturn => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const stop = useCallback(() => {\n    tts.stop();\n    setIsPlaying(false);\n    setIsLoading(false);\n  }, []);\n\n  const speak = useCallback(\n    async (text: string, options: TTSOptions = {}) => {\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        // Stop any current playback\n        stop();\n\n        // Synthesize speech\n        setIsPlaying(true);\n        await tts.speak(text, options.voice, options.pitch);\n\n        setIsLoading(false);\n        setIsPlaying(false);\n      } catch (err) {\n        const errorMessage = err instanceof Error ? err.message : 'TTS failed';\n        setError(errorMessage);\n        setIsPlaying(false);\n        setIsLoading(false);\n        console.error('TTS Error:', err);\n      }\n    },\n    [stop]\n  );\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      stop();\n    };\n  }, [stop]);\n\n  return {\n    speak,\n    stop,\n    isPlaying,\n    error,\n    isLoading,\n  };\n};\n","import { useState, useEffect, useCallback } from 'react';\nimport {\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  IconButton,\n  Box,\n  Typography,\n  Tooltip,\n} from '@mui/material';\nimport { PlayArrow } from '@mui/icons-material';\nimport { useTranslation } from 'react-i18next';\nimport { SelectChangeEvent } from '@mui/material/Select';\nimport { VoiceOption, tts } from '@/services/tts';\nimport { useTTS } from '@/hooks/useTTS';\nimport { Settings } from '@/types/Settings';\n\ninterface VoiceSelectProps {\n  formData: Settings;\n  setFormData: (data: Settings) => void;\n  onVoiceChange?: (voiceName: string) => void;\n}\n\nexport default function VoiceSelect({\n  formData,\n  setFormData,\n  onVoiceChange,\n}: VoiceSelectProps): JSX.Element {\n  const { t } = useTranslation();\n  const [voices, setVoices] = useState<VoiceOption[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const { speak } = useTTS();\n\n  const selectedVoice = formData.voicePreference || '';\n\n  const handleVoiceChange = useCallback(\n    (voiceName: string) => {\n      const updatedFormData = { ...formData, voicePreference: voiceName };\n      setFormData(updatedFormData);\n      onVoiceChange?.(voiceName);\n    },\n    [formData, setFormData, onVoiceChange]\n  );\n\n  useEffect(() => {\n    let mounted = true;\n\n    const loadVoices = async () => {\n      try {\n        if (mounted) {\n          setIsLoading(true);\n          const availableVoices = await tts.getAvailableVoicesAsync();\n\n          if (mounted) {\n            // Filter to only show voices with \"Google\" in the name\n            const googleVoices = availableVoices.filter(\n              (voice) => voice.displayName.includes('Google') || voice.name.includes('Google')\n            );\n            setVoices(googleVoices);\n\n            // Set default voice if none selected\n            if (!selectedVoice && googleVoices.length > 0) {\n              const preferredVoice = await tts.getPreferredVoiceAsync();\n              // Use the preferred voice if it's a Google voice, otherwise use the first Google voice\n              if (\n                preferredVoice &&\n                googleVoices.some((voice) => voice.name === preferredVoice) &&\n                mounted\n              ) {\n                handleVoiceChange(preferredVoice);\n              } else if (mounted) {\n                handleVoiceChange(googleVoices[0].name);\n              }\n            }\n\n            setIsLoading(false);\n          }\n        }\n      } catch (error) {\n        console.error('Failed to load voices:', error);\n        if (mounted) {\n          setIsLoading(false);\n        }\n      }\n    };\n\n    loadVoices();\n\n    return () => {\n      mounted = false;\n    };\n  }, [selectedVoice, handleVoiceChange]);\n\n  const handleSelectChange = (event: SelectChangeEvent) => {\n    handleVoiceChange(event.target.value);\n  };\n\n  const handlePlaySample = async () => {\n    const voiceToPlay = selectedVoice || (voices.length > 0 ? voices[0].name : '');\n    if (!voiceToPlay) return;\n\n    const sampleText = t('tts.sampleText', 'Take a drink and enjoy the game.');\n\n    try {\n      await speak(sampleText, {\n        voice: voiceToPlay,\n        pitch: -2.0, // Match the pitch from the main TTS\n      });\n    } catch (error) {\n      console.error('Failed to play sample:', error);\n    }\n  };\n\n  const getVoiceLabel = (voice: VoiceOption): string => {\n    // Remove \"Google \" from the beginning of the display name since all voices are Google\n    return voice.displayName.replace(/^Google\\s+/i, '');\n  };\n\n  if (isLoading) {\n    return (\n      <Box sx={{ py: 1 }}>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {t('loadingVoices', 'Loading voices...')}\n        </Typography>\n      </Box>\n    );\n  }\n\n  if (voices.length === 0) {\n    return (\n      <Box sx={{ py: 1 }}>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {t('noVoicesAvailable', 'No voices available for this language')}\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, py: 1 }}>\n      <FormControl fullWidth size=\"small\">\n        <InputLabel id=\"voice-select-label\">{t('voiceSelection', 'Voice')}</InputLabel>\n        <Select\n          labelId=\"voice-select-label\"\n          value={selectedVoice}\n          label={t('voiceSelection', 'Voice')}\n          onChange={handleSelectChange}\n        >\n          {voices.map((voice) => (\n            <MenuItem key={voice.name} value={voice.name}>\n              {getVoiceLabel(voice)}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n\n      <Tooltip title={t('playSample', 'Play sample')}>\n        <IconButton\n          onClick={handlePlaySample}\n          color=\"primary\"\n          disabled={!selectedVoice}\n          size=\"small\"\n        >\n          <PlayArrow />\n        </IconButton>\n      </Tooltip>\n    </Box>\n  );\n}\n","import { Language } from '@mui/icons-material';\nimport {\n  Box,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n  CircularProgress,\n} from '@mui/material';\nimport { useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { languages } from '@/services/i18nHelpers';\n\ninterface LanguageSelectProps {\n  boardUpdated: () => void;\n}\n\nexport default function LanguageSelect({ boardUpdated }: LanguageSelectProps): JSX.Element {\n  const { i18n } = useTranslation();\n  const [language, setLanguage] = useState<string>(i18n.resolvedLanguage || 'en');\n  const [loading, setLoading] = useState<boolean>(false);\n\n  async function changeLanguage(value: string): Promise<void> {\n    setLoading(true);\n    setLanguage(value);\n\n    try {\n      // Language change will automatically trigger migration via MigrationContext\n      await i18n.changeLanguage(value);\n      boardUpdated();\n    } catch (error) {\n      console.error('Error changing language:', error);\n      // Still attempt to change language even if migration fails\n      await i18n.changeLanguage(value);\n      boardUpdated();\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const menuItems = Object.entries(languages).map(([key, obj]) => (\n    <MenuItem value={key} key={key}>\n      {obj.label}\n    </MenuItem>\n  ));\n\n  return (\n    <Box sx={{ minWidth: 120, mt: 1, mb: 2 }}>\n      <FormControl fullWidth>\n        <InputLabel id=\"language-label\" sx={{ display: 'flex', alignItems: 'center' }}>\n          <Language sx={{ mr: 1 }} />\n          <Trans i18nKey=\"language\" />\n        </InputLabel>\n        <Select\n          labelId=\"language-label\"\n          id=\"language-select\"\n          value={language}\n          disabled={loading}\n          label={\n            <>\n              <Language />\n              <Trans i18nKey=\"language\" />\n            </>\n          }\n          onChange={(event: SelectChangeEvent<string>) => changeLanguage(event.target.value)}\n          endAdornment={loading && <CircularProgress size={20} />}\n          MenuProps={{\n            disableScrollLock: true,\n            BackdropProps: {\n              invisible: true,\n            },\n            PaperProps: {\n              style: {\n                backdropFilter: 'none',\n                WebkitBackdropFilter: 'none',\n              },\n            },\n          }}\n        >\n          {menuItems}\n        </Select>\n      </FormControl>\n    </Box>\n  );\n}\n","import YesNoSwitch from '@/components/GameForm/YesNoSwitch';\nimport { ChangeEvent } from 'react';\nimport { Settings } from '@/types/Settings';\n\ninterface AppBoolSwitchProps {\n  field: string;\n  formData: Settings;\n  handleSwitch: (event: ChangeEvent<HTMLInputElement>, field: string) => void;\n}\n\nexport default function AppBoolSwitch({\n  field,\n  formData,\n  handleSwitch,\n}: AppBoolSwitchProps): JSX.Element {\n  return (\n    <YesNoSwitch\n      trueCondition={formData[field]}\n      onChange={(event) => handleSwitch(event, field)}\n      yesLabel={field}\n      sx={{ justifyContent: 'left' }}\n    />\n  );\n}\n","import { Divider, Typography } from '@mui/material';\nimport { Trans, useTranslation } from 'react-i18next';\nimport BackgroundSelect from '@/components/BackgroundSelect';\nimport VoiceSelect from '@/components/VoiceSelect';\nimport LanguageSelect from './LanguageSelect';\nimport AppBoolSwitch from './AppBoolSwitch';\nimport { useSettings } from '@/stores/settingsStore';\nimport { Settings } from '@/types/Settings';\nimport { isPublicRoom } from '@/helpers/strings';\nimport { ChangeEvent } from 'react';\n\ninterface AppSettingsProps {\n  formData: Settings;\n  setFormData: (data: Settings) => void;\n  boardUpdated: () => void;\n}\n\nexport default function AppSettings({\n  formData,\n  setFormData,\n  boardUpdated,\n}: AppSettingsProps): JSX.Element {\n  const [settings, updateSettings] = useSettings();\n  const isPrivateRoom = Boolean(formData.room && !isPublicRoom(formData.room));\n\n  const { t } = useTranslation();\n  const backgrounds: Record<string, string> = {\n    useRoomBackground: t('useRoomBackground'),\n    color: t('color'),\n    gray: t('gray'),\n    'metronome.gif': t('hypnoDick'),\n    'pink-spiral.gif': t('pinkSpiral'),\n    custom: t('customURL'),\n  };\n\n  function handleSwitch(event: ChangeEvent<HTMLInputElement>, field: string): void {\n    setFormData({ ...formData, [field]: event.target.checked });\n    // normally we wouldn't update settings as it can be very slow, but for switch toggles,\n    // I want to ensure the local storage is updated immediately\n    updateSettings({ ...settings, [field]: event.target.checked });\n  }\n\n  function handleVoiceChange(voiceName: string): void {\n    // Update local storage immediately for voice changes\n    updateSettings({ ...settings, voicePreference: voiceName });\n  }\n\n  return (\n    <>\n      <LanguageSelect boardUpdated={boardUpdated} />\n\n      <Typography variant=\"h5\">\n        <Trans i18nKey=\"dialog\" />\n      </Typography>\n\n      <AppBoolSwitch field=\"playerDialog\" formData={formData} handleSwitch={handleSwitch} />\n      <AppBoolSwitch field=\"othersDialog\" formData={formData} handleSwitch={handleSwitch} />\n\n      <Divider />\n\n      <Typography variant=\"h5\" sx={{ mt: 2 }}>\n        <Trans i18nKey=\"sounds\" />\n      </Typography>\n\n      <AppBoolSwitch field=\"mySound\" formData={formData} handleSwitch={handleSwitch} />\n      <AppBoolSwitch field=\"otherSound\" formData={formData} handleSwitch={handleSwitch} />\n      <AppBoolSwitch field=\"chatSound\" formData={formData} handleSwitch={handleSwitch} />\n      <AppBoolSwitch field=\"readRoll\" formData={formData} handleSwitch={handleSwitch} />\n\n      {formData.readRoll && (\n        <VoiceSelect\n          formData={formData}\n          setFormData={setFormData}\n          onVoiceChange={handleVoiceChange}\n        />\n      )}\n\n      <Divider />\n\n      <Typography variant=\"h5\" sx={{ mt: 2, textTransform: 'capitalize' }}>\n        <Trans i18nKey=\"misc\" />\n      </Typography>\n\n      <AppBoolSwitch field=\"hideBoardActions\" formData={formData} handleSwitch={handleSwitch} />\n      <AppBoolSwitch field=\"advancedSettings\" formData={formData} handleSwitch={handleSwitch} />\n\n      <BackgroundSelect\n        formData={formData}\n        setFormData={setFormData}\n        backgrounds={backgrounds}\n        isPrivateRoom={isPrivateRoom}\n      />\n      <Divider />\n    </>\n  );\n}\n","import { Box, Divider, Slider, Typography } from '@mui/material';\nimport { Trans } from 'react-i18next';\nimport { Settings } from '@/types/Settings';\n\ninterface FinishSliderProps {\n  formData: Settings;\n  setFormData: (data: Settings) => void;\n}\n\nexport default function FinishSlider({ formData, setFormData }: FinishSliderProps): JSX.Element {\n  const handleChange = (\n    _: Event | React.SyntheticEvent<Element, Event>,\n    newValue: number | number[]\n  ): void => {\n    setFormData({ ...formData, finishRange: newValue as [number, number], boardUpdated: true });\n  };\n\n  const finishRange = formData?.finishRange || [30, 70];\n\n  return (\n    <Box>\n      <Divider />\n      <Typography id=\"finish-slider\" sx={{ my: 1 }}>\n        <Trans i18nKey=\"finishSlider\" />\n      </Typography>\n      <Slider\n        aria-labelledby=\"finish-slider\"\n        value={finishRange}\n        onChange={handleChange}\n        valueLabelDisplay=\"off\"\n      />\n      <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"space-between\" textAlign=\"center\">\n        <Typography whiteSpace=\"nowrap\">\n          <Trans i18nKey=\"noCum\" /> {finishRange[0]}%\n        </Typography>\n        <Typography whiteSpace=\"nowrap\">\n          <Trans i18nKey=\"ruined\" /> {finishRange[1] - finishRange[0]}%\n        </Typography>\n        <Typography whiteSpace=\"nowrap\">\n          <Trans i18nKey=\"cum\" /> {100 - finishRange[1]}%\n        </Typography>\n      </Box>\n      <Divider sx={{ my: 1 }} />\n    </Box>\n  );\n}\n","import { Grid } from '@mui/material';\nimport { ReactNode } from 'react';\n\ninterface GridItemProps {\n  children: ReactNode;\n}\n\nexport default function GridItem({ children }: GridItemProps): JSX.Element {\n  return <Grid size={{ xs: 12, md: 5 }}>{children}</Grid>;\n}\n","import { ExpandMore } from '@mui/icons-material';\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Grid,\n  Typography,\n  Box,\n} from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport { ReactNode } from 'react';\n\ninterface InvisibleAccordionGridProps {\n  children: ReactNode;\n  title: ReactNode;\n  subtitle: ReactNode;\n  defaultExpanded?: boolean;\n  hasSelectedOptions?: boolean; // Whether to show blue dot indicator\n  [key: string]: any;\n}\n\nexport default function InvisibleAccordionGrid({\n  children,\n  title,\n  subtitle,\n  defaultExpanded = false,\n  hasSelectedOptions = false,\n  ...rest\n}: InvisibleAccordionGridProps): JSX.Element {\n  const theme = useTheme();\n  return (\n    <Accordion\n      defaultExpanded={defaultExpanded}\n      {...rest}\n      sx={{\n        backgroundColor: 'inherit',\n        backgroundImage: 'none',\n        boxShadow: 'none',\n      }}\n    >\n      <AccordionSummary expandIcon={<ExpandMore />} sx={{ px: 0 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', width: '100%' }}>\n          <Typography\n            variant=\"h6\"\n            sx={{ display: 'flex', alignItems: 'center', gap: 1, minWidth: 'fit-content' }}\n          >\n            {title}:\n            {hasSelectedOptions && (\n              <Box\n                sx={{\n                  width: 8,\n                  height: 8,\n                  borderRadius: '50%',\n                  backgroundColor: theme.palette.primary.main,\n                  flexShrink: 0,\n                }}\n              />\n            )}\n          </Typography>\n          <Typography sx={{ pt: 0.5, ml: 2, flex: 1 }}>{subtitle}</Typography>\n        </Box>\n      </AccordionSummary>\n      <AccordionDetails sx={{ px: 0 }}>\n        <Grid container columnSpacing={2} justifyContent=\"space-evenly\" className=\"columned-grid\">\n          {children}\n        </Grid>\n      </AccordionDetails>\n    </Accordion>\n  );\n}\n","import { Help } from '@mui/icons-material';\nimport {\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n  SxProps,\n  Theme,\n} from '@mui/material';\nimport { t } from 'i18next';\nimport { forwardRef, ReactNode, useMemo } from 'react';\nimport { Trans } from 'react-i18next';\n\ninterface OptionObject {\n  value: string;\n  label: ReactNode;\n}\n\ntype Option = string | OptionObject;\n\ninterface SettingsSelectProps {\n  value: string | null;\n  onChange: (event: SelectChangeEvent<string>) => void;\n  label: string;\n  options: Option[];\n  defaultValue?: string | null;\n  sx?: SxProps<Theme>;\n  helpIcon?: boolean;\n  fullWidth?: boolean;\n  [key: string]: any;\n}\n\nconst SettingsSelect = forwardRef<HTMLDivElement, SettingsSelectProps>(\n  (\n    {\n      value,\n      onChange,\n      label,\n      options,\n      defaultValue = null,\n      sx,\n      helpIcon = false,\n      fullWidth = true,\n      ...rest\n    },\n    ref\n  ) => {\n    // Memoize the items array to prevent unnecessary re-renders\n    const items = useMemo(() => {\n      return options.map((option: Option) => {\n        if (typeof option === 'string') {\n          return (\n            <MenuItem key={option} value={option}>\n              {t(option)}\n            </MenuItem>\n          );\n        }\n\n        return (\n          <MenuItem key={option.value} value={option.value}>\n            {option.label}\n          </MenuItem>\n        );\n      });\n    }, [options]);\n\n    return (\n      <FormControl fullWidth={fullWidth} margin=\"normal\" sx={sx} {...rest} ref={ref}>\n        <InputLabel id={`${label}Label`}>\n          <Trans i18nKey={label} />\n          {!!helpIcon && <Help sx={{ ml: 1, fontSize: 16 }} />}\n        </InputLabel>\n        <Select\n          labelId={`${label}Label`}\n          id={label}\n          label={\n            <>\n              <Trans i18nKey={label} />\n              {!!helpIcon && <Help sx={{ ml: 1, fontSize: 16 }} />}\n            </>\n          }\n          value={value || defaultValue || ''}\n          onChange={onChange}\n        >\n          {items}\n        </Select>\n      </FormControl>\n    );\n  }\n);\n\nexport default SettingsSelect;\n","import './style.css';\n\nimport {\n  FormControl,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n  Tooltip,\n} from '@mui/material';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport { Help } from '@mui/icons-material';\nimport MultiSelectIntensity from '@/components/MultiSelectIntensity';\nimport { Settings } from '@/types/Settings';\nimport SettingsSelect from '@/components/SettingsSelect';\nimport Typography from '@mui/material/Typography';\n\ninterface SelectBoardSettingProps {\n  option: string;\n  settings: Settings;\n  setSettings: (settings: Settings) => void;\n  actionsFolder: Record<string, any>;\n  type: 'sex' | 'foreplay' | 'consumption' | 'solo';\n  showVariation?: boolean;\n  showRole?: boolean;\n}\n\ninterface RoleOption {\n  label: string;\n  value: string;\n}\n\nexport default function SelectBoardSetting({\n  option,\n  settings,\n  setSettings,\n  actionsFolder,\n  type,\n  showVariation = false,\n  showRole = false,\n}: SelectBoardSettingProps): JSX.Element {\n  const { t } = useTranslation();\n  const labelId = `${option}label`;\n  const label = actionsFolder[option]?.label;\n\n  function handleChange(event: SelectChangeEvent<any> | any, key: string, nestedKey: string): void {\n    const existingAction = settings.selectedActions?.[key];\n    setSettings({\n      ...settings,\n      selectedActions: {\n        ...settings.selectedActions,\n        [key]: {\n          ...existingAction,\n          type,\n          levels: existingAction?.levels ?? [],\n          [nestedKey]: event?.target?.value,\n        },\n      },\n      boardUpdated: true,\n    });\n  }\n\n  function handleLevelsChange(levels: number[], key: string): void {\n    const existingAction = settings.selectedActions?.[key];\n    setSettings({\n      ...settings,\n      selectedActions: {\n        ...settings.selectedActions,\n        [key]: {\n          ...existingAction,\n          type,\n          levels,\n        },\n      },\n      boardUpdated: true,\n    });\n  }\n\n  let gridSize = 12;\n  if (showVariation || showRole) gridSize = 6;\n\n  let roleOptions: string[] | RoleOption[] = ['dom', 'vers', 'sub'];\n  if (actionsFolder[option]?.dom) {\n    roleOptions = [\n      {\n        label: actionsFolder[option].dom,\n        value: 'dom',\n      },\n      {\n        label: t('vers'),\n        value: 'vers',\n      },\n      {\n        label: actionsFolder[option].sub,\n        value: 'sub',\n      },\n    ];\n  }\n\n  const renderMultiSelectIntensity = () => {\n    const actionData = actionsFolder[option];\n    // Get available levels from the intensities mapping, excluding 0 (None)\n    const availableLevels = actionData?.intensities\n      ? Object.keys(actionData.intensities)\n          .map(Number)\n          .filter((level) => level > 0)\n          .sort((a, b) => a - b)\n      : [1, 2, 3, 4]; // Default levels if no specific intensities defined\n\n    const currentLevels = settings.selectedActions?.[option]?.levels || [];\n\n    return (\n      <MultiSelectIntensity\n        actionName={option}\n        actionLabel={actionData?.label || option}\n        selectedLevels={currentLevels}\n        availableLevels={availableLevels}\n        intensityNames={actionData?.intensities || {}}\n        onChange={(levels) => handleLevelsChange(levels, option)}\n        showValueGlow={true}\n      />\n    );\n  };\n\n  return (\n    <Grid container key={option} justifyContent=\"center\">\n      <Grid size={gridSize}>{renderMultiSelectIntensity()}</Grid>\n      {!!showRole && (\n        <Grid size={6}>\n          <SettingsSelect\n            sx={{ ml: 1 }}\n            value={settings.selectedActions?.[option]?.role}\n            onChange={(event: SelectChangeEvent<string>) => handleChange(event, option, 'role')}\n            label={`${t('role')}: ${label}`}\n            options={roleOptions}\n            defaultValue={settings.role || 'sub'}\n          />\n        </Grid>\n      )}\n      {!!showVariation && (\n        <Grid size={6}>\n          <Tooltip\n            placement=\"top\"\n            title={\n              <Trans i18nKey=\"variationTooltip\">\n                <Typography variant=\"subtitle2\">Standalone = Its own tile. </Typography>\n                <Typography variant=\"subtitle2\">Append Some = 50% chance.</Typography>\n                <Typography variant=\"subtitle2\">Append Most = 90% chance.</Typography>\n              </Trans>\n            }\n            arrow\n          >\n            <FormControl fullWidth margin=\"normal\" sx={{ ml: 1 }}>\n              <InputLabel id={`${labelId}Variation`}>\n                {`${label} ${t('variation')}`}\n                <Help sx={{ ml: 1, fontSize: 16 }} />\n              </InputLabel>\n              <Select\n                labelId={`${labelId}Variation`}\n                id={`${option}Variation`}\n                label={\n                  <>\n                    {label} {t('variation')}\n                    <Help sx={{ ml: 1, fontSize: 16 }} />\n                  </>\n                }\n                value={settings.selectedActions?.[option]?.variation || 'standalone'}\n                onChange={(event) => handleChange(event, option, 'variation')}\n              >\n                <MenuItem value=\"standalone\">\n                  <Trans i18nKey=\"standalone\" />\n                </MenuItem>\n                <MenuItem value=\"appendSome\">\n                  <Trans i18nKey=\"appendSome\" />\n                </MenuItem>\n                <MenuItem value=\"appendMost\">\n                  <Trans i18nKey=\"appendMost\" />\n                </MenuItem>\n              </Select>\n            </FormControl>\n          </Tooltip>\n        </Grid>\n      )}\n    </Grid>\n  );\n}\n","import { Help } from '@mui/icons-material';\nimport { Stack, Switch, Tooltip, Typography } from '@mui/material';\nimport { isOnlineMode } from '@/helpers/strings';\nimport { Trans } from 'react-i18next';\nimport { ChangeEvent } from 'react';\nimport { Settings } from '@/types/Settings';\n\ninterface SoloSwitchProps {\n  formData: Settings;\n  setFormData: (data: Settings) => void;\n}\n\nexport default function SoloSwitch({ formData, setFormData }: SoloSwitchProps): JSX.Element {\n  return (\n    <Stack direction=\"row\" spacing={1} alignItems=\"center\" justifyContent=\"center\" sx={{ mt: 1 }}>\n      <Typography>\n        <Trans i18nKey=\"solo\" />\n      </Typography>\n      <Tooltip\n        title={\n          <Typography variant=\"subtitle2\">\n            <Trans i18nKey=\"soloTooltip\" />\n          </Typography>\n        }\n        arrow\n      >\n        <Help sx={{ fontSize: 15 }} />\n      </Tooltip>\n      <Switch\n        id=\"gameMode\"\n        checked={!isOnlineMode(formData.gameMode)}\n        onChange={(event: ChangeEvent<HTMLInputElement>) =>\n          setFormData({\n            ...formData,\n            gameMode: event.target.checked ? 'local' : 'online',\n            boardUpdated: true,\n          })\n        }\n        inputProps={{ 'aria-label': 'Game Type' }}\n      />\n      <Typography>\n        <Trans i18nKey=\"local\" />\n      </Typography>\n      <Tooltip\n        title={\n          <Typography variant=\"subtitle2\">\n            <Trans i18nKey=\"localTooltip\" />\n          </Typography>\n        }\n        arrow\n      >\n        <Help sx={{ fontSize: 15 }} />\n      </Tooltip>\n    </Stack>\n  );\n}\n","import { Alert } from '@mui/material';\nimport { useEffect, useState } from 'react';\nimport { Trans } from 'react-i18next';\nimport { Settings } from '@/types/Settings';\n\ninterface ConsumptionWarningProps {\n  formData: Settings;\n}\n\nexport default function ConsumptionWarning({\n  formData,\n}: ConsumptionWarningProps): JSX.Element | null {\n  const [showWarning, setShowWarning] = useState<boolean>(false);\n\n  useEffect(() => {\n    const consumptionCount = Object.values(formData).filter(\n      (setting) =>\n        typeof setting === 'object' &&\n        setting?.type === 'consumption' &&\n        setting?.levels &&\n        setting.levels.length > 0\n    ).length;\n    const totalCount = Object.values(formData).filter(\n      (setting) => typeof setting === 'object' && setting?.levels && setting.levels.length > 0\n    ).length;\n\n    setShowWarning(consumptionCount > 1 && consumptionCount >= totalCount - consumptionCount);\n  }, [formData]);\n\n  if (!showWarning) return null;\n\n  return (\n    <Alert severity=\"warning\">\n      <Trans i18nKey=\"consumptionWarning\" />\n    </Alert>\n  );\n}\n","import { Divider, Grid, SelectChangeEvent, Typography } from '@mui/material';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { isOnlineMode, isPublicRoom } from '@/helpers/strings';\n\nimport FinishSlider from './FinishSlider';\nimport GridItem from '@/components/GridItem';\nimport InvisibleAccordionGrid from '@/components/InvisibleAccordionGrid';\nimport SelectBoardSetting from './SelectBoardSetting';\nimport { Settings } from '@/types/Settings';\nimport SettingsSelect from '@/components/SettingsSelect';\nimport SoloSwitch from './SoloSwitch';\nimport WarningAlert from './WarningAlert';\nimport { useLocalPlayerStore } from '@/stores/localPlayerStore';\n\ninterface BoardSettingsProps {\n  formData: Settings;\n  setFormData: (data: Settings) => void;\n  actionsList: Record<string, any>;\n}\n\nexport default function BoardSettings({\n  formData,\n  setFormData,\n  actionsList,\n}: BoardSettingsProps): JSX.Element {\n  const { t } = useTranslation();\n  const { hasLocalPlayers } = useLocalPlayerStore();\n  const isLocal = !isOnlineMode(formData.gameMode);\n  const shouldShowRoleSelect = !hasLocalPlayers();\n\n  // Helper function to check if any options are selected for a given type\n  function hasSelectedOptionsForType(type: 'sex' | 'foreplay' | 'consumption' | 'solo'): boolean {\n    return Object.keys(actionsList)\n      .filter((option) => actionsList[option]?.type === type)\n      .some((option) => {\n        const selectedAction = formData.selectedActions?.[option];\n        return selectedAction?.levels && selectedAction.levels.length > 0;\n      });\n  }\n\n  function settingSelectLists(\n    type: 'sex' | 'foreplay' | 'consumption' | 'solo',\n    extraProps: Record<string, any> = {}\n  ): JSX.Element[] {\n    return Object.keys(actionsList)\n      .filter((option) => actionsList[option]?.type === type)\n      .map((option) => (\n        <GridItem key={option}>\n          <SelectBoardSetting\n            option={option}\n            settings={formData}\n            setSettings={setFormData}\n            actionsFolder={actionsList}\n            type={type}\n            {...extraProps}\n          />\n        </GridItem>\n      ));\n  }\n\n  // go through all entries in formData and update the value if the key contains the word role\n  const updateAllRoles = (value: string): Settings => {\n    const newFormData = JSON.parse(JSON.stringify(formData));\n    Object.keys(newFormData).forEach((key) => {\n      newFormData.role = value;\n      if (key.includes('role')) {\n        newFormData[key] = value;\n      }\n    });\n    return newFormData;\n  };\n\n  return (\n    <>\n      <SoloSwitch formData={formData} setFormData={setFormData} />\n\n      {isPublicRoom(formData?.room) && !isOnlineMode(formData.gameMode) && (\n        <Grid container alignContent=\"center\" justifyContent=\"space-evenly\">\n          <Grid sx={{ py: 3 }}>\n            <Typography variant=\"h5\">\n              <Trans i18nKey=\"privateRequired\" />\n            </Typography>\n          </Grid>\n        </Grid>\n      )}\n\n      {isLocal ? (\n        <>\n          <Grid container columnSpacing={2} justifyContent=\"space-evenly\">\n            {shouldShowRoleSelect && (\n              <GridItem>\n                <SettingsSelect\n                  value={formData.role}\n                  onChange={(event: SelectChangeEvent<string>) =>\n                    setFormData({\n                      ...updateAllRoles(event.target.value),\n                      boardUpdated: true,\n                    })\n                  }\n                  label=\"mainRole\"\n                  options={['dom', 'vers', 'sub']}\n                  defaultValue=\"sub\"\n                />\n              </GridItem>\n            )}\n          </Grid>\n          <InvisibleAccordionGrid\n            title={t('consumption')}\n            subtitle={t('consumptionSubtitle')}\n            hasSelectedOptions={hasSelectedOptionsForType('consumption')}\n          >\n            {settingSelectLists('consumption', { showVariation: true })}\n          </InvisibleAccordionGrid>\n          <InvisibleAccordionGrid\n            title={t('foreplay')}\n            subtitle={t('foreplaySubtitle')}\n            hasSelectedOptions={hasSelectedOptionsForType('foreplay')}\n          >\n            {settingSelectLists('foreplay', { showRole: shouldShowRoleSelect })}\n          </InvisibleAccordionGrid>\n          <InvisibleAccordionGrid\n            title={t('sex')}\n            subtitle={t('sexSubtitle')}\n            hasSelectedOptions={hasSelectedOptionsForType('sex')}\n          >\n            {settingSelectLists('sex', { showRole: shouldShowRoleSelect })}\n          </InvisibleAccordionGrid>\n        </>\n      ) : (\n        <>\n          <Grid container columnSpacing={2} justifyContent=\"space-evenly\">\n            {settingSelectLists('consumption', { showVariation: true })}\n          </Grid>\n          <Divider />\n          <Grid container columnSpacing={2} justifyContent=\"center\">\n            {settingSelectLists('solo')}\n          </Grid>\n        </>\n      )}\n\n      <FinishSlider setFormData={setFormData} formData={formData} />\n\n      <WarningAlert formData={formData} />\n    </>\n  );\n}\n","import { ChangeEvent } from 'react';\nimport { Settings } from '@/types/Settings';\nimport { TextField } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\n\ninterface RoomBackgroundInputProps {\n  formData: Settings;\n  setFormData: (data: Settings) => void;\n}\n\nexport default function RoomBackgroundInput({\n  formData,\n  setFormData,\n}: RoomBackgroundInputProps): JSX.Element {\n  const { t } = useTranslation();\n\n  const handleURLChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const roomBackgroundURL = event.target.value.trim();\n    setFormData({\n      ...formData,\n      roomBackgroundURL,\n      roomUpdated: true,\n    });\n  };\n\n  return (\n    <TextField\n      sx={{ mt: 2 }}\n      label={t('roomBackgroundURL')}\n      value={formData?.roomBackgroundURL || ''}\n      fullWidth\n      onChange={handleURLChange}\n      helperText={t('supportedSites')}\n      placeholder={t('roomBackgroundPlaceholder')}\n      type=\"url\"\n      inputMode=\"url\"\n      autoComplete=\"off\"\n      spellCheck={false}\n      autoCapitalize=\"none\"\n    />\n  );\n}\n","import {\n  Box,\n  Chip,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n  Typography,\n} from '@mui/material';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { Settings } from '@/types/Settings';\n\ninterface GameSpeedProps {\n  formData: Settings;\n  setFormData: (data: Settings) => void;\n}\n\ninterface DiceAverages {\n  [key: string]: number;\n}\n\nexport default function GameSpeed({ formData, setFormData }: GameSpeedProps): JSX.Element {\n  const { t } = useTranslation();\n  const diceRollAverage: DiceAverages = {\n    '1d4': 2.5,\n    '1d6': 3.5,\n    '2d4': 5,\n  };\n\n  const rollAverage = formData?.roomTileCount\n    ? Math.floor(formData.roomTileCount / diceRollAverage[formData.roomDice || '1d6'])\n    : 16;\n\n  const tileMenuItem = Array.from({ length: 7 }, (_, i) => (i + 2) * 10).map((tileCount) => (\n    <MenuItem key={tileCount} value={tileCount}>\n      {tileCount}\n    </MenuItem>\n  ));\n\n  return (\n    <Box>\n      <Typography variant=\"subtitle1\" sx={{ mb: 2, fontWeight: 'medium' }}>\n        <Trans i18nKey=\"gameSpeed\" />\n      </Typography>\n      <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-end', flexWrap: 'wrap' }}>\n        <FormControl sx={{ minWidth: 120, flex: 1 }}>\n          <InputLabel id=\"diceRole-label\">\n            <Trans i18nKey=\"roomDice\" />\n          </InputLabel>\n          <Select\n            labelId=\"diceRole-label\"\n            id=\"diceRole-select\"\n            value={formData?.roomDice || '1d4'}\n            label={t('roomDice')}\n            onChange={(event: SelectChangeEvent<string>) =>\n              setFormData({\n                ...formData,\n                roomDice: event.target.value,\n                roomUpdated: true,\n              })\n            }\n          >\n            <MenuItem value=\"1d4\">1d4</MenuItem>\n            <MenuItem value=\"1d6\">1d6</MenuItem>\n            <MenuItem value=\"2d4\">2d4</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl sx={{ minWidth: 120, flex: 1 }}>\n          <InputLabel id=\"tile-count-label\">\n            <Trans i18nKey=\"roomTileCount\" />\n          </InputLabel>\n          <Select\n            labelId=\"tile-count-label\"\n            id=\"tile-count-select\"\n            value={String(formData?.roomTileCount || 40)}\n            label={t('roomTileCount')}\n            onChange={(event: SelectChangeEvent) =>\n              setFormData({\n                ...formData,\n                roomTileCount: Number(event.target.value),\n                roomUpdated: true,\n              })\n            }\n          >\n            {tileMenuItem}\n          </Select>\n        </FormControl>\n        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', minWidth: 120 }}>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n            <Trans i18nKey=\"averageRolls\" />\n          </Typography>\n          <Chip\n            label={rollAverage}\n            color=\"primary\"\n            variant=\"outlined\"\n            sx={{ minWidth: 50, fontWeight: 'bold' }}\n          />\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n","import { Help } from '@mui/icons-material';\nimport { Box, FormControlLabel, Stack, Switch, Tooltip, Typography } from '@mui/material';\nimport { t } from 'i18next';\nimport { useCallback } from 'react';\nimport { Trans } from 'react-i18next';\nimport { Settings } from '@/types/Settings';\n\ninterface PlayerListOptionProps {\n  formData: Settings;\n  setFormData: (data: Settings) => void;\n}\n\nexport default function PlayerListOption({\n  formData,\n  setFormData,\n}: PlayerListOptionProps): JSX.Element {\n  const togglePlayerListOption = useCallback(() => {\n    setFormData({\n      ...formData,\n      roomRealtime: !formData.roomRealtime,\n      roomUpdated: true,\n    });\n  }, [formData, setFormData]);\n\n  return (\n    <Box>\n      <Typography variant=\"subtitle1\" sx={{ mb: 2, fontWeight: 'medium' }}>\n        <Trans i18nKey=\"playerListOptions\" />\n      </Typography>\n      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n        <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              <Trans i18nKey=\"realtime\" />\n            </Typography>\n            <Tooltip\n              title={\n                <Typography variant=\"subtitle2\">\n                  <Trans i18nKey=\"realtimeTooltip\" />\n                </Typography>\n              }\n              arrow\n            >\n              <Help sx={{ fontSize: 16, color: 'text.secondary' }} />\n            </Tooltip>\n          </Box>\n\n          <FormControlLabel\n            control={\n              <Switch\n                checked={!!formData.roomRealtime}\n                onChange={togglePlayerListOption}\n                inputProps={{ 'aria-label': t('playerList') }}\n              />\n            }\n            label=\"\"\n            sx={{ margin: 0 }}\n          />\n\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              <Trans i18nKey=\"delayed\" />\n            </Typography>\n            <Tooltip\n              title={\n                <Typography variant=\"subtitle2\">\n                  <Trans i18nKey=\"delayedTooltip\" />\n                </Typography>\n              }\n              arrow\n            >\n              <Help sx={{ fontSize: 16, color: 'text.secondary' }} />\n            </Tooltip>\n          </Box>\n        </Stack>\n      </Box>\n    </Box>\n  );\n}\n","import { Help } from '@mui/icons-material';\nimport { Stack, Switch, TextField, Tooltip, Typography } from '@mui/material';\nimport { isPublicRoom } from '@/helpers/strings';\nimport { customAlphabet } from 'nanoid';\nimport { useCallback, ChangeEvent, KeyboardEvent, FocusEvent } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { Params, useParams } from 'react-router-dom';\nimport { Settings, GameMode } from '@/types/Settings';\n\ninterface RoomSwitchProps {\n  formData: Settings;\n  setFormData: (data: Settings) => void;\n}\n\nexport default function RoomSwitch({ formData, setFormData }: RoomSwitchProps): JSX.Element {\n  const { id: room } = useParams<Params>();\n  const { t } = useTranslation();\n\n  const togglePrivateRoomField = (event: ChangeEvent<HTMLInputElement>) => {\n    let roomId: string;\n\n    if (event.target.checked && isPublicRoom(room)) {\n      roomId = customAlphabet('123456789ABCDEFGHJKLMNPQRSTUVWXYZ', 5)();\n    } else if (!!room && event.target.checked && !isPublicRoom(room)) {\n      roomId = room;\n    } else {\n      roomId = 'PUBLIC';\n    }\n\n    setFormData({\n      ...formData,\n      room: roomId.toUpperCase(),\n      gameMode: isPublicRoom(roomId) ? ('online' as GameMode) : formData.gameMode,\n    });\n  };\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => {\n      setFormData({\n        ...formData,\n        room: event.currentTarget.value,\n        boardUpdated: true,\n      });\n    },\n    [formData, setFormData]\n  );\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Enter') {\n        setFormData({\n          ...formData,\n          room: event.currentTarget.value,\n          boardUpdated: true,\n        });\n      }\n    },\n    [formData, setFormData]\n  );\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const upperCaseValue = event.target.value.toUpperCase();\n    event.target.value = upperCaseValue;\n  }, []);\n\n  const isPrivate = !isPublicRoom(formData.room);\n  return (\n    <>\n      <Stack\n        direction=\"row\"\n        spacing={1}\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        sx={{ width: '100%' }}\n      >\n        <Typography>\n          <Trans i18nKey=\"public\" />\n        </Typography>\n        <Switch\n          id=\"showPrivate\"\n          checked={isPrivate}\n          onChange={togglePrivateRoomField}\n          slotProps={{ input: { 'aria-label': t('room') } }}\n        />\n        <Typography>\n          <Trans i18nKey=\"private\" />\n        </Typography>\n        <Tooltip\n          title={\n            <Typography variant=\"subtitle2\">\n              <Trans i18nKey=\"privateOptions\" />\n            </Typography>\n          }\n          arrow\n        >\n          <Help sx={{ fontSize: 15 }} />\n        </Tooltip>\n      </Stack>\n      {isPrivate && (\n        <TextField\n          fullWidth\n          id=\"privateRoom\"\n          label={t('privateRoom')}\n          defaultValue={formData.room?.toUpperCase()}\n          margin=\"normal\"\n          onBlur={handleBlur}\n          onKeyDown={handleKeyDown}\n          onChange={handleChange}\n          inputProps={{ style: { textTransform: 'uppercase' } }}\n        />\n      )}\n    </>\n  );\n}\n","import { useState, useCallback } from 'react';\nimport { Box, Typography, Button, Alert, Chip, Switch, FormControlLabel } from '@mui/material';\nimport {\n  People as PeopleIcon,\n  Settings as SettingsIcon,\n  PlayArrow as PlayArrowIcon,\n  Edit as EditIcon,\n  Clear as ClearIcon,\n} from '@mui/icons-material';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useLocalPlayers } from '@/hooks/useLocalPlayers';\nimport LocalPlayerSetup from '@/components/LocalPlayerSetup';\nimport type { LocalPlayer, LocalSessionSettings } from '@/types';\n\ninterface LocalPlayerSettingsProps {\n  roomId?: string;\n  isPrivateRoom?: boolean;\n}\n\n/**\n * LocalPlayerSettings provides standalone local player management within the main settings interface\n * Allows users to view, edit, and manage their local player configuration\n */\nexport default function LocalPlayerSettings({\n  roomId = 'PRIVATE',\n  isPrivateRoom = true,\n}: LocalPlayerSettingsProps): JSX.Element {\n  const { t } = useTranslation();\n  const {\n    localPlayers,\n    hasLocalPlayers,\n    session,\n    sessionSettings,\n    clearLocalSession,\n    updateSettings,\n    createLocalSession,\n  } = useLocalPlayers();\n\n  const [isEditing, setIsEditing] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleStartEdit = useCallback(() => {\n    setIsEditing(true);\n    setError(null);\n  }, []);\n\n  const handleCancelEdit = useCallback(() => {\n    setIsEditing(false);\n    setError(null);\n  }, []);\n\n  const handleSetupComplete = useCallback(\n    async (players: LocalPlayer[], settings: LocalSessionSettings) => {\n      try {\n        // Create or update the local session with the new players and settings\n        await createLocalSession(roomId, players, settings);\n        setIsEditing(false);\n        setError(null);\n      } catch (error) {\n        setError(\n          error instanceof Error ? error.message : 'Failed to save local player configuration'\n        );\n      }\n    },\n    [roomId, createLocalSession]\n  );\n\n  const handleClearSession = useCallback(async () => {\n    try {\n      await clearLocalSession();\n      setError(null);\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Failed to clear local session');\n    }\n  }, [clearLocalSession]);\n\n  const handleSettingChange = useCallback(\n    async (settingKey: keyof LocalSessionSettings, value: boolean) => {\n      if (!sessionSettings) return;\n\n      try {\n        const updatedSettings = {\n          ...sessionSettings,\n          [settingKey]: value,\n        };\n        await updateSettings(updatedSettings);\n        setError(null);\n      } catch (error) {\n        setError(error instanceof Error ? error.message : 'Failed to update settings');\n      }\n    },\n    [sessionSettings, updateSettings]\n  );\n\n  // Show setup component when editing\n  if (isEditing) {\n    return (\n      <Box>\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        <LocalPlayerSetup\n          roomId={roomId}\n          isPrivateRoom={isPrivateRoom}\n          onComplete={handleSetupComplete}\n          onCancel={handleCancelEdit}\n          initialPlayers={localPlayers}\n          initialSettings={sessionSettings}\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n      )}\n\n      {!hasLocalPlayers ? (\n        /* No Local Players State */\n        <Box sx={{ textAlign: 'center', py: 2 }}>\n          <PeopleIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\n          <Typography variant=\"body1\" color=\"text.secondary\" paragraph>\n            <Trans i18nKey=\"localPlayerSettings.noPlayers.description\" />\n          </Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<PlayArrowIcon />}\n            onClick={handleStartEdit}\n            size=\"large\"\n          >\n            <Trans i18nKey=\"localPlayerSettings.noPlayers.setupButton\" />\n          </Button>\n        </Box>\n      ) : (\n        /* Active Local Players State */\n        <Box>\n          {/* Session Overview */}\n          <Box sx={{ mb: 3 }}>\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1, mb: 2 }}>\n              {localPlayers.map((player) => (\n                <Box\n                  key={player.id}\n                  sx={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'space-between',\n                    p: 1,\n                    borderRadius: 1,\n                    bgcolor: player.isActive ? 'primary.50' : 'background.default',\n                    border: player.isActive ? '1px solid' : '1px solid transparent',\n                    borderColor: player.isActive ? 'primary.main' : 'transparent',\n                  }}\n                >\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      #{player.order + 1}\n                    </Typography>\n                    <Typography variant=\"body1\" fontWeight={player.isActive ? 'bold' : 'normal'}>\n                      {player.name}\n                    </Typography>\n                    <Chip label={t(`roles.${player.role}`)} size=\"small\" variant=\"outlined\" />\n                  </Box>\n                  {player.isActive && (\n                    <Chip\n                      label={t('localPlayerSettings.players.currentTurn')}\n                      color=\"primary\"\n                      size=\"small\"\n                    />\n                  )}\n                </Box>\n              ))}\n            </Box>\n\n            <Box sx={{ display: 'flex', gap: 1 }}>\n              <Button\n                variant=\"outlined\"\n                startIcon={<EditIcon />}\n                onClick={handleStartEdit}\n                size=\"small\"\n              >\n                <Trans i18nKey=\"localPlayerSettings.session.editButton\" />\n              </Button>\n              <Button\n                variant=\"outlined\"\n                color=\"error\"\n                startIcon={<ClearIcon />}\n                onClick={handleClearSession}\n                size=\"small\"\n              >\n                <Trans i18nKey=\"localPlayerSettings.session.clearButton\" />\n              </Button>\n            </Box>\n          </Box>\n\n          {/* Session Settings */}\n          {session?.settings && (\n            <Box sx={{ mt: 3, p: 2, borderRadius: 1, bgcolor: 'action.hover' }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>\n                <SettingsIcon sx={{ color: 'text.secondary' }} />\n                <Typography variant=\"subtitle1\" component=\"h4\">\n                  <Trans i18nKey=\"localPlayerSettings.settings.title\" />\n                </Typography>\n              </Box>\n\n              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={session.settings.showTurnTransitions}\n                      onChange={(e) => handleSettingChange('showTurnTransitions', e.target.checked)}\n                    />\n                  }\n                  label={t('localPlayerSettings.settings.showTurnTransitions')}\n                />\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={session.settings.enableTurnSounds}\n                      onChange={(e) => handleSettingChange('enableTurnSounds', e.target.checked)}\n                    />\n                  }\n                  label={t('localPlayerSettings.settings.playTurnSounds')}\n                />\n              </Box>\n            </Box>\n          )}\n        </Box>\n      )}\n    </Box>\n  );\n}\n","import { Box, Card, CardContent, Typography } from '@mui/material';\nimport {\n  MeetingRoom as MeetingRoomIcon,\n  People as PeopleIcon,\n  Tune as TuneIcon,\n  Wallpaper as WallpaperIcon,\n} from '@mui/icons-material';\nimport RoomBackgroundInput from '@/components/RoomBackgroundInput';\nimport { useTranslation } from 'react-i18next';\nimport GameSpeed from './GameSpeed';\nimport PlayerListOption from './PlayerListOption';\nimport RoomSwitch from '@/components/GameForm/RoomSwitch';\nimport LocalPlayerSettings from '../LocalPlayerSettings';\nimport { isPublicRoom } from '@/helpers/strings';\nimport { Settings } from '@/types/Settings';\nimport { JSX } from 'react';\n\ninterface RoomSettingsProps {\n  formData: Settings;\n  setFormData: (data: Settings) => void;\n}\n\nexport default function RoomSettings({ formData, setFormData }: RoomSettingsProps): JSX.Element {\n  const { t } = useTranslation();\n\n  return (\n    <Box sx={{ p: 2 }}>\n      {/* Room Type Section */}\n      <Card variant=\"outlined\" sx={{ mb: 3 }}>\n        <CardContent>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>\n            <MeetingRoomIcon sx={{ color: 'primary.main' }} />\n            <Typography variant=\"h6\" component=\"h3\">\n              {t('roomType')}\n            </Typography>\n          </Box>\n          <RoomSwitch formData={formData} setFormData={setFormData} />\n        </CardContent>\n      </Card>\n\n      {!isPublicRoom(formData.room) && (\n        <>\n          {/* Local Players Section */}\n          <Card variant=\"outlined\" sx={{ mb: 3 }}>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>\n                <PeopleIcon sx={{ color: 'primary.main' }} />\n                <Typography variant=\"h6\" component=\"h3\">\n                  {t('localPlayerSettings.title')}\n                </Typography>\n              </Box>\n              <LocalPlayerSettings\n                roomId={formData.room}\n                isPrivateRoom={!isPublicRoom(formData.room)}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Game Configuration Section */}\n          <Card variant=\"outlined\" sx={{ mb: 3 }}>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>\n                <TuneIcon sx={{ color: 'primary.main' }} />\n                <Typography variant=\"h6\" component=\"h3\">\n                  {t('gameConfiguration')}\n                </Typography>\n              </Box>\n\n              {/* Game Speed Subsection */}\n              <Box sx={{ mb: 3 }}>\n                <GameSpeed formData={formData} setFormData={setFormData} />\n              </Box>\n\n              {/* Player List Options Subsection */}\n              <Box sx={{ p: 2, borderRadius: 1, bgcolor: 'action.hover' }}>\n                <PlayerListOption formData={formData} setFormData={setFormData} />\n              </Box>\n            </CardContent>\n          </Card>\n\n          {/* Visual Settings Section */}\n          <Card variant=\"outlined\" sx={{ mb: 3 }}>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>\n                <WallpaperIcon sx={{ color: 'primary.main' }} />\n                <Typography variant=\"h6\" component=\"h3\">\n                  {t('visualSettings')}\n                </Typography>\n              </Box>\n              <RoomBackgroundInput formData={formData} setFormData={setFormData} />\n            </CardContent>\n          </Card>\n        </>\n      )}\n    </Box>\n  );\n}\n","import { Box, SxProps, Theme } from '@mui/material';\nimport { ReactNode } from 'react';\n\ninterface TabPanelProps {\n  children: ReactNode;\n  value: number;\n  index: number;\n  style?: SxProps<Theme>;\n  [key: string]: any;\n}\n\nexport default function TabPanel({\n  children,\n  value,\n  index,\n  style,\n  ...other\n}: TabPanelProps): JSX.Element {\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3, ...style }}>{children}</Box>}\n    </div>\n  );\n}\n","import { isOnlineMode, isPublicRoom } from '@/helpers/strings';\nimport { Settings } from '@/types/Settings';\n\ninterface ActionOption {\n  levels?: number[];\n  variation?: string;\n  type?: string;\n}\n\ninterface ActionOptions {\n  [key: string]: ActionOption;\n}\n\ninterface SeparatedOptions {\n  withAppend: ActionOptions;\n  withoutAppend: ActionOptions;\n}\n\nconst hasValidLevels = ({ levels }: ActionOption): boolean =>\n  !!levels?.length && levels.some((level) => level > 0);\n\nfunction hasSomethingPicked(object: ActionOptions): boolean {\n  return Object.values(object).some(hasValidLevels);\n}\n\nfunction separateConsumableFromValidRest(\n  gameOptions: Settings,\n  actionsList: Record<string, any>\n): SeparatedOptions {\n  const selectedActions = gameOptions.selectedActions || {};\n\n  return Object.entries(selectedActions).reduce(\n    (acc: SeparatedOptions, [key, value]: [string, any]) => {\n      if (key in actionsList) {\n        const target = value?.variation?.startsWith('append') ? 'withAppend' : 'withoutAppend';\n        acc[target][key] = value;\n      }\n      return acc;\n    },\n    { withAppend: {}, withoutAppend: {} }\n  );\n}\n\nfunction isTryingToAppend(withAppend: ActionOptions): boolean {\n  return Object.keys(withAppend).length > 0 && Object.values(withAppend).some(hasValidLevels);\n}\n\n// returns a translation key for an alert if fails.\nexport default function validateFormData(\n  gameOptions: Settings,\n  actionsList: Record<string, any>\n): string | null {\n  const { withAppend, withoutAppend } = separateConsumableFromValidRest(gameOptions, actionsList);\n\n  if (!hasSomethingPicked(withoutAppend)) {\n    return isTryingToAppend(withAppend) ? 'appendWithAction' : 'pickSomething';\n  }\n\n  if (isPublicRoom(gameOptions.room) && !isOnlineMode(gameOptions.gameMode)) {\n    return 'privateRequired';\n  }\n\n  return null;\n}\n","import './styles.css';\n\nimport { Box, Button, Tab, Tabs, TextField, Typography } from '@mui/material';\nimport { FocusEvent, FormEvent, JSX, KeyboardEvent, ReactNode, useCallback, useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport AppSettings from './AppSettings';\nimport BoardSettings from './BoardSettings';\nimport CustomTileDialog from '@/views/CustomTileDialog';\nimport RoomSettings from './RoomSettings';\nimport TabPanel from '@/components/TabPanel';\nimport ToastAlert from '@/components/ToastAlert';\nimport { a11yProps } from '@/helpers/strings';\nimport useAuth from '@/context/hooks/useAuth';\nimport { useSettings } from '@/stores/settingsStore';\nimport useSettingsToFormData from '@/hooks/useSettingsToFormData';\nimport useSubmitGameSettings from '@/hooks/useSubmitGameSettings';\nimport useUnifiedActionList from '@/hooks/useUnifiedActionList';\nimport validateFormData from './validateForm';\n\ninterface GameSettingsProps {\n  closeDialog?: () => void;\n  initialTab?: number;\n  onOpenSetupWizard?: () => void;\n}\n\nexport default function GameSettings({\n  closeDialog,\n  initialTab = 0,\n  onOpenSetupWizard,\n}: GameSettingsProps): JSX.Element {\n  const { user } = useAuth();\n  const { t } = useTranslation();\n\n  const [settings, updateSettings] = useSettings();\n  const [value, setValue] = useState<number>(initialTab);\n  const [alert, setAlert] = useState<string | null>(null);\n  const [openCustomTile, setOpenCustomTile] = useState<boolean>(false);\n  const [formData, setFormData] = useSettingsToFormData();\n\n  const submitSettings = useSubmitGameSettings();\n  const { isLoading, actionsList } = useUnifiedActionList(formData?.gameMode);\n\n  const handleTabChange = (_: React.SyntheticEvent, newValue: number): void => {\n    setValue(newValue);\n  };\n\n  const boardUpdated = (): void => updateSettings({ ...settings, boardUpdated: true });\n\n  const handleSubmit = useCallback(\n    async (event: FormEvent<HTMLFormElement>): Promise<null> => {\n      event.preventDefault();\n      const { displayName, ...gameOptions } = formData; // we don't want to validate the displayName\n      void displayName; // Intentionally excluded from validation\n\n      const validationMessage = validateFormData(gameOptions, actionsList);\n      if (validationMessage) {\n        setAlert(t(validationMessage));\n        return null;\n      }\n\n      await submitSettings(formData, actionsList);\n\n      if (typeof closeDialog === 'function') {\n        closeDialog();\n      }\n\n      return null;\n    },\n    [formData, actionsList, t, setAlert, submitSettings, closeDialog]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n      setFormData((prevFormData) => ({\n        ...prevFormData,\n        displayName: event.target.value,\n      }));\n    },\n    [setFormData]\n  );\n\n  const onEnterKey = useCallback(\n    (event: KeyboardEvent<HTMLInputElement>): void => {\n      if (event.key === 'Enter') {\n        setFormData((prevFormData) => ({\n          ...prevFormData,\n          displayName: (event.target as HTMLInputElement).value,\n        }));\n        handleSubmit(event as unknown as FormEvent<HTMLFormElement>);\n      }\n    },\n    [handleSubmit, setFormData]\n  );\n\n  if (!formData.room || isLoading) {\n    return (\n      <Box>\n        <Typography variant=\"h2\">\n          <Trans i18nKey=\"loading\" />\n          ...\n        </Typography>\n        <Typography variant=\"body1\">\n          <Trans i18nKey=\"clearStorage\" />\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box component=\"form\" method=\"post\" onSubmit={handleSubmit} className=\"settings-box\">\n      <TextField\n        fullWidth\n        id=\"displayName\"\n        label={t('displayName')}\n        defaultValue={user?.displayName || formData.displayName || ''}\n        required\n        autoFocus\n        onBlur={handleBlur}\n        onKeyDown={onEnterKey}\n        margin=\"normal\"\n      />\n\n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Tabs value={value} onChange={handleTabChange} aria-label={t('gameSettings')} centered>\n          <Tab label={t('gameboard')} {...a11yProps(0)} />\n          <Tab label={t('room')} {...a11yProps(1)} />\n          <Tab label={t('application')} {...a11yProps(2)} />\n        </Tabs>\n      </Box>\n\n      <TabPanel value={value} index={0} style={{ p: 0 }}>\n        <BoardSettings formData={formData} setFormData={setFormData} actionsList={actionsList} />\n      </TabPanel>\n\n      <TabPanel value={value} index={1} style={{ p: 0, pt: 1 }}>\n        <RoomSettings formData={formData} setFormData={setFormData} />\n      </TabPanel>\n\n      <TabPanel value={value} index={2} style={{ p: 0, pt: 1 }}>\n        <AppSettings formData={formData} setFormData={setFormData} boardUpdated={boardUpdated} />\n      </TabPanel>\n\n      <div className=\"flex-buttons\">\n        <div className=\"left-buttons\">\n          {onOpenSetupWizard && (\n            <Button variant=\"outlined\" type=\"button\" onClick={onOpenSetupWizard}>\n              <Trans i18nKey=\"setupWizard\" />\n            </Button>\n          )}\n          {value === 0 && (\n            <Button variant=\"outlined\" type=\"button\" onClick={() => setOpenCustomTile(true)}>\n              <Trans i18nKey=\"customTilesLabel\">Game Tiles</Trans>\n            </Button>\n          )}\n        </div>\n        <Button variant=\"contained\" type=\"submit\">\n          <Trans i18nKey=\"update\" />\n        </Button>\n      </div>\n      {openCustomTile && (\n        <CustomTileDialog\n          open={openCustomTile}\n          setOpen={setOpenCustomTile}\n          boardUpdated={boardUpdated}\n          actionsList={actionsList}\n        />\n      )}\n      <ToastAlert open={!!alert} close={() => setAlert(null)}>\n        {alert as ReactNode}\n      </ToastAlert>\n    </Box>\n  );\n}\n"],"names":["CLASSIC_ALERTS","MUSICAL_NOTES","NOTIFICATION_ALERTS","GAME_SOUNDS","SOUND_CATEGORIES","AVAILABLE_SOUNDS","playSound","sound","AudioContextClass","audioContext","playMelody","oscillator","gainNode","error","frequencies","noteDuration","masterGain","frequency","index","noteGain","startTime","endTime","getRandomSound","getSoundById","id","CardContentPadding","styled","CardContent","PlayerCard","player","isActive","canEdit","canDelete","onEdit","onDelete","onRoleChange","t","useTranslation","menuAnchor","setMenuAnchor","useState","roleMenuAnchor","setRoleMenuAnchor","handleMenuOpen","event","handleMenuClose","handleRoleMenuOpen","handleRoleMenuClose","handleEdit","handleDelete","handleRoleChange","newRole","getPlayerInitials","name","word","getRoleColor","role","jsxs","Card","jsx","Box","Avatar","Typography","Chip","PersonIcon","IconButton","MoreVertIcon","Menu","MenuItem","ListItemIcon","EditIcon","ListItemText","DeleteIcon","SoundSelector","selectedSoundId","onSoundChange","label","handlePlaySample","handleSelectChange","FormControl","InputLabel","Select","VolumeOff","category","ListSubheader","Tooltip","PlayArrow","PlayerForm","open","existingPlayers","onSubmit","onCancel","formData","setFormData","errors","setErrors","isSubmitting","setIsSubmitting","useEffect","validateForm","useCallback","newErrors","trimmedName","p","handleNameChange","value","prev","handleSoundChange","soundId","handleSubmit","playerData","handleCancel","isEditMode","Dialog","DialogTitle","DialogContent","TextField","Alert","DialogActions","Button","LocalPlayerSetup","roomId","isPrivateRoom","onComplete","initialPlayers","initialSettings","players","setPlayers","isValid","setIsValid","setError","isLoading","setIsLoading","isPlayerFormOpen","setIsPlayerFormOpen","editingPlayer","setEditingPlayer","sessionSettings","validateSetup","isValidPlayerCount","hasAllNames","hasUniqueNames","valid","generatePlayerId","generateDefaultName","addPlayer","removePlayer","playerId","updatePlayer","updates","handlePlayerRoleChange","handlePlayerEdit","handlePlayerFormSubmit","newPlayer","handlePlayerFormCancel","handleComplete","err","CardHeader","Trans","AddIcon","Fragment","Fab","MultiSelectIntensity","actionName","actionLabel","selectedLevels","availableLevels","intensityNames","onChange","disabled","showValueGlow","theme","useTheme","labelId","shouldShowGlow","glowSx","labelSx","handleChange","levels","n","a","b","handleClear","renderValue","selected","level","Clear","Checkbox","YesNoSwitch","trueCondition","yesLabel","noLabel","sx","actuallyNoLabel","FormControlLabel","Switch","filterBackgroundOptions","backgrounds","isRoom","filtered","getBackgroundKey","getBackgroundURLKey","BackgroundSelect","backgroundKey","backgroundURLKey","filteredBackgrounds","useMemo","currentBackground","background","setBackground","options","file","backgroundSelection","data","updatedData","validBackground","handleURLChange","TTSService","__publicField","resolve","voices","handleVoicesChanged","voice","text","voiceName","pitch","reject","utterance","v","_a","tts","useTTS","isPlaying","setIsPlaying","stop","speak","errorMessage","VoiceSelect","onVoiceChange","setVoices","selectedVoice","handleVoiceChange","updatedFormData","mounted","availableVoices","googleVoices","preferredVoice","voiceToPlay","sampleText","getVoiceLabel","LanguageSelect","boardUpdated","i18n","language","setLanguage","loading","setLoading","changeLanguage","menuItems","languages","key","obj","Language","CircularProgress","AppBoolSwitch","field","handleSwitch","AppSettings","settings","updateSettings","useSettings","isPublicRoom","Divider","FinishSlider","_","newValue","finishRange","Slider","GridItem","children","Grid","InvisibleAccordionGrid","title","subtitle","defaultExpanded","hasSelectedOptions","rest","Accordion","AccordionSummary","ExpandMore","AccordionDetails","SettingsSelect","forwardRef","defaultValue","helpIcon","fullWidth","ref","items","option","Help","SelectBoardSetting","setSettings","actionsFolder","type","showVariation","showRole","_b","_c","_d","_e","_f","nestedKey","existingAction","handleLevelsChange","gridSize","roleOptions","renderMultiSelectIntensity","actionData","currentLevels","SoloSwitch","Stack","isOnlineMode","ConsumptionWarning","showWarning","setShowWarning","consumptionCount","setting","totalCount","BoardSettings","actionsList","hasLocalPlayers","useLocalPlayerStore","isLocal","shouldShowRoleSelect","hasSelectedOptionsForType","selectedAction","settingSelectLists","extraProps","updateAllRoles","newFormData","WarningAlert","RoomBackgroundInput","roomBackgroundURL","GameSpeed","diceRollAverage","rollAverage","tileMenuItem","i","tileCount","PlayerListOption","togglePlayerListOption","RoomSwitch","room","useParams","togglePrivateRoomField","customAlphabet","handleBlur","handleKeyDown","upperCaseValue","isPrivate","LocalPlayerSettings","localPlayers","session","clearLocalSession","createLocalSession","useLocalPlayers","isEditing","setIsEditing","handleStartEdit","handleCancelEdit","handleSetupComplete","handleClearSession","handleSettingChange","settingKey","updatedSettings","ClearIcon","SettingsIcon","e","PeopleIcon","PlayArrowIcon","RoomSettings","MeetingRoomIcon","TuneIcon","WallpaperIcon","TabPanel","style","other","hasValidLevels","hasSomethingPicked","object","separateConsumableFromValidRest","gameOptions","selectedActions","acc","target","isTryingToAppend","withAppend","validateFormData","withoutAppend","GameSettings","closeDialog","initialTab","onOpenSetupWizard","user","useAuth","setValue","alert","setAlert","openCustomTile","setOpenCustomTile","useSettingsToFormData","submitSettings","useSubmitGameSettings","useUnifiedActionList","handleTabChange","displayName","validationMessage","prevFormData","onEnterKey","Tabs","Tab","a11yProps","CustomTileDialog","ToastAlert"],"mappings":"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"}