import{s as y,a as _,b as g,d as f,u as T,e as m,i as b,j as p,k as C,l as F,m as R,n as x}from"../assets/index-D4zS-5ar.js";import{V as v,g as w,W as S,u as D}from"./chunk-DxYmf4F-.js";import{a as M,n as I,o as A}from"./chunk-BF1niHhA.js";import"./chunk-CntiUmjA.js";import"./chunk-CX3Ybjr4.js";import"./chunk-CoQSND4G.js";(function(){try{var o=typeof window!="undefined"?window:typeof global!="undefined"?global:typeof globalThis!="undefined"?globalThis:typeof self!="undefined"?self:{};o.SENTRY_RELEASE={id:"3d83ab8ea805c6289c638376339cdb4efdc6d374"}}catch(t){}})();try{(function(){var o=typeof window!="undefined"?window:typeof global!="undefined"?global:typeof globalThis!="undefined"?globalThis:typeof self!="undefined"?self:{},t=new o.Error().stack;t&&(o._sentryDebugIds=o._sentryDebugIds||{},o._sentryDebugIds[t]="a93de037-ae44-4f1f-bd8d-dcb55c0270b9",o._sentryDebugIdIdentifier="sentry-dbid-a93de037-ae44-4f1f-bd8d-dcb55c0270b9")})()}catch(o){}const $=50;class l{static getAuthenticatedUser(){const e=M().currentUser;if(!e)throw new Error("No user logged in");return e}static async getUserDocument(t){const e=I(v,"user-data",t);return await A(e)}static async addSyncDelay(){await new Promise(t=>setTimeout(t,$))}static removeId(t){const{id:e,...s}=t;return s}static handleSyncError(t,e){return console.error(`Error in ${t}:`,e),{success:!1,errors:[e instanceof Error?e.message:String(e)]}}static createSuccessResult(t=0){return{success:!0,itemsProcessed:t}}}class G extends l{static async syncFromFirebase(t,e){try{const s=await w({isDefault:!1});return t.length===0&&s.length>0&&!e.forceSync?(await y(),this.createSuccessResult(s.length)):t.length>0&&s.length>0&&!e.forceSync?await this.mergeConflicts(t,s):t.length>0&&(s.length===0||e.forceSync)?await this.replaceLocal(t):this.createSuccessResult(0)}catch(s){return this.handleSyncError("custom groups sync",s)}}static async mergeConflicts(t,e){let s=0;for(const r of t)try{if((await w({locale:r.locale,gameMode:r.gameMode,name:r.name})).length===0){const n=this.removeId(r);await S([n]),s++}}catch(i){console.error("Error merging custom group:",r,i)}return await y(),this.createSuccessResult(s+e.length)}static async replaceLocal(t){await _(),await this.addSyncDelay();try{const e=t.map(s=>this.removeId(s));return await S(e),this.createSuccessResult(t.length)}catch(e){return console.error("Error importing custom groups:",e),this.handleSyncError("groups import",e)}}}class E{static createKey(t){if(!t.group_id)throw new Error(`Tile missing group_id for matching: ${JSON.stringify({id:t.id,group_id:t.group_id,action:t.action})}`);return`${t.group_id}|${t.intensity}|${t.action}`}static async findExistingTile(t){if(!t.group_id)throw new Error(`Cannot match tile without group_id: ${JSON.stringify({group_id:t.group_id,action:t.action})}`);try{const e=await g({group_id:t.group_id,intensity:t.intensity,action:t.action});return e.length>0?{existingTile:e[0],isExactMatch:!0,matchKey:this.createKey(t)}:{existingTile:null,isExactMatch:!1,matchKey:this.createKey(t)}}catch(e){throw console.error("Error finding existing tile:",e),e}}static async batchFindExistingTiles(t){const e=new Map,s=new Map;for(const r of t){if(!r.group_id)throw new Error(`Tile missing group_id: ${JSON.stringify({group_id:r.group_id,action:r.action})}`);const i=s.get(r.group_id)||[];i.push(r),s.set(r.group_id,i)}for(const[r,i]of s)try{const n=await g({group_id:r}),c=new Map;for(const a of n){const u=this.createKey(a);c.set(u,a)}for(const a of i){const u=this.createKey(a),d=c.get(u)||null;e.set(u,{existingTile:d,isExactMatch:d!==null,matchKey:u})}}catch(n){console.error(`Error batch matching tiles for group ${r}:`,n);for(const c of i)try{const a=await this.findExistingTile(c);e.set(this.createKey(c),a)}catch(a){console.error("Error matching individual tile:",a)}}return e}static validateTileForMatching(t){const e=[];return(!t.group_id||!t.group_id.trim())&&e.push("Missing group_id"),(t.intensity===void 0||t.intensity===null)&&e.push("Missing intensity"),(!t.action||!t.action.trim())&&e.push("Missing action"),{valid:e.length===0,errors:e}}static tilesEqual(t,e){if(!t.group_id||!e.group_id)throw new Error("Cannot compare tiles without group_id");return t.group_id===e.group_id&&t.intensity===e.intensity&&t.action===e.action}static async generateMatchingStats(t){const e={totalTiles:t.length,tilesWithGroupId:0,tilesMissingGroupId:0,duplicateKeys:[],matchingErrors:[]},s=new Map;for(const r of t){r.group_id&&r.group_id.trim()?e.tilesWithGroupId++:e.tilesMissingGroupId++;const i=this.validateTileForMatching(r);if(!i.valid){e.matchingErrors.push({tile:r,error:i.errors.join(", ")});continue}try{const n=this.createKey(r),c=s.get(n)||0;s.set(n,c+1),c>0&&e.duplicateKeys.push(n)}catch(n){e.matchingErrors.push({tile:r,error:n instanceof Error?n.message:String(n)})}}return e}}class K extends l{static async syncFromFirebase(t,e){try{const s=await g({isCustom:1});return t.length===0&&s.length>0&&!e.forceSync?(await f(),this.createSuccessResult(s.length)):t.length>0&&s.length>0&&!e.forceSync?await this.mergeConflicts(t,s):t.length>0&&(s.length===0||e.forceSync)?await this.replaceLocal(t):this.createSuccessResult(0)}catch(s){return this.handleSyncError("custom tiles sync",s)}}static async mergeConflicts(t,e){let s=0,r=0;for(const i of t)try{if(i.isCustom!==1){console.warn(`Skipping non-custom tile in custom tiles sync: ${i.action}`);continue}if(!i.group_id||!i.group_id.trim())throw console.error(`Tile missing group_id during sync: ${i.action} (group_id: ${i.group_id})`),new Error(`All tiles must have group_id for sync. Tile: ${i.action}`);const n=await E.findExistingTile(i);if(n.existingTile)n.existingTile.isEnabled!==i.isEnabled&&(await T(n.existingTile.id,{isEnabled:i.isEnabled}),r++);else{const c=this.removeId(i);await m(c),s++}}catch(n){console.error("Error merging custom tile:",i,n)}return await f(),this.createSuccessResult(s+r+e.length)}static async replaceLocal(t){await b(),await this.addSyncDelay();let e=0;for(const s of t)try{if(s.isCustom!==1){console.warn(`Skipping non-custom tile in custom tiles sync: ${s.action}`);continue}if(!s.group_id||!s.group_id.trim())throw console.error(`Tile missing group_id during import: ${s.action} (group_id: ${s.group_id})`),new Error(`All tiles must have group_id for sync. Tile: ${s.action}`);if(!(await E.findExistingTile(s)).existingTile){const i=this.removeId(s);await m(i),e++}}catch(r){console.error("Error importing custom tile:",s,r)}return this.createSuccessResult(e)}}class L extends l{static async syncFromFirebase(t){try{return!t||t.length===0?(await p(),this.createSuccessResult(0)):t.length>100?(console.warn(`⚠️ Firebase contains ${t.length} disabled defaults, which seems excessive.`),console.warn("Skipping disabled defaults sync to prevent data corruption."),this.createSuccessResult(0)):(await p(),await this.addSyncDelay(),await C(t),this.createSuccessResult(t.length))}catch(e){return this.handleSyncError("disabled defaults sync",e)}}}class O extends l{static async syncFromFirebase(t){if(!t||t.length===0)return this.createSuccessResult(0);try{let e=0;for(const s of t)try{await F({title:s.title,tiles:s.tiles||[],tags:s.tags||[],gameMode:s.gameMode||"online",isActive:s.isActive||0}),e++}catch(r){console.error("Error importing game board:",s,r)}return this.createSuccessResult(e)}catch(e){return this.handleSyncError("game boards sync",e)}}}class k extends l{static async syncFromFirebase(t){if(!t||Object.keys(t).length===0)return this.createSuccessResult(0);try{const{updateSettings:e}=D.getState(),s=Object.fromEntries(Object.entries(t).filter(([r,i])=>i!==void 0&&r!=="localPlayers"));return Object.keys(s).length>0?(e(s),this.createSuccessResult(Object.keys(s).length)):this.createSuccessResult(0)}catch(e){return this.handleSyncError("settings sync",e)}}}class P extends l{static async syncFromFirebase(t={}){try{const e=this.getAuthenticatedUser(),s=await this.getUserDocument(e.uid);if(!s.exists())return await R();const r=s.data();await x();const i=[this.syncCustomTiles(r,t),this.syncCustomGroups(r,t),this.syncDisabledDefaults(r),this.syncGameBoards(r),this.syncSettings(r)],n=await Promise.allSettled(i);let c=!0;return n.forEach((a,u)=>{const d=["Custom Tiles","Custom Groups","Disabled Defaults","Game Boards","Settings"];if(a.status==="fulfilled"){const h=a.value;h.success||(c=!1,console.error(`❌ ${d[u]} sync failed:`,h.errors))}else c=!1,console.error(`❌ ${d[u]} sync rejected:`,a.reason)}),c}catch(e){return console.error("Error in sync orchestrator:",e),!1}}static async syncCustomTiles(t,e){if(t.customTiles!==void 0){const s=t.customTiles||[],r=s.filter(i=>i.isCustom===0);return r.length>0&&console.warn(`⚠️ Found ${r.length} default tiles in customTiles field - data corruption detected`),await K.syncFromFirebase(s,e)}return this.createSuccessResult(0)}static async syncCustomGroups(t,e){return t.customGroups!==void 0?await G.syncFromFirebase(t.customGroups||[],e):this.createSuccessResult(0)}static async syncDisabledDefaults(t){return t.disabledDefaults!==void 0?await L.syncFromFirebase(t.disabledDefaults||[]):this.createSuccessResult(0)}static async syncGameBoards(t){return t.gameBoards!==void 0?await O.syncFromFirebase(t.gameBoards):this.createSuccessResult(0)}static async syncSettings(t){return t.settings!==void 0?await k.syncFromFirebase(t.settings||{}):this.createSuccessResult(0)}}export{P as SyncOrchestrator};
//# sourceMappingURL=syncOrchestrator.ts-cttnPnA7.js.map
