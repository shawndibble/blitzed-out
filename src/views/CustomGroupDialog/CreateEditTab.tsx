import { Box, Typography, TextField, Button, IconButton, Alert, MenuItem } from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import DeleteIcon from '@mui/icons-material/Delete';
import { useTranslation } from 'react-i18next';
import { DEFAULT_INTENSITY_TEMPLATES } from '@/types/customGroups';
import {
  validateGroupLabel,
  MAX_GROUP_LABEL_LENGTH,
  MAX_INTENSITY_LABEL_LENGTH,
  MIN_INTENSITIES_COUNT,
  MAX_INTENSITIES_COUNT,
} from '@/services/validationService';
import { CreateEditTabProps } from './types';

export default function CreateEditTab({
  formState,
  validation,
  currentEditingGroup,
  locale,
  onFormStateChange,
  generateGroupName,
  updateIntensityLabel,
  addIntensity,
  removeIntensity,
  handleTemplateChange,
}: CreateEditTabProps) {
  const { t } = useTranslation();

  const { label, type, localGameMode, selectedTemplateIndex, intensityLabels } = formState;

  const handleLabelChange = (value: string) => {
    onFormStateChange({ label: value });
  };

  const handleTypeChange = (value: string) => {
    onFormStateChange({ type: value });
  };

  const handleGameModeChange = (value: string) => {
    onFormStateChange({ localGameMode: value });
  };

  const handleTemplateChangeLocal = (templateIndex: number) => {
    onFormStateChange({ selectedTemplateIndex: templateIndex });
    handleTemplateChange(templateIndex);
  };

  return (
    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
      {/* Validation Errors */}
      {!validation.isValid && (
        <Alert severity="error">
          {validation.errors.map((error, index) => (
            <div key={index}>{error}</div>
          ))}
        </Alert>
      )}

      {/* Group Information Header */}
      <Box
        sx={{
          p: 2,
          bgcolor: 'background.paper',
          borderRadius: 1,
          border: '1px solid',
          borderColor: 'divider',
        }}
      >
        <Typography variant="h6" sx={{ mb: 2 }}>
          {t('customGroups.groupInformation')}
        </Typography>

        {/* Game Mode Dropdown */}
        <TextField
          select
          label={t('customGroups.gameMode')}
          value={localGameMode}
          onChange={(e) => handleGameModeChange(e.target.value)}
          helperText={t('customGroups.gameModeHelp')}
          fullWidth
          sx={{ mb: 2 }}
        >
          <MenuItem value="online">{t('gameMode.online')}</MenuItem>
          <MenuItem value="local">{t('gameMode.local')}</MenuItem>
        </TextField>

        {/* Group Type Dropdown */}
        <TextField
          select
          label={t('customGroups.groupType')}
          value={type}
          onChange={(e) => handleTypeChange(e.target.value)}
          helperText={t('customGroups.groupTypeHelp')}
          fullWidth
          required
          error={label.trim().length > 0 && !type}
          sx={{ mb: 2 }}
        >
          <MenuItem value="">
            <em>{t('groupTypes.selectType')}</em>
          </MenuItem>
          <MenuItem value="solo">{t('groupTypes.solo')}</MenuItem>
          {localGameMode === 'local' && [
            <MenuItem key="foreplay" value="foreplay">
              {t('groupTypes.foreplay')}
            </MenuItem>,
            <MenuItem key="sex" value="sex">
              {t('groupTypes.sex')}
            </MenuItem>,
          ]}
          <MenuItem value="consumption">{t('groupTypes.consumption')}</MenuItem>
        </TextField>

        {/* Group Label Field */}
        <TextField
          label={t('customGroups.groupLabel')}
          value={label}
          onChange={(e) => handleLabelChange(e.target.value)}
          placeholder="e.g., My Custom Group"
          helperText={t('customGroups.groupLabelHelp', {
            maxLength: MAX_GROUP_LABEL_LENGTH,
          })}
          fullWidth
          required
          error={label.trim().length > 0 && !validateGroupLabel(label).isValid}
          sx={{ mb: 2 }}
        />

        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>
          <Typography variant="body2" color="text.secondary">
            <strong>{t('customGroups.locale')}</strong> {locale}
          </Typography>
          {currentEditingGroup ? (
            <Typography variant="body2" color="text.secondary">
              <strong>{t('customGroups.internalId')}</strong> {currentEditingGroup.name} (locked)
            </Typography>
          ) : (
            <Typography variant="body2" color="text.secondary">
              <strong>{t('customGroups.internalId')}</strong>{' '}
              {label ? generateGroupName(label) : t('customGroups.autoGenerated')}
            </Typography>
          )}
        </Box>
      </Box>

      {/* Quick Templates - Compact Inline */}
      <Box
        sx={{
          display: 'flex',
          alignItems: 'center',
          gap: 2,
          p: 2,
          bgcolor: 'action.hover',
          borderRadius: 1,
        }}
      >
        <Typography variant="body2" sx={{ fontWeight: 'medium', minWidth: 'auto' }}>
          {t('customGroups.quickStart')}
        </Typography>
        <TextField
          select
          value={selectedTemplateIndex}
          onChange={(e) => handleTemplateChangeLocal(Number(e.target.value))}
          size="small"
          sx={{ minWidth: 200 }}
          label={t('customGroups.chooseTemplate')}
        >
          {DEFAULT_INTENSITY_TEMPLATES.map((template, index) => (
            <MenuItem key={index} value={index}>
              {template.name === 'Basic (1-4)'
                ? t('templateBasic')
                : template.name === 'Simple (1-3)'
                  ? t('templateSimple')
                  : template.name === 'Extended (1-5)'
                    ? t('templateExtended')
                    : template.name}
            </MenuItem>
          ))}
        </TextField>
        <Typography variant="body2" color="text.secondary" sx={{ fontSize: '0.75rem' }}>
          {t('customGroups.selectTemplateDescription')}
        </Typography>
      </Box>

      {/* Intensity Labels - Main Content Area */}
      <Box>
        <Typography variant="h6" sx={{ mb: 2 }}>
          {t('customGroups.intensityLabels')} ({intensityLabels.length}/{MAX_INTENSITIES_COUNT})
        </Typography>

        <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
          {t('customGroups.customizeIntensityDescription')}
        </Typography>

        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1.5 }}>
          {intensityLabels.map((labelText, index) => (
            <Box key={index} sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <Typography
                variant="body2"
                sx={{ minWidth: '30px', fontWeight: 'bold', color: 'primary.main' }}
              >
                {index + 1}
              </Typography>
              <TextField
                label={t('customGroups.levelInputLabel', { level: index + 1 })}
                value={labelText}
                onChange={(e) => updateIntensityLabel(index, e.target.value)}
                size="small"
                sx={{ flex: 1 }}
                inputProps={{ maxLength: MAX_INTENSITY_LABEL_LENGTH }}
              />
              <IconButton
                onClick={() => removeIntensity(index)}
                disabled={intensityLabels.length <= MIN_INTENSITIES_COUNT}
                color="error"
                size="small"
              >
                <DeleteIcon />
              </IconButton>
            </Box>
          ))}

          <Button
            startIcon={<AddIcon />}
            onClick={addIntensity}
            disabled={intensityLabels.length >= MAX_INTENSITIES_COUNT}
            variant="outlined"
            size="small"
            sx={{ alignSelf: 'flex-start', mt: 1 }}
          >
            {t('customGroups.addIntensityLevel')}
          </Button>
        </Box>
      </Box>
    </Box>
  );
}
