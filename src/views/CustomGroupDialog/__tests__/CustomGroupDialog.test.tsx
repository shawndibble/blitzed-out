import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import CustomGroupDialog from '../index';
import { CustomGroupPull } from '@/types/customGroups';
import { ThemeProvider, createTheme } from '@mui/material/styles';

// Create a theme for testing
const theme = createTheme();

// Mock the translation hook
vi.mock('react-i18next', () => ({
  useTranslation: () => ({
    t: (key: string, params?: any) => {
      const translations: Record<string, string> = {
        'customGroups.manageCustomGroups': 'Manage Custom Groups',
        'customGroups.createNewGroupsDescription':
          'Create new groups or manage existing custom groups',
        'customGroups.existingGroups': 'Existing Groups',
        'customGroups.editGroup': 'Edit Group',
        'customGroups.createNew': 'Create New',
        'customGroups.loadingGroups': 'Loading groups...',
        'customGroups.noCustomGroupsFound':
          'No custom groups found. Create your first group using the "Create New" tab.',
        'customGroups.groupLabel': 'Group Label',
        'customGroups.groupType': 'Group Type',
        'customGroups.groupInformation': 'Group Information',
        'customGroups.groupLabelHelp': `Display name shown to users (max ${params?.maxLength || 50} chars)`,
        'customGroups.groupTypeHelp': 'Determines when this group appears in the Setup Wizard',
        'customGroups.locale': 'Locale:',
        'customGroups.gameMode': 'Game Mode:',
        'customGroups.internalId': 'Internal ID:',
        'customGroups.autoGenerated': 'auto-generated',
        'customGroups.quickStart': 'Quick Start:',
        'customGroups.chooseTemplate': 'Choose Template',
        'customGroups.selectTemplateDescription': 'Select a template to populate the labels below',
        'customGroups.intensityLabels': 'Intensity Labels',
        'customGroups.customizeIntensityDescription':
          'Customize the labels for each intensity level. Values are automatically assigned as 1, 2, 3, etc.',
        'customGroups.addIntensityLevel': 'Add Intensity Level',
        'customGroups.levelLabel': `Level ${params?.level || 1}`,
        'customGroups.levelInputLabel': `Level ${params?.level || 1} Label`,
        'customGroups.deleteGroupConfirm': 'Are you sure you want to delete this group?',
        'customGroups.deleteGroupWithTilesConfirm': `This group has ${params?.count || 0} custom tiles. Deleting it will also delete all associated tiles. Are you sure?`,
        'customGroups.intensityLevelsText': 'intensity levels',
        'customGroups.customTilesText': 'custom tiles',
        'customGroups.updateGroup': 'Update Group',
        'customGroups.createGroup': 'Create Group',
        'customGroups.saving': 'Saving...',
        'intensityLabels.beginner': 'Beginner',
        'intensityLabels.intermediate': 'Intermediate',
        'intensityLabels.advanced': 'Advanced',
        'intensityLabels.light': 'Light',
        'intensityLabels.medium': 'Medium',
        'intensityLabels.intense': 'Intense',
        'intensityLabels.extreme': 'Extreme',
        'intensityLabels.veryLight': 'Very Light',
        'intensityLabels.veryIntense': 'Very Intense',
        'groupTypes.selectType': 'Select a type...',
        'groupTypes.solo': 'Solo - Appears in online mode',
        'groupTypes.foreplay': 'Foreplay - Appears in local mode (before intimate actions)',
        'groupTypes.sex': 'Sex - Appears in local mode (intimate actions)',
        'groupTypes.consumption': 'Consumption - Appears in all modes (drinks, substances, etc.)',
        Close: 'Close',
      };
      return translations[key] || key;
    },
  }),
}));

// Mock the stores
vi.mock('@/stores/customGroups', () => ({
  getAllAvailableGroups: vi.fn(),
  addCustomGroup: vi.fn(),
  updateCustomGroup: vi.fn(),
  deleteCustomGroup: vi.fn(),
}));

vi.mock('@/stores/customTiles', () => ({
  countTilesByGroup: vi.fn(),
  deleteCustomTilesByGroup: vi.fn(),
}));

// Mock the validation service
vi.mock('@/services/validationService', () => ({
  validateCustomGroup: vi.fn(),
  validateGroupLabel: vi.fn(),
  getValidationConstants: () => ({
    MAX_GROUP_LABEL_LENGTH: 50,
    MIN_INTENSITIES_COUNT: 1,
    MAX_INTENSITIES_COUNT: 10,
  }),
}));

import { getAllAvailableGroups, addCustomGroup } from '@/stores/customGroups';
import { countTilesByGroup } from '@/stores/customTiles';
import { validateCustomGroup, validateGroupLabel } from '@/services/validationService';

// Helper function to render with theme
const renderWithTheme = (component: React.ReactElement) => {
  return render(<ThemeProvider theme={theme}>{component}</ThemeProvider>);
};

describe('CustomGroupDialog', () => {
  const mockGroups: CustomGroupPull[] = [
    {
      id: '1',
      name: 'testGroup1',
      label: 'Test Group 1',
      intensities: [
        { id: '1', label: 'Beginner', value: 1, isDefault: true },
        { id: '2', label: 'Advanced', value: 2, isDefault: true },
      ],
      type: 'solo',
      isDefault: false,
      locale: 'en',
      gameMode: 'online',
      createdAt: new Date(),
      updatedAt: new Date(),
    },
  ];

  const defaultProps = {
    open: true,
    onClose: vi.fn(),
    onGroupCreated: vi.fn(),
    onGroupUpdated: vi.fn(),
    locale: 'en' as const,
    gameMode: 'online' as const,
  };

  beforeEach(() => {
    vi.clearAllMocks();
    (getAllAvailableGroups as any).mockResolvedValue(mockGroups);
    (countTilesByGroup as any).mockResolvedValue(0);
    (validateCustomGroup as any).mockReturnValue({ isValid: true, errors: [] });
    (validateGroupLabel as any).mockReturnValue({ isValid: true, errors: [] });
  });

  afterEach(() => {
    vi.clearAllMocks();
  });

  describe('Dialog Rendering', () => {
    it('renders the dialog when open is true', async () => {
      renderWithTheme(<CustomGroupDialog {...defaultProps} />);

      expect(screen.getByText('Manage Custom Groups')).toBeInTheDocument();
      expect(
        screen.getByText('Create new groups or manage existing custom groups')
      ).toBeInTheDocument();
    });

    it('does not render the dialog when open is false', () => {
      renderWithTheme(<CustomGroupDialog {...defaultProps} open={false} />);

      expect(screen.queryByText('Manage Custom Groups')).not.toBeInTheDocument();
    });

    it('displays tabs for existing groups and create new', async () => {
      renderWithTheme(<CustomGroupDialog {...defaultProps} />);

      await waitFor(() => {
        expect(screen.getByText('Existing Groups')).toBeInTheDocument();
        expect(screen.getByText('Create New')).toBeInTheDocument();
      });
    });
  });

  describe('Existing Groups Tab', () => {
    it('displays loading state initially', async () => {
      renderWithTheme(<CustomGroupDialog {...defaultProps} />);

      expect(screen.getByText('Loading groups...')).toBeInTheDocument();
    });

    it('displays existing groups after loading', async () => {
      renderWithTheme(<CustomGroupDialog {...defaultProps} />);

      await waitFor(() => {
        expect(screen.getByText('Test Group 1')).toBeInTheDocument();
      });
    });

    it('displays no groups message when no custom groups exist', async () => {
      (getAllAvailableGroups as any).mockResolvedValue([]);

      renderWithTheme(<CustomGroupDialog {...defaultProps} />);

      await waitFor(() => {
        expect(
          screen.getByText(
            'No custom groups found. Create your first group using the "Create New" tab.'
          )
        ).toBeInTheDocument();
      });
    });

    it('displays group information with intensity and tile counts', async () => {
      (countTilesByGroup as any).mockResolvedValue(5);

      renderWithTheme(<CustomGroupDialog {...defaultProps} />);

      await waitFor(() => {
        expect(screen.getByText('Test Group 1')).toBeInTheDocument();
        expect(screen.getByText('2 intensity levels')).toBeInTheDocument();
        expect(screen.getByText('5 custom tiles')).toBeInTheDocument();
      });
    });
  });

  describe('Create New Tab', () => {
    beforeEach(async () => {
      renderWithTheme(<CustomGroupDialog {...defaultProps} />);

      // Wait for component to load and click the Create New tab
      await waitFor(() => {
        expect(screen.getByText('Create New')).toBeInTheDocument();
      });

      const createNewTab = screen.getByText('Create New');
      await userEvent.click(createNewTab);
    });

    it('displays the create new form', async () => {
      await waitFor(() => {
        expect(screen.getByText('Group Information')).toBeInTheDocument();
        expect(screen.getByLabelText('Group Label')).toBeInTheDocument();
        expect(screen.getByLabelText('Group Type')).toBeInTheDocument();
      });
    });

    it('shows form fields with proper labels and help text', async () => {
      await waitFor(() => {
        expect(screen.getByText('Display name shown to users (max 50 chars)')).toBeInTheDocument();
        expect(
          screen.getByText('Determines when this group appears in the Setup Wizard')
        ).toBeInTheDocument();
      });
    });

    it('displays intensity labels section', async () => {
      await waitFor(() => {
        expect(screen.getByText('Intensity Labels')).toBeInTheDocument();
        expect(
          screen.getByText(
            'Customize the labels for each intensity level. Values are automatically assigned as 1, 2, 3, etc.'
          )
        ).toBeInTheDocument();
      });
    });

    it('shows default intensity labels', async () => {
      await waitFor(() => {
        expect(screen.getByDisplayValue('Beginner')).toBeInTheDocument();
        expect(screen.getByDisplayValue('Intermediate')).toBeInTheDocument();
        expect(screen.getByDisplayValue('Advanced')).toBeInTheDocument();
      });
    });

    it('shows template selection dropdown', async () => {
      await waitFor(() => {
        expect(screen.getByText('Choose Template')).toBeInTheDocument();
        expect(
          screen.getByText('Select a template to populate the labels below')
        ).toBeInTheDocument();
      });
    });
  });

  describe('Form Interactions', () => {
    beforeEach(async () => {
      renderWithTheme(<CustomGroupDialog {...defaultProps} />);

      // Navigate to Create New tab
      await waitFor(() => {
        expect(screen.getByText('Create New')).toBeInTheDocument();
      });

      const createNewTab = screen.getByText('Create New');
      await userEvent.click(createNewTab);
    });

    it('allows typing in group label field', async () => {
      const labelInput = await screen.findByLabelText('Group Label');
      await userEvent.type(labelInput, 'My Custom Group');

      expect(labelInput).toHaveValue('My Custom Group');
    });

    it('allows selecting group type', async () => {
      const typeSelect = await screen.findByLabelText('Group Type');
      await userEvent.click(typeSelect);

      await waitFor(() => {
        expect(screen.getByText('Solo - Appears in online mode')).toBeInTheDocument();
      });
    });

    it('allows adding new intensity levels', async () => {
      const addButton = await screen.findByText('Add Intensity Level');
      await userEvent.click(addButton);

      await waitFor(() => {
        expect(screen.getByDisplayValue('Level 4')).toBeInTheDocument();
      });
    });

    it('allows removing intensity levels', async () => {
      // Find a delete button for an intensity level
      const deleteButtons = await screen.findAllByRole('button', { name: /delete/i });
      const intensityDeleteButton = deleteButtons.find((button) =>
        button.closest('[data-testid]')?.getAttribute('data-testid')?.includes('intensity')
      );

      if (intensityDeleteButton) {
        await userEvent.click(intensityDeleteButton);

        // Should still have at least the minimum number of intensities
        await waitFor(() => {
          expect(screen.getAllByDisplayValue(/Beginner|Intermediate/)).toHaveLength(2);
        });
      }
    });
  });

  describe('Edit Mode', () => {
    const editingGroup: CustomGroupPull = {
      id: '1',
      name: 'editGroup',
      label: 'Edit Group',
      intensities: [
        { id: '1', label: 'Easy', value: 1, isDefault: false },
        { id: '2', label: 'Hard', value: 2, isDefault: false },
      ],
      type: 'solo',
      isDefault: false,
      locale: 'en',
      gameMode: 'online',
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    it('pre-fills form fields when editing a group', async () => {
      renderWithTheme(<CustomGroupDialog {...defaultProps} editingGroup={editingGroup} />);

      // Should automatically go to Create New tab in edit mode
      await waitFor(() => {
        expect(screen.getByDisplayValue('Edit Group')).toBeInTheDocument();
        expect(screen.getByDisplayValue('Easy')).toBeInTheDocument();
        expect(screen.getByDisplayValue('Hard')).toBeInTheDocument();
      });
    });

    it('shows update button instead of create button in edit mode', async () => {
      renderWithTheme(<CustomGroupDialog {...defaultProps} editingGroup={editingGroup} />);

      await waitFor(() => {
        expect(screen.getByText('Update Group')).toBeInTheDocument();
        expect(screen.queryByText('Create Group')).not.toBeInTheDocument();
      });
    });
  });

  describe('Form Submission', () => {
    beforeEach(async () => {
      renderWithTheme(<CustomGroupDialog {...defaultProps} />);

      // Navigate to Create New tab
      await waitFor(() => {
        expect(screen.getByText('Create New')).toBeInTheDocument();
      });

      const createNewTab = screen.getByText('Create New');
      await userEvent.click(createNewTab);
    });

    it('calls addCustomGroup when creating a new group', async () => {
      const labelInput = await screen.findByLabelText('Group Label');
      await userEvent.type(labelInput, 'New Group');

      const typeSelect = await screen.findByLabelText('Group Type');
      await userEvent.click(typeSelect);

      const soloOption = await screen.findByText('Solo - Appears in online mode');
      await userEvent.click(soloOption);

      const createButton = await screen.findByText('Create Group');
      await userEvent.click(createButton);

      await waitFor(() => {
        expect(addCustomGroup).toHaveBeenCalled();
      });
    });

    it('shows saving state during submission', async () => {
      (addCustomGroup as any).mockImplementation(
        () => new Promise((resolve) => setTimeout(resolve, 100))
      );

      const labelInput = await screen.findByLabelText('Group Label');
      await userEvent.type(labelInput, 'New Group');

      const createButton = await screen.findByText('Create Group');
      await userEvent.click(createButton);

      expect(screen.getByText('Saving...')).toBeInTheDocument();
    });
  });

  describe('Validation', () => {
    beforeEach(async () => {
      renderWithTheme(<CustomGroupDialog {...defaultProps} />);

      // Navigate to Create New tab
      await waitFor(() => {
        expect(screen.getByText('Create New')).toBeInTheDocument();
      });

      const createNewTab = screen.getByText('Create New');
      await userEvent.click(createNewTab);
    });

    it('shows validation errors when form is invalid', async () => {
      (validateCustomGroup as any).mockReturnValue({
        isValid: false,
        errors: ['Group label is required'],
      });

      const createButton = await screen.findByText('Create Group');
      await userEvent.click(createButton);

      await waitFor(() => {
        expect(screen.getByText('Group label is required')).toBeInTheDocument();
      });
    });
  });

  describe('Dialog Controls', () => {
    it('calls onClose when close button is clicked', async () => {
      const onClose = vi.fn();
      renderWithTheme(<CustomGroupDialog {...defaultProps} onClose={onClose} />);

      const closeButton = await screen.findByText('Close');
      await userEvent.click(closeButton);

      expect(onClose).toHaveBeenCalled();
    });
  });
});
